{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"gnmic (pronoun.: gee\u00b7en\u00b7em\u00b7eye\u00b7see) is a gNMI CLI client that provides full support for Capabilities, Get, Set and Subscribe RPCs with collector capabilities. Features # Full support for gNMI RPCs Every gNMI RPC has a corresponding command with all of the RPC options configurable by means of the local and global flags. Flexible collector deployment gnmic can be deployed as a gNMI collector that supports multiple output types ( NATS , Kafka , Prometheus , InfluxDB ,...). The collector can be deployed either as a single instance , as part of a cluster , or used to form data pipelines . gNMI data manipulation gnmic collector supports data transformation capabilities that can be used to adapt the collected data to your specific use case. Dynamic targets loading gnmic support target loading at runtime based on input from external systems. YANG-based path suggestions Your CLI magically becomes a YANG browser when gnmic is executed in prompt mode. In this mode the flags that take XPATH values will get auto-suggestions based on the provided YANG modules. In other words - voodoo magic Multiple configuration sources gnmic supports flags , environment variables as well as file based configurations. Multi-target operations Commands can operate on multiple gNMI targets for bulk configuration/retrieval/subscription. Multiple subscriptions With file based configuration it is possible to define and configure multiple subscriptions which can be independently associated with gNMI targets. Inspect gNMI messages With the textproto output format and the logging capabilities of gnmic you can see the actual gNMI messages being sent/received. Its like having a gNMI looking glass! Configurable TLS enforcement gNMI client supports both TLS and non-TLS transports so you can start using it in a lab environment without having to care about the PKI. Dial-out telemetry The dial-out telemetry server is provided for Nokia SR OS. Pre-built multi-platform binaries Statically linked binaries made in our release pipeline are available for major operating systems and architectures. Making installation a breeze! Extensive and friendly documentation You won't be in need to dive into the source code to understand how gnimc works, our documentation site has you covered. Quick start guide # Installation # bash -c \"$(curl -sL https://get-gnmic.kmrd.dev)\" Capabilities request # gnmic -a 10.1.0.11:57400 -u admin -p admin --insecure capabilities Get request # gnmic -a 10.1.0.11:57400 -u admin -p admin --insecure \\ get --path /state/system/platform Set request # gnmic -a 10.1.0.11:57400 -u admin -p admin --insecure \\ set --update-path /configure/system/name \\ --update-value gnmic_demo Subscribe request # gnmic -a 10.1.0.11:57400 -u admin -p admin --insecure \\ sub --path \"/state/port[port-id=1/1/c1/1]/statistics/in-packets\"","title":"Home"},{"location":"#features","text":"Full support for gNMI RPCs Every gNMI RPC has a corresponding command with all of the RPC options configurable by means of the local and global flags. Flexible collector deployment gnmic can be deployed as a gNMI collector that supports multiple output types ( NATS , Kafka , Prometheus , InfluxDB ,...). The collector can be deployed either as a single instance , as part of a cluster , or used to form data pipelines . gNMI data manipulation gnmic collector supports data transformation capabilities that can be used to adapt the collected data to your specific use case. Dynamic targets loading gnmic support target loading at runtime based on input from external systems. YANG-based path suggestions Your CLI magically becomes a YANG browser when gnmic is executed in prompt mode. In this mode the flags that take XPATH values will get auto-suggestions based on the provided YANG modules. In other words - voodoo magic Multiple configuration sources gnmic supports flags , environment variables as well as file based configurations. Multi-target operations Commands can operate on multiple gNMI targets for bulk configuration/retrieval/subscription. Multiple subscriptions With file based configuration it is possible to define and configure multiple subscriptions which can be independently associated with gNMI targets. Inspect gNMI messages With the textproto output format and the logging capabilities of gnmic you can see the actual gNMI messages being sent/received. Its like having a gNMI looking glass! Configurable TLS enforcement gNMI client supports both TLS and non-TLS transports so you can start using it in a lab environment without having to care about the PKI. Dial-out telemetry The dial-out telemetry server is provided for Nokia SR OS. Pre-built multi-platform binaries Statically linked binaries made in our release pipeline are available for major operating systems and architectures. Making installation a breeze! Extensive and friendly documentation You won't be in need to dive into the source code to understand how gnimc works, our documentation site has you covered.","title":"Features"},{"location":"#quick-start-guide","text":"","title":"Quick start guide"},{"location":"#installation","text":"bash -c \"$(curl -sL https://get-gnmic.kmrd.dev)\"","title":"Installation"},{"location":"#capabilities-request","text":"gnmic -a 10.1.0.11:57400 -u admin -p admin --insecure capabilities","title":"Capabilities request"},{"location":"#get-request","text":"gnmic -a 10.1.0.11:57400 -u admin -p admin --insecure \\ get --path /state/system/platform","title":"Get request"},{"location":"#set-request","text":"gnmic -a 10.1.0.11:57400 -u admin -p admin --insecure \\ set --update-path /configure/system/name \\ --update-value gnmic_demo","title":"Set request"},{"location":"#subscribe-request","text":"gnmic -a 10.1.0.11:57400 -u admin -p admin --insecure \\ sub --path \"/state/port[port-id=1/1/c1/1]/statistics/in-packets\"","title":"Subscribe request"},{"location":"basic_usage/","text":"The following examples demonstrate the basic usage of the gnmic in a scenario where the remote target runs insecure (not TLS enabled) gNMI server. The admin:admin credentials are used to connect to the gNMI server running at 10.1.0.11:57400 address. Info For the complete command usage examples, refer to the \"Command reference\" menu. Capabilities RPC # Getting the device's capabilities is done with capabilities command: gnmic -a 10.1.0.11:57400 -u admin -p admin --insecure capabilities gNMI_Version: 0.7.0 supported models: - nokia-conf, Nokia, 19.10.R2 - nokia-state, Nokia, 19.10.R2 - nokia-li-state, Nokia, 19.10.R2 - nokia-li-conf, Nokia, 19.10.R2 << SNIPPED >> supported encodings: - JSON - BYTES Get RPC # Retrieving the data snapshot from the target device is done with get command: gnmic -a 10.1.0.11:57400 -u admin -p admin --insecure \\ get --path /state/system/platform { \"source\": \"10.1.0.11:57400\", \"timestamp\": 1592829586901061761, \"time\": \"2020-06-22T14:39:46.901061761+02:00\", \"updates\": [ { \"Path\": \"state/system/platform\", \"values\": { \"state/system/platform\": \"7750 SR-1s\" } } ] } Set RPC # Modifying state of the target device is done with set command: gnmic -a 10.1.0.11:57400 -u admin -p admin --insecure \\ set --update-path /configure/system/name \\ --update-value gnmic_demo { \"source\": \"0.tcp.eu.ngrok.io:12267\", \"timestamp\": 1592831593821038738, \"time\": \"2020-06-22T15:13:13.821038738+02:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"configure/system/name\" } ] } Subscribe RPC # Subscription to the gNMI telemetry data can be done with subscribe command: gnmic -a 10.1.0.11:57400 -u admin -p admin --insecure \\ sub --path \"/state/port[port-id=1/1/c1/1]/statistics/in-packets\" { \"source\": \"0.tcp.eu.ngrok.io:12267\", \"timestamp\": 1592832965197288856, \"time\": \"2020-06-22T15:36:05.197288856+02:00\", \"prefix\": \"state/port[port-id=1/1/c1/1]/statistics\", \"updates\": [ { \"Path\": \"in-packets\", \"values\": { \"in-packets\": \"12142\" } } ] } YANG path browser # gnmic can produce a list of XPATH/gNMI paths for a given YANG model with its path command. The paths in that list can be used as the --path values for the Get/Set/Subscribe commands. # nokia model gnmic path -m nokia-state --file nokia-state-combined.yang | head -10 /state/aaa/radius/statistics/coa/dropped/bad-authentication /state/aaa/radius/statistics/coa/dropped/missing-auth-policy /state/aaa/radius/statistics/coa/dropped/invalid /state/aaa/radius/statistics/coa/dropped/missing-resource /state/aaa/radius/statistics/coa/received /state/aaa/radius/statistics/coa/accepted /state/aaa/radius/statistics/coa/rejected /state/aaa/radius/statistics/disconnect-messages/dropped/bad-authentication /state/aaa/radius/statistics/disconnect-messages/dropped/missing-auth-policy /state/aaa/radius/statistics/disconnect-messages/dropped/invalid","title":"Basic usage"},{"location":"basic_usage/#capabilities-rpc","text":"Getting the device's capabilities is done with capabilities command: gnmic -a 10.1.0.11:57400 -u admin -p admin --insecure capabilities gNMI_Version: 0.7.0 supported models: - nokia-conf, Nokia, 19.10.R2 - nokia-state, Nokia, 19.10.R2 - nokia-li-state, Nokia, 19.10.R2 - nokia-li-conf, Nokia, 19.10.R2 << SNIPPED >> supported encodings: - JSON - BYTES","title":"Capabilities RPC"},{"location":"basic_usage/#get-rpc","text":"Retrieving the data snapshot from the target device is done with get command: gnmic -a 10.1.0.11:57400 -u admin -p admin --insecure \\ get --path /state/system/platform { \"source\": \"10.1.0.11:57400\", \"timestamp\": 1592829586901061761, \"time\": \"2020-06-22T14:39:46.901061761+02:00\", \"updates\": [ { \"Path\": \"state/system/platform\", \"values\": { \"state/system/platform\": \"7750 SR-1s\" } } ] }","title":"Get RPC"},{"location":"basic_usage/#set-rpc","text":"Modifying state of the target device is done with set command: gnmic -a 10.1.0.11:57400 -u admin -p admin --insecure \\ set --update-path /configure/system/name \\ --update-value gnmic_demo { \"source\": \"0.tcp.eu.ngrok.io:12267\", \"timestamp\": 1592831593821038738, \"time\": \"2020-06-22T15:13:13.821038738+02:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"configure/system/name\" } ] }","title":"Set RPC"},{"location":"basic_usage/#subscribe-rpc","text":"Subscription to the gNMI telemetry data can be done with subscribe command: gnmic -a 10.1.0.11:57400 -u admin -p admin --insecure \\ sub --path \"/state/port[port-id=1/1/c1/1]/statistics/in-packets\" { \"source\": \"0.tcp.eu.ngrok.io:12267\", \"timestamp\": 1592832965197288856, \"time\": \"2020-06-22T15:36:05.197288856+02:00\", \"prefix\": \"state/port[port-id=1/1/c1/1]/statistics\", \"updates\": [ { \"Path\": \"in-packets\", \"values\": { \"in-packets\": \"12142\" } } ] }","title":"Subscribe RPC"},{"location":"basic_usage/#yang-path-browser","text":"gnmic can produce a list of XPATH/gNMI paths for a given YANG model with its path command. The paths in that list can be used as the --path values for the Get/Set/Subscribe commands. # nokia model gnmic path -m nokia-state --file nokia-state-combined.yang | head -10 /state/aaa/radius/statistics/coa/dropped/bad-authentication /state/aaa/radius/statistics/coa/dropped/missing-auth-policy /state/aaa/radius/statistics/coa/dropped/invalid /state/aaa/radius/statistics/coa/dropped/missing-resource /state/aaa/radius/statistics/coa/received /state/aaa/radius/statistics/coa/accepted /state/aaa/radius/statistics/coa/rejected /state/aaa/radius/statistics/disconnect-messages/dropped/bad-authentication /state/aaa/radius/statistics/disconnect-messages/dropped/missing-auth-policy /state/aaa/radius/statistics/disconnect-messages/dropped/invalid","title":"YANG path browser"},{"location":"changelog/","text":"v0.11.0 - April 15 th 2021 # Processors: Add event-allow processor, basically an allow ACL based on jq condition or regular expressions. Add event-extract-tags processor, it adds tags based on regex named groups from tag names, tag values, value names, or values. Add gnmi-action to event-trigger processor, the action runs a gNMI Set or Get if the trigger condition is met. Set Command: Improve usability by supporting reading values (--update-file and --replace-file) from standard input. v0.10.0 - April 8 th 2021 # New command: getset command: This command conditionally executes both a Get and a Set RPC, the GetResponse is used to evaluate a condition which if met triggers the execution of the Set RPC. Processors: Some processors' apply condition can be expressed using jq instead of regular expressions. v0.9.1 - March 23 rd 2021 # Processors: Add event-trigger processor: This processor is used to trigger a predefined action if a condition is met. New processor event-jq which applies a transformation on the messages expressed as a jq expression. Shell autocompletion: Shell (bash, zsh and fish) autocompletion scripts can be generated using gnmic completion [bash|zsh|fish] . gRPC gzip compression: gnmic supports gzip compression on gRPC connections. v0.9.0 - March 11 th 2021 # Clustered Prometheus output: When deployed as a cluster, it is possible to register only one of the prometheus outputs in Consul. This is handy in the case of a cluster with data replication. Proto file loading at runtime (Nokia SROS): gnmic supports loading SROS proto files at runtime to decode gNMI updates with proto encoding Kafka Output: Kafka SASL support: PLAIN, SCRAM SHA256/SHA512 OAuth mechanisms are supported. Configuration: gnmic supports configuration using environment variables. Processors: add event-merge processor. Target Loaders: gnmic supports target loaders at runtime, new targets can be added to the configuration from a file that gnmic watches or from Consul v0.8.0 - March 2 nd 2021 # Inputs: Processors can now be applied by the input plugins. Prometheus output: The Prometheus output can now register as a service in Consul, a Prometheus client can discover the output using consul service discovery. Clustering: gnmic can now run as a cluster, this requires a running Consul instance that will be used by the gnmic instance for leader election and target load sharing. Configuration file: The default configuration file placement now follows XDG recommendations CLI exit status: Failure of most commands is properly reflected in the cli exit status. Configuration: Configuration fields that are OS paths are expanded by gnmic Deployment examples: A set of deployment examples is added to the repo and the docs. v0.7.0 - January 28 th 2021 # Prometheus output metrics customization: metric-prefix and append-subscription-name can be used to change the default metric prefix and append the subscription name to the metric name. export-timestamps : enables/disables the export of timestamps together with the metric. strings-as-labels : enables/disables automatically adding paths with a value of type string as a metric label. NATS output: allow multiple NATS workers under NATS output via field num-workers . add NATS prometheus internal metrics. STAN output: allow multiple STAN workers under STAN output via field num-workers . add NATS prometheus internal metrics. File output: add File prometheus metrics. Inputs: support ingesting gNMI data from NATS, STAN or a Kafka message bus. v0.6.0 - December 14 th 2020 # Processors: Added processors to gnmic , a set of basic processors can be used to manipulate gNMI data flowing through gnmic . These processors are applied by the output plugins Upgrade command: gnmic can be upgraded using gnmic version upgrade command. v0.5.2 - December 1 st 2020 # Outputs: Improve outputs logging Add Prometheus metrics to Kafka output v0.5.1 - November 28 th 2020 # Prompt Mode: Fix subscribe RPC behavior QoS: Do not populate QoS field if not set via config file or flag. Outputs: add configurable number of workers to some outputs. v0.5.0 - November 25 th 2020 # Prompt Mode: Add prompt sub commands. XPATH parsing: Add custom xpath parsingto gnmi.Path to allow for paths including column : . TLS: Allow configurable TLS versions per target, the minimum, the maximum and the preferred TLS versions ca be configured. v0.4.3 - November 10 th 2020 # Missing path: Initialize the path field if not present in SubscribeResponse v0.4.2 - November 5 th 2020 # YANG: Prompt command flags --file and --dir support globs. Subscribe: added flags --output that allows to choose a single output for subscribe updates Prompt: Max suggestions is automatically adjusted based on the terminal height. Add suggestions for address and subscriptions. v0.4.1 - October 22 nd 2020 # Prompt: Add suggestions of xpath with origin, --suggest-with-origin . v0.4.0 - October 21 st 2020 # New Command: Add new command prompt Prompt: Add ctrl+z key bind to delete a single path element. Add YANG info to xpath suggestions. Add GoLeft, GoRight key binds. Sort xpaths and prefixes suggestions. xpaths suggestions are properly generated if a prefix is present. flag --suggest-all-flags allows adding global flags suggestion in prompt mode. Prometheus output: Add support for Prometheus output plugin. v0.3.0 - October 1 st 2020 # InfluxDB output: Add support for influxDB output plugin. v0.2.3 - September 18 th 2020 # Retry Add basic RPC retry mechanism. ONCE mode subscription: Handle targets that send an EOF error instead of a SyncResponse to signify the end of ONCE subscriptions. Docker image: Docker images added to ghcr.io as well as docker hub. v0.2.2 - September 3 rd 2020 # CLI: Properly handle paths that include quotes. Unix Socket: Allow send/rcv of gNMI data to/from a unix socket. Outputs: Add TCP output plugin. v0.2.1 - August 11 th 2020 # Releases: Add .deb. and .rpm packages to releases. Outputs: Add UDP output plugin. v0.2.0 - August 7 th 2020 # Releases: Add ARM releases. Push docker image to docker hub. v0.1.1 - July 23 rd 2020 # Set Cmd: Support json_ietf encoding when the value is specified from a file. v0.1.0 - July 16 th 2020 # Outputs: Allow NATS/STAN output subject customization. v0.0.7 - July 16 th 2020 # gNMI Target: Add support for gNMI Target field. gNMI Origin: Add support for gNMI Origin field. Prometheus internal metrics: Add support for gnmic internal metrics via a Prometheus server. Outputs: Add support for multiple output plugins (file, NATS, STAN, Kafka) Targets: Support target specific configuration. Poll Subscription: Allow selecting polled targets and subscription using a CLI select menu. gNMI Models: Support multiple Models in Get and Subscribe RPCs. v0.0.6 - June 2 nd 2020 # Nokia Dialout: Add Support for Nokia Dialout telemetry. Printing: Convert timestamps to Time. v0.0.5 - May 18 th 2020 # Formatting: Add textproto format. v0.0.4 - May 11 th 2020 # Logging: Support logging to file instead of Stderr. Set Command: support Set values from YAML file. v0.0.3 - April 23 rd 2020 # Proxy: Allow usage of ENV proxy values for gRPC connections. Installation: Add installation script. v0.0.2 - April 13 th 2020 # Terminal printing clean up. Path Command: Add search option. v0.0.1 - March 24 th 2020 # Capabilities RPC Command. Get RPC Command. Subscribe RPC Command. Set RPC Command. TLS support. Version Command. Path Commnd. initial Commit - February 20 th 2020 #","title":"Changelog"},{"location":"changelog/#v0110-april-15th-2021","text":"Processors: Add event-allow processor, basically an allow ACL based on jq condition or regular expressions. Add event-extract-tags processor, it adds tags based on regex named groups from tag names, tag values, value names, or values. Add gnmi-action to event-trigger processor, the action runs a gNMI Set or Get if the trigger condition is met. Set Command: Improve usability by supporting reading values (--update-file and --replace-file) from standard input.","title":"v0.11.0 - April 15th 2021"},{"location":"changelog/#v0100-april-8th-2021","text":"New command: getset command: This command conditionally executes both a Get and a Set RPC, the GetResponse is used to evaluate a condition which if met triggers the execution of the Set RPC. Processors: Some processors' apply condition can be expressed using jq instead of regular expressions.","title":"v0.10.0 - April 8th 2021"},{"location":"changelog/#v091-march-23rd-2021","text":"Processors: Add event-trigger processor: This processor is used to trigger a predefined action if a condition is met. New processor event-jq which applies a transformation on the messages expressed as a jq expression. Shell autocompletion: Shell (bash, zsh and fish) autocompletion scripts can be generated using gnmic completion [bash|zsh|fish] . gRPC gzip compression: gnmic supports gzip compression on gRPC connections.","title":"v0.9.1 - March 23rd 2021"},{"location":"changelog/#v090-march-11th-2021","text":"Clustered Prometheus output: When deployed as a cluster, it is possible to register only one of the prometheus outputs in Consul. This is handy in the case of a cluster with data replication. Proto file loading at runtime (Nokia SROS): gnmic supports loading SROS proto files at runtime to decode gNMI updates with proto encoding Kafka Output: Kafka SASL support: PLAIN, SCRAM SHA256/SHA512 OAuth mechanisms are supported. Configuration: gnmic supports configuration using environment variables. Processors: add event-merge processor. Target Loaders: gnmic supports target loaders at runtime, new targets can be added to the configuration from a file that gnmic watches or from Consul","title":"v0.9.0 - March 11th 2021"},{"location":"changelog/#v080-march-2nd-2021","text":"Inputs: Processors can now be applied by the input plugins. Prometheus output: The Prometheus output can now register as a service in Consul, a Prometheus client can discover the output using consul service discovery. Clustering: gnmic can now run as a cluster, this requires a running Consul instance that will be used by the gnmic instance for leader election and target load sharing. Configuration file: The default configuration file placement now follows XDG recommendations CLI exit status: Failure of most commands is properly reflected in the cli exit status. Configuration: Configuration fields that are OS paths are expanded by gnmic Deployment examples: A set of deployment examples is added to the repo and the docs.","title":"v0.8.0 - March 2nd 2021"},{"location":"changelog/#v070-january-28th-2021","text":"Prometheus output metrics customization: metric-prefix and append-subscription-name can be used to change the default metric prefix and append the subscription name to the metric name. export-timestamps : enables/disables the export of timestamps together with the metric. strings-as-labels : enables/disables automatically adding paths with a value of type string as a metric label. NATS output: allow multiple NATS workers under NATS output via field num-workers . add NATS prometheus internal metrics. STAN output: allow multiple STAN workers under STAN output via field num-workers . add NATS prometheus internal metrics. File output: add File prometheus metrics. Inputs: support ingesting gNMI data from NATS, STAN or a Kafka message bus.","title":"v0.7.0 - January 28th 2021"},{"location":"changelog/#v060-december-14th-2020","text":"Processors: Added processors to gnmic , a set of basic processors can be used to manipulate gNMI data flowing through gnmic . These processors are applied by the output plugins Upgrade command: gnmic can be upgraded using gnmic version upgrade command.","title":"v0.6.0 - December 14th 2020"},{"location":"changelog/#v052-december-1st-2020","text":"Outputs: Improve outputs logging Add Prometheus metrics to Kafka output","title":"v0.5.2 - December 1st 2020"},{"location":"changelog/#v051-november-28th-2020","text":"Prompt Mode: Fix subscribe RPC behavior QoS: Do not populate QoS field if not set via config file or flag. Outputs: add configurable number of workers to some outputs.","title":"v0.5.1 - November 28th 2020"},{"location":"changelog/#v050-november-25th-2020","text":"Prompt Mode: Add prompt sub commands. XPATH parsing: Add custom xpath parsingto gnmi.Path to allow for paths including column : . TLS: Allow configurable TLS versions per target, the minimum, the maximum and the preferred TLS versions ca be configured.","title":"v0.5.0 - November 25th 2020"},{"location":"changelog/#v043-november-10th-2020","text":"Missing path: Initialize the path field if not present in SubscribeResponse","title":"v0.4.3 - November 10th 2020"},{"location":"changelog/#v042-november-5th-2020","text":"YANG: Prompt command flags --file and --dir support globs. Subscribe: added flags --output that allows to choose a single output for subscribe updates Prompt: Max suggestions is automatically adjusted based on the terminal height. Add suggestions for address and subscriptions.","title":"v0.4.2 - November 5th 2020"},{"location":"changelog/#v041-october-22nd-2020","text":"Prompt: Add suggestions of xpath with origin, --suggest-with-origin .","title":"v0.4.1 - October 22nd 2020"},{"location":"changelog/#v040-october-21st-2020","text":"New Command: Add new command prompt Prompt: Add ctrl+z key bind to delete a single path element. Add YANG info to xpath suggestions. Add GoLeft, GoRight key binds. Sort xpaths and prefixes suggestions. xpaths suggestions are properly generated if a prefix is present. flag --suggest-all-flags allows adding global flags suggestion in prompt mode. Prometheus output: Add support for Prometheus output plugin.","title":"v0.4.0 - October 21st 2020"},{"location":"changelog/#v030-october-1st-2020","text":"InfluxDB output: Add support for influxDB output plugin.","title":"v0.3.0 - October 1st 2020"},{"location":"changelog/#v023-september-18th-2020","text":"Retry Add basic RPC retry mechanism. ONCE mode subscription: Handle targets that send an EOF error instead of a SyncResponse to signify the end of ONCE subscriptions. Docker image: Docker images added to ghcr.io as well as docker hub.","title":"v0.2.3 - September 18th 2020"},{"location":"changelog/#v022-september-3rd-2020","text":"CLI: Properly handle paths that include quotes. Unix Socket: Allow send/rcv of gNMI data to/from a unix socket. Outputs: Add TCP output plugin.","title":"v0.2.2 - September 3rd 2020"},{"location":"changelog/#v021-august-11th-2020","text":"Releases: Add .deb. and .rpm packages to releases. Outputs: Add UDP output plugin.","title":"v0.2.1 - August 11th 2020"},{"location":"changelog/#v020-august-7th-2020","text":"Releases: Add ARM releases. Push docker image to docker hub.","title":"v0.2.0 - August 7th 2020"},{"location":"changelog/#v011-july-23rd-2020","text":"Set Cmd: Support json_ietf encoding when the value is specified from a file.","title":"v0.1.1 - July 23rd 2020"},{"location":"changelog/#v010-july-16th-2020","text":"Outputs: Allow NATS/STAN output subject customization.","title":"v0.1.0 - July 16th 2020"},{"location":"changelog/#v007-july-16th-2020","text":"gNMI Target: Add support for gNMI Target field. gNMI Origin: Add support for gNMI Origin field. Prometheus internal metrics: Add support for gnmic internal metrics via a Prometheus server. Outputs: Add support for multiple output plugins (file, NATS, STAN, Kafka) Targets: Support target specific configuration. Poll Subscription: Allow selecting polled targets and subscription using a CLI select menu. gNMI Models: Support multiple Models in Get and Subscribe RPCs.","title":"v0.0.7 - July 16th 2020"},{"location":"changelog/#v006-june-2nd-2020","text":"Nokia Dialout: Add Support for Nokia Dialout telemetry. Printing: Convert timestamps to Time.","title":"v0.0.6 - June 2nd 2020"},{"location":"changelog/#v005-may-18th-2020","text":"Formatting: Add textproto format.","title":"v0.0.5 - May 18th 2020"},{"location":"changelog/#v004-may-11th-2020","text":"Logging: Support logging to file instead of Stderr. Set Command: support Set values from YAML file.","title":"v0.0.4 - May 11th 2020"},{"location":"changelog/#v003-april-23rd-2020","text":"Proxy: Allow usage of ENV proxy values for gRPC connections. Installation: Add installation script.","title":"v0.0.3 - April 23rd 2020"},{"location":"changelog/#v002-april-13th-2020","text":"Terminal printing clean up. Path Command: Add search option.","title":"v0.0.2 - April 13th 2020"},{"location":"changelog/#v001-march-24th-2020","text":"Capabilities RPC Command. Get RPC Command. Subscribe RPC Command. Set RPC Command. TLS support. Version Command. Path Commnd.","title":"v0.0.1 - March 24th 2020"},{"location":"changelog/#initial-commit-february-20th-2020","text":"","title":"initial Commit - February 20th 2020"},{"location":"global_flags/","text":"address # The address flag [-a | --address] is used to specify the target's gNMI server address in address:port format, for e.g: 192.168.113.11:57400 Multiple target addresses can be specified, either as comma separated values: gnmic --address 192.168.113.11:57400,192.168.113.12:57400 or by using the --address flag multiple times: gnmic -a 192.168.113.11:57400 --address 192.168.113.12:57400 config # The --config flag specifies the location of a configuration file that gnmic will read. If not specified, gnmic searches for a file named .gnmic with extensions yaml, yml, toml or json in the following locations: $PWD $HOME $XDG_CONFIG_HOME $XDG_CONFIG_HOME/gnmic debug # The debug flag [-d | --debug] enables the printing of extra information when sending/receiving an RPC encoding # The encoding flag [-e | --encoding] is used to specify the gNMI encoding of the Update part of a Notification message. It is case insensitive and must be one of: JSON, BYTES, PROTO, ASCII, JSON_IETF format # Five output formats can be configured by means of the --format flag. [proto, protojson, prototext, json, event] The default format is json . The proto format outputs the gnmi message as raw bytes, this value is not allowed when the output type is file (file system, stdout or stderr) see outputs The prototext and protojson formats are the message representation as defined in prototext and protojson The event format emits the received gNMI SubscribeResponse updates and deletes as a list of events tagged with the keys present in the subscribe path (as well as some metadata) and a timestamp Here goes an example of the same response emitted to stdout in the respective formats: protojson { \"update\" : { \"timestamp\" : \"1595584408456503938\" , \"prefix\" : { \"elem\" : [ { \"name\" : \"state\" }, { \"name\" : \"system\" }, { \"name\" : \"version\" } ] }, \"update\" : [ { \"path\" : { \"elem\" : [ { \"name\" : \"version-string\" } ] }, \"val\" : { \"stringVal\" : \"TiMOS-B-20.5.R1 both/x86_64 Nokia 7750 SR Copyright (c) 2000-2020 Nokia.\\r\\nAll rights reserved. All use subject to applicable license agreements.\\r\\nBuilt on Wed May 13 14:08:50 PDT 2020 by builder in /builds/c/205B/R1/panos/main/sros\" } } ] } } prototext update : { timestamp : 1595584168675434221 prefix : { elem : { name : \"state\" } elem : { name : \"system\" } elem : { name : \"version\" } } update : { path : { elem : { name : \"version-string\" } } val : { string_val : \"TiMOS-B-20.5.R1 both/x86_64 Nokia 7750 SR Copyright (c) 2000-2020 Nokia.\\r\\nAll rights reserved. All use subject to applicable license agreements.\\r\\nBuilt on Wed May 13 14:08:50 PDT 2020 by builder in /builds/c/205B/R1/panos/main/sros\" } } } json { \"source\" : \"172.17.0.100:57400\" , \"subscription-name\" : \"default\" , \"timestamp\" : 1595584326775141151 , \"time\" : \"2020-07-24T17:52:06.775141151+08:00\" , \"prefix\" : \"state/system/version\" , \"updates\" : [ { \"Path\" : \"version-string\" , \"values\" : { \"version-string\" : \"TiMOS-B-20.5.R1 both/x86_64 Nokia 7750 SR Copyright (c) 2000-2020 Nokia.\\r\\nAll rights reserved. All use subject to applicable license agreements.\\r\\nBuilt on Wed May 13 14:08:50 PDT 2020 by builder in /builds/c/205B/R1/panos/main/sros\" } } ] } event [ { \"name\" : \"default\" , \"timestamp\" : 1595584587725708234 , \"tags\" : { \"source\" : \"172.17.0.100:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"/state/system/version/version-string\" : \"TiMOS-B-20.5.R1 both/x86_64 Nokia 7750 SR Copyright (c) 2000-2020 Nokia.\\r\\nAll rights reserved. All use subject to applicable license agreements.\\r\\nBuilt on Wed May 13 14:08:50 PDT 2020 by builder in /builds/c/205B/R1/panos/main/sros\" } } ] insecure # The insecure flag [--insecure] is used to indicate that the client wishes to establish an non-TLS enabled gRPC connection. To disable certificate validation in a TLS-enabled connection use skip-verify flag. log # The --log flag enables log messages to appear on stderr output. By default logging is disabled. log-file # The log-file flag [--log-file <path>] sets the log output to a file referenced by the path. This flag supersede the --log flag no-prefix # The no prefix flag [--no-prefix] disables prefixing the json formatted responses with [ip:port] string. Note that in case a single target is specified, the prefix is not added. password # The password flag [-p | --password] is used to specify the target password as part of the user credentials. If omitted, the password input prompt is used to provide the password. Note that in case multiple targets are used, all should use the same credentials. prometheus-address # The prometheus-address flag [--prometheus-address] allows starting a prometheus server that can be scraped by a prometheus client. It exposes metrics like memory, CPU and file descriptor usage. proxy-from-env # The proxy-from-env flag [--proxy-from-env] indicates that the gnmic should use the HTTP/HTTPS proxy addresses defined in the environment variables http_proxy and https_proxy to reach the targets specified using the --address flag. retry # The retry flag `[--retry] specifies the wait time before each retry. Valid formats: 10s, 1m30s, 1h. Defaults to 10s skip-verify # The skip verify flag [--skip-verify] indicates that the target should skip the signature verification steps, in case a secure connection is used. timeout # The timeout flag [--timeout] specifies the gRPC timeout after which the connection attempt fails. Valid formats: 10s, 1m30s, 1h. Defaults to 10s tls-ca # The TLS CA flag [--tls-ca] specifies the root certificates for verifying server certificates encoded in PEM format. tls-cert # The tls cert flag [--tls-cert] specifies the public key for the client encoded in PEM format tls-key # The tls key flag [--tls-key] specifies the private key for the client encoded in PEM format tls-max-version # The tls max version flag [--tls-max-version] specifies the maximum supported TLS version supported by gNMIc when creating a secure gRPC connection tls-min-version # The tls min version flag [--tls-min-version] specifies the minimum supported TLS version supported by gNMIc when creating a secure gRPC connection tls-version # The tls version flag [--tls-version] specifies a single supported TLS version gNMIc when creating a secure gRPC connection. This flag overwrites the previously listed flags --tls-max-version and --tls-min-version . username # The username flag [-u | --username] is used to specify the target username as part of the user credentials. If omitted, the input prompt is used to provide the username. cluster-name # The [--cluster-name] flag is used to specify the cluster name the gnmic instance will join. The cluster name is used as part of the locked keys to share targets between multiple gnmic instances. Defaults to default-cluster instance-name # The [--instance-name] flag is used to give a unique name to the running gnmic instance. This is useful when there are multiple instances of gnmic running at the same time, either for high-availability and/or scalability proto-file # The [--proto-file] flag is used to specify a list of proto file names that gnmic will use to decode ProtoBytes values. only Nokia SROS proto is currently supported. proto-dir # The [--proto-dir] flag is used to specify a list of directories where gnmic will search for the proto file names specified with --proto-file . targets-file # The [--targets-file] flag is used to configure a file target loader gzip # The [--gzip] flag is used to enable gRPC gzip compression.","title":"Global flags"},{"location":"global_flags/#address","text":"The address flag [-a | --address] is used to specify the target's gNMI server address in address:port format, for e.g: 192.168.113.11:57400 Multiple target addresses can be specified, either as comma separated values: gnmic --address 192.168.113.11:57400,192.168.113.12:57400 or by using the --address flag multiple times: gnmic -a 192.168.113.11:57400 --address 192.168.113.12:57400","title":"address"},{"location":"global_flags/#config","text":"The --config flag specifies the location of a configuration file that gnmic will read. If not specified, gnmic searches for a file named .gnmic with extensions yaml, yml, toml or json in the following locations: $PWD $HOME $XDG_CONFIG_HOME $XDG_CONFIG_HOME/gnmic","title":"config"},{"location":"global_flags/#debug","text":"The debug flag [-d | --debug] enables the printing of extra information when sending/receiving an RPC","title":"debug"},{"location":"global_flags/#encoding","text":"The encoding flag [-e | --encoding] is used to specify the gNMI encoding of the Update part of a Notification message. It is case insensitive and must be one of: JSON, BYTES, PROTO, ASCII, JSON_IETF","title":"encoding"},{"location":"global_flags/#format","text":"Five output formats can be configured by means of the --format flag. [proto, protojson, prototext, json, event] The default format is json . The proto format outputs the gnmi message as raw bytes, this value is not allowed when the output type is file (file system, stdout or stderr) see outputs The prototext and protojson formats are the message representation as defined in prototext and protojson The event format emits the received gNMI SubscribeResponse updates and deletes as a list of events tagged with the keys present in the subscribe path (as well as some metadata) and a timestamp Here goes an example of the same response emitted to stdout in the respective formats: protojson { \"update\" : { \"timestamp\" : \"1595584408456503938\" , \"prefix\" : { \"elem\" : [ { \"name\" : \"state\" }, { \"name\" : \"system\" }, { \"name\" : \"version\" } ] }, \"update\" : [ { \"path\" : { \"elem\" : [ { \"name\" : \"version-string\" } ] }, \"val\" : { \"stringVal\" : \"TiMOS-B-20.5.R1 both/x86_64 Nokia 7750 SR Copyright (c) 2000-2020 Nokia.\\r\\nAll rights reserved. All use subject to applicable license agreements.\\r\\nBuilt on Wed May 13 14:08:50 PDT 2020 by builder in /builds/c/205B/R1/panos/main/sros\" } } ] } } prototext update : { timestamp : 1595584168675434221 prefix : { elem : { name : \"state\" } elem : { name : \"system\" } elem : { name : \"version\" } } update : { path : { elem : { name : \"version-string\" } } val : { string_val : \"TiMOS-B-20.5.R1 both/x86_64 Nokia 7750 SR Copyright (c) 2000-2020 Nokia.\\r\\nAll rights reserved. All use subject to applicable license agreements.\\r\\nBuilt on Wed May 13 14:08:50 PDT 2020 by builder in /builds/c/205B/R1/panos/main/sros\" } } } json { \"source\" : \"172.17.0.100:57400\" , \"subscription-name\" : \"default\" , \"timestamp\" : 1595584326775141151 , \"time\" : \"2020-07-24T17:52:06.775141151+08:00\" , \"prefix\" : \"state/system/version\" , \"updates\" : [ { \"Path\" : \"version-string\" , \"values\" : { \"version-string\" : \"TiMOS-B-20.5.R1 both/x86_64 Nokia 7750 SR Copyright (c) 2000-2020 Nokia.\\r\\nAll rights reserved. All use subject to applicable license agreements.\\r\\nBuilt on Wed May 13 14:08:50 PDT 2020 by builder in /builds/c/205B/R1/panos/main/sros\" } } ] } event [ { \"name\" : \"default\" , \"timestamp\" : 1595584587725708234 , \"tags\" : { \"source\" : \"172.17.0.100:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"/state/system/version/version-string\" : \"TiMOS-B-20.5.R1 both/x86_64 Nokia 7750 SR Copyright (c) 2000-2020 Nokia.\\r\\nAll rights reserved. All use subject to applicable license agreements.\\r\\nBuilt on Wed May 13 14:08:50 PDT 2020 by builder in /builds/c/205B/R1/panos/main/sros\" } } ]","title":"format"},{"location":"global_flags/#insecure","text":"The insecure flag [--insecure] is used to indicate that the client wishes to establish an non-TLS enabled gRPC connection. To disable certificate validation in a TLS-enabled connection use skip-verify flag.","title":"insecure"},{"location":"global_flags/#log","text":"The --log flag enables log messages to appear on stderr output. By default logging is disabled.","title":"log"},{"location":"global_flags/#log-file","text":"The log-file flag [--log-file <path>] sets the log output to a file referenced by the path. This flag supersede the --log flag","title":"log-file"},{"location":"global_flags/#no-prefix","text":"The no prefix flag [--no-prefix] disables prefixing the json formatted responses with [ip:port] string. Note that in case a single target is specified, the prefix is not added.","title":"no-prefix"},{"location":"global_flags/#password","text":"The password flag [-p | --password] is used to specify the target password as part of the user credentials. If omitted, the password input prompt is used to provide the password. Note that in case multiple targets are used, all should use the same credentials.","title":"password"},{"location":"global_flags/#prometheus-address","text":"The prometheus-address flag [--prometheus-address] allows starting a prometheus server that can be scraped by a prometheus client. It exposes metrics like memory, CPU and file descriptor usage.","title":"prometheus-address"},{"location":"global_flags/#proxy-from-env","text":"The proxy-from-env flag [--proxy-from-env] indicates that the gnmic should use the HTTP/HTTPS proxy addresses defined in the environment variables http_proxy and https_proxy to reach the targets specified using the --address flag.","title":"proxy-from-env"},{"location":"global_flags/#retry","text":"The retry flag `[--retry] specifies the wait time before each retry. Valid formats: 10s, 1m30s, 1h. Defaults to 10s","title":"retry"},{"location":"global_flags/#skip-verify","text":"The skip verify flag [--skip-verify] indicates that the target should skip the signature verification steps, in case a secure connection is used.","title":"skip-verify"},{"location":"global_flags/#timeout","text":"The timeout flag [--timeout] specifies the gRPC timeout after which the connection attempt fails. Valid formats: 10s, 1m30s, 1h. Defaults to 10s","title":"timeout"},{"location":"global_flags/#tls-ca","text":"The TLS CA flag [--tls-ca] specifies the root certificates for verifying server certificates encoded in PEM format.","title":"tls-ca"},{"location":"global_flags/#tls-cert","text":"The tls cert flag [--tls-cert] specifies the public key for the client encoded in PEM format","title":"tls-cert"},{"location":"global_flags/#tls-key","text":"The tls key flag [--tls-key] specifies the private key for the client encoded in PEM format","title":"tls-key"},{"location":"global_flags/#tls-max-version","text":"The tls max version flag [--tls-max-version] specifies the maximum supported TLS version supported by gNMIc when creating a secure gRPC connection","title":"tls-max-version"},{"location":"global_flags/#tls-min-version","text":"The tls min version flag [--tls-min-version] specifies the minimum supported TLS version supported by gNMIc when creating a secure gRPC connection","title":"tls-min-version"},{"location":"global_flags/#tls-version","text":"The tls version flag [--tls-version] specifies a single supported TLS version gNMIc when creating a secure gRPC connection. This flag overwrites the previously listed flags --tls-max-version and --tls-min-version .","title":"tls-version"},{"location":"global_flags/#username","text":"The username flag [-u | --username] is used to specify the target username as part of the user credentials. If omitted, the input prompt is used to provide the username.","title":"username"},{"location":"global_flags/#cluster-name","text":"The [--cluster-name] flag is used to specify the cluster name the gnmic instance will join. The cluster name is used as part of the locked keys to share targets between multiple gnmic instances. Defaults to default-cluster","title":"cluster-name"},{"location":"global_flags/#instance-name","text":"The [--instance-name] flag is used to give a unique name to the running gnmic instance. This is useful when there are multiple instances of gnmic running at the same time, either for high-availability and/or scalability","title":"instance-name"},{"location":"global_flags/#proto-file","text":"The [--proto-file] flag is used to specify a list of proto file names that gnmic will use to decode ProtoBytes values. only Nokia SROS proto is currently supported.","title":"proto-file"},{"location":"global_flags/#proto-dir","text":"The [--proto-dir] flag is used to specify a list of directories where gnmic will search for the proto file names specified with --proto-file .","title":"proto-dir"},{"location":"global_flags/#targets-file","text":"The [--targets-file] flag is used to configure a file target loader","title":"targets-file"},{"location":"global_flags/#gzip","text":"The [--gzip] flag is used to enable gRPC gzip compression.","title":"gzip"},{"location":"install/","text":"gnmic is a single binary built for the Linux, Mac OS and Windows platforms distributed via Github releases . Linux/Mac OS # To download & install the latest release the following automated installation script can be used: bash -c \" $( curl -sL https://get-gnmic.kmrd.dev ) \" As a result, the latest gnmic version will be installed in the /usr/local/bin directory and the version information will be printed out. Downloading gnmic_0.0.3_Darwin_x86_64.tar.gz... Moving gnmic to /usr/local/bin version : 0.0.3 commit : f541948 date : 2020-04-23T12:06:07Z gitURL : https://github.com/karimra/gnmic.git docs : https://gnmic.kmrd.dev Installation complete! To install a specific version of gnmic , provide the version with -v flag to the installation script: bash -c \" $( curl -sL https://get-gnmic.kmrd.dev ) \" -- -v 0 .5.0 Packages # Linux users running distributions with support for deb / rpm packages can install gnmic using pre-built packages: bash -c \"$(curl -sL https://get-gnmic.kmrd.dev)\" -- --use-pkg Upgrade # To upgrade gnmic to the latest version use the upgrade command: # upgrade using binary file gnmic version upgrade # upgrade using package gnmic version upgrade --use-pkg Windows # Windows users should use WSL on Windows and install the linux version of the tool. Docker # The gnmic container image can be pulled from Dockerhub or GitHub container registries. The tag of the image corresponds to the release version and latest tag points to the latest available release: # pull latest release from dockerhub docker pull gnmic/gnmic:latest # pull a specific release from dockerhub docker pull gnmic/gnmic:0.7.0 # pull latest release from github registry docker pull ghcr.io/karimra/gnmic:latest # pull a specific release from github registry docker pull ghcr.io/karimra/gnmic:0.5.2 Example running gnmic get command using the docker image: docker run \\ --network host \\ --rm ghcr.io/karimra/gnmic get --log --username admin --password admin --insecure --address router1.local --path /interfaces Docker Compose # gnmic docker-compose file example: version : '2' networks : gnmic-net : driver : bridge services : gnmic-1 : image : ghcr.io/karimra/gnmic:latest container_name : gnmic-1 networks : - gnmic-net volumes : - ./gnmic.yaml:/app/gnmic.yaml command : \"subscribe --config /app/gnmic.yaml\" See here for more deployment options","title":"Installation"},{"location":"install/#linuxmac-os","text":"To download & install the latest release the following automated installation script can be used: bash -c \" $( curl -sL https://get-gnmic.kmrd.dev ) \" As a result, the latest gnmic version will be installed in the /usr/local/bin directory and the version information will be printed out. Downloading gnmic_0.0.3_Darwin_x86_64.tar.gz... Moving gnmic to /usr/local/bin version : 0.0.3 commit : f541948 date : 2020-04-23T12:06:07Z gitURL : https://github.com/karimra/gnmic.git docs : https://gnmic.kmrd.dev Installation complete! To install a specific version of gnmic , provide the version with -v flag to the installation script: bash -c \" $( curl -sL https://get-gnmic.kmrd.dev ) \" -- -v 0 .5.0","title":"Linux/Mac OS"},{"location":"install/#packages","text":"Linux users running distributions with support for deb / rpm packages can install gnmic using pre-built packages: bash -c \"$(curl -sL https://get-gnmic.kmrd.dev)\" -- --use-pkg","title":"Packages"},{"location":"install/#upgrade","text":"To upgrade gnmic to the latest version use the upgrade command: # upgrade using binary file gnmic version upgrade # upgrade using package gnmic version upgrade --use-pkg","title":"Upgrade"},{"location":"install/#windows","text":"Windows users should use WSL on Windows and install the linux version of the tool.","title":"Windows"},{"location":"install/#docker","text":"The gnmic container image can be pulled from Dockerhub or GitHub container registries. The tag of the image corresponds to the release version and latest tag points to the latest available release: # pull latest release from dockerhub docker pull gnmic/gnmic:latest # pull a specific release from dockerhub docker pull gnmic/gnmic:0.7.0 # pull latest release from github registry docker pull ghcr.io/karimra/gnmic:latest # pull a specific release from github registry docker pull ghcr.io/karimra/gnmic:0.5.2 Example running gnmic get command using the docker image: docker run \\ --network host \\ --rm ghcr.io/karimra/gnmic get --log --username admin --password admin --insecure --address router1.local --path /interfaces","title":"Docker"},{"location":"install/#docker-compose","text":"gnmic docker-compose file example: version : '2' networks : gnmic-net : driver : bridge services : gnmic-1 : image : ghcr.io/karimra/gnmic:latest container_name : gnmic-1 networks : - gnmic-net volumes : - ./gnmic.yaml:/app/gnmic.yaml command : \"subscribe --config /app/gnmic.yaml\" See here for more deployment options","title":"Docker Compose"},{"location":"blog/","text":"Coming soon","title":"Blog"},{"location":"cmd/capabilities/","text":"Description # The [cap | capabilities] command represents the gNMI Capabilities RPC . It is used to send a Capability Request to the specified target(s) and expects one Capability Response per target. Capabilities allows the client to retrieve the set of capabilities that is supported by the target: gNMI version available data models supported encodings gNMI extensions This allows the client to, for example, validate the service version that is implemented and retrieve the set of models that the target supports. The models can then be specified in subsequent Get/Subscribe RPCs to precisely tell the target which models to use. Usage # gnmic [global-flags] capabilities [local-flags] Examples # single host # gnmic -a <ip:port> --username <user> --password <password> \\ --insecure capabilities gNMI_Version: 0.7.0 supported models: - nokia-conf, Nokia, 19.10.R2 - nokia-state, Nokia, 19.10.R2 - nokia-li-state, Nokia, 19.10.R2 - nokia-li-conf, Nokia, 19.10.R2 << SNIPPED >> supported encodings: - JSON - BYTES multiple hosts # gnmic -a <ip:port>,<ip:port> -u <user> -p <password> \\ --insecure cap","title":"Capabilities"},{"location":"cmd/capabilities/#description","text":"The [cap | capabilities] command represents the gNMI Capabilities RPC . It is used to send a Capability Request to the specified target(s) and expects one Capability Response per target. Capabilities allows the client to retrieve the set of capabilities that is supported by the target: gNMI version available data models supported encodings gNMI extensions This allows the client to, for example, validate the service version that is implemented and retrieve the set of models that the target supports. The models can then be specified in subsequent Get/Subscribe RPCs to precisely tell the target which models to use.","title":"Description"},{"location":"cmd/capabilities/#usage","text":"gnmic [global-flags] capabilities [local-flags]","title":"Usage"},{"location":"cmd/capabilities/#examples","text":"","title":"Examples"},{"location":"cmd/capabilities/#single-host","text":"gnmic -a <ip:port> --username <user> --password <password> \\ --insecure capabilities gNMI_Version: 0.7.0 supported models: - nokia-conf, Nokia, 19.10.R2 - nokia-state, Nokia, 19.10.R2 - nokia-li-state, Nokia, 19.10.R2 - nokia-li-conf, Nokia, 19.10.R2 << SNIPPED >> supported encodings: - JSON - BYTES","title":"single host"},{"location":"cmd/capabilities/#multiple-hosts","text":"gnmic -a <ip:port>,<ip:port> -u <user> -p <password> \\ --insecure cap","title":"multiple hosts"},{"location":"cmd/get/","text":"Description # The get command represents the gNMI Get RPC . It is used to send a GetRequest to the specified target(s) (using the global flag --address and expects one GetResponse per target, per path. The Get RPC is used to retrieve a snapshot of data from the target. It requests that the target snapshots a subset of the data tree as specified by the paths included in the message and serializes this to be returned to the client using the specified encoding. Usage # gnmic [global-flags] get [local-flags] Flags # prefix # As per path prefixes , the prefix [--prefix] flag represents a common prefix that is applied to all paths specified using the local --path flag. Defaults to \"\" . path # The mandatory path flag [--path] is used to specify the path(s) the client wants to receive a snapshot of. Multiple paths can be specified by using multiple --path flags: gnmic -a <ip:port> --insecure \\ get --path \"/state/ports[port-id=*]\" \\ --path \"/state/router[router-name=*]/interface[interface-name=*]\" If a user needs to provide origin information to the Path message, the following pattern should be used for the path string: \"origin:path\" : Note The path after the origin value has to start with a / gnmic -a <ip:port> --insecure \\ get --path \"openconfig-interfaces:/interfaces/interface\" model # The optional model flag [--model] is used to specify the schema definition modules that the target should use when returning a GetResponse. The model name should match the names returned in Capabilities RPC. Currently only single model name is supported. target # With the optional [--target] flag it is possible to supply the path target information in the prefix field of the GetRequest message. type # The type flag [--type] is used to specify the data type requested from the server. One of: ALL, CONFIG, STATE, OPERATIONAL (defaults to \"ALL\") Examples # # simple Get RPC gnmic -a <ip:port> get --path \"/state/port[port-id=*]\" # Get RPC with multiple paths gnmic -a <ip:port> get --path \"/state/port[port-id=*]\" \\ --path \"/state/router[router-name=*]/interface[interface-name=*]\" # Get RPC with path prefix gnmic -a <ip:port> get --prefix \"/state\" \\ --path \"port[port-id=*]\" \\ --path \"router[router-name=*]/interface[interface-name=*]\"","title":"Get"},{"location":"cmd/get/#description","text":"The get command represents the gNMI Get RPC . It is used to send a GetRequest to the specified target(s) (using the global flag --address and expects one GetResponse per target, per path. The Get RPC is used to retrieve a snapshot of data from the target. It requests that the target snapshots a subset of the data tree as specified by the paths included in the message and serializes this to be returned to the client using the specified encoding.","title":"Description"},{"location":"cmd/get/#usage","text":"gnmic [global-flags] get [local-flags]","title":"Usage"},{"location":"cmd/get/#flags","text":"","title":"Flags"},{"location":"cmd/get/#prefix","text":"As per path prefixes , the prefix [--prefix] flag represents a common prefix that is applied to all paths specified using the local --path flag. Defaults to \"\" .","title":"prefix"},{"location":"cmd/get/#path","text":"The mandatory path flag [--path] is used to specify the path(s) the client wants to receive a snapshot of. Multiple paths can be specified by using multiple --path flags: gnmic -a <ip:port> --insecure \\ get --path \"/state/ports[port-id=*]\" \\ --path \"/state/router[router-name=*]/interface[interface-name=*]\" If a user needs to provide origin information to the Path message, the following pattern should be used for the path string: \"origin:path\" : Note The path after the origin value has to start with a / gnmic -a <ip:port> --insecure \\ get --path \"openconfig-interfaces:/interfaces/interface\"","title":"path"},{"location":"cmd/get/#model","text":"The optional model flag [--model] is used to specify the schema definition modules that the target should use when returning a GetResponse. The model name should match the names returned in Capabilities RPC. Currently only single model name is supported.","title":"model"},{"location":"cmd/get/#target","text":"With the optional [--target] flag it is possible to supply the path target information in the prefix field of the GetRequest message.","title":"target"},{"location":"cmd/get/#type","text":"The type flag [--type] is used to specify the data type requested from the server. One of: ALL, CONFIG, STATE, OPERATIONAL (defaults to \"ALL\")","title":"type"},{"location":"cmd/get/#examples","text":"# simple Get RPC gnmic -a <ip:port> get --path \"/state/port[port-id=*]\" # Get RPC with multiple paths gnmic -a <ip:port> get --path \"/state/port[port-id=*]\" \\ --path \"/state/router[router-name=*]/interface[interface-name=*]\" # Get RPC with path prefix gnmic -a <ip:port> get --prefix \"/state\" \\ --path \"port[port-id=*]\" \\ --path \"router[router-name=*]/interface[interface-name=*]\"","title":"Examples"},{"location":"cmd/getset/","text":"Description # The getset command is a combination of the gNMI Get RPC and the gNMI Set RPC . It allows to conditionally execute a Set RPC based on a condition evaluated against a GetResponse . The condition written as a jq expression , is specified using the flag --condition . The SetRPC is executed only if the condition evaluates to true Usage # gnmic [global-flags] getset [local-flags] gnmic [global-flags] gas [local-flags] gnmic [global-flags] gs [local-flags] Flags # prefix # As per path prefixes , the prefix [--prefix] flag represents a common prefix that is applied to all paths specified using the local --get , --update , --replace and --delete flags. Defaults to \"\" . get # The mandatory get flag [--get] is used to specify the single path used in the Get RPC. model # The optional model flag [--model] is used to specify the schema definition modules that the target should use when returning a GetResponse. The model name should match the names returned in Capabilities RPC. Currently only single model name is supported. target # With the optional [--target] flag it is possible to supply the path target information in the prefix field of the GetRequest message. type # The type flag [--type] is used to specify the data type requested from the server. One of: ALL, CONFIG, STATE, OPERATIONAL (defaults to \"ALL\") condition # The [--condition] is a jq expression that can be used to determine if the Set Request is executed based on the Get Response values. update # The [--update] specifies a jq expression used to build the Set Request update path. replace # The [--replace] specifies a jq expression used to build the Set Request replace path. delete # The [--delete] specifies a jq expression used to build the Set Request delete path. value # The [--value] specifies a jq expression used to build the Set Request value. Examples # The command in the below example does the following: gets the list of interface indexes to interface name mapping, checks if the interface index (ifindex) 70 exists, if it does, the set request changes the interface state to enable using the interface name. gnmic getset -a <ip:port> \\ --get /interface/ifindex \\ --condition '.[] | .updates[].values[\"\"][\"srl_nokia-interfaces:interface\"][] | select(.ifindex==70) | (.name != \"\" or .name !=null)' \\ --update '.[] | .updates[].values[\"\"][\"srl_nokia-interfaces:interface\"][] | select(.ifindex==70) | \"interface[name=\" + .name + \"]/admin-state\"' \\ --value enable","title":"GetSet"},{"location":"cmd/getset/#description","text":"The getset command is a combination of the gNMI Get RPC and the gNMI Set RPC . It allows to conditionally execute a Set RPC based on a condition evaluated against a GetResponse . The condition written as a jq expression , is specified using the flag --condition . The SetRPC is executed only if the condition evaluates to true","title":"Description"},{"location":"cmd/getset/#usage","text":"gnmic [global-flags] getset [local-flags] gnmic [global-flags] gas [local-flags] gnmic [global-flags] gs [local-flags]","title":"Usage"},{"location":"cmd/getset/#flags","text":"","title":"Flags"},{"location":"cmd/getset/#prefix","text":"As per path prefixes , the prefix [--prefix] flag represents a common prefix that is applied to all paths specified using the local --get , --update , --replace and --delete flags. Defaults to \"\" .","title":"prefix"},{"location":"cmd/getset/#get","text":"The mandatory get flag [--get] is used to specify the single path used in the Get RPC.","title":"get"},{"location":"cmd/getset/#model","text":"The optional model flag [--model] is used to specify the schema definition modules that the target should use when returning a GetResponse. The model name should match the names returned in Capabilities RPC. Currently only single model name is supported.","title":"model"},{"location":"cmd/getset/#target","text":"With the optional [--target] flag it is possible to supply the path target information in the prefix field of the GetRequest message.","title":"target"},{"location":"cmd/getset/#type","text":"The type flag [--type] is used to specify the data type requested from the server. One of: ALL, CONFIG, STATE, OPERATIONAL (defaults to \"ALL\")","title":"type"},{"location":"cmd/getset/#condition","text":"The [--condition] is a jq expression that can be used to determine if the Set Request is executed based on the Get Response values.","title":"condition"},{"location":"cmd/getset/#update","text":"The [--update] specifies a jq expression used to build the Set Request update path.","title":"update"},{"location":"cmd/getset/#replace","text":"The [--replace] specifies a jq expression used to build the Set Request replace path.","title":"replace"},{"location":"cmd/getset/#delete","text":"The [--delete] specifies a jq expression used to build the Set Request delete path.","title":"delete"},{"location":"cmd/getset/#value","text":"The [--value] specifies a jq expression used to build the Set Request value.","title":"value"},{"location":"cmd/getset/#examples","text":"The command in the below example does the following: gets the list of interface indexes to interface name mapping, checks if the interface index (ifindex) 70 exists, if it does, the set request changes the interface state to enable using the interface name. gnmic getset -a <ip:port> \\ --get /interface/ifindex \\ --condition '.[] | .updates[].values[\"\"][\"srl_nokia-interfaces:interface\"][] | select(.ifindex==70) | (.name != \"\" or .name !=null)' \\ --update '.[] | .updates[].values[\"\"][\"srl_nokia-interfaces:interface\"][] | select(.ifindex==70) | \"interface[name=\" + .name + \"]/admin-state\"' \\ --value enable","title":"Examples"},{"location":"cmd/listen/","text":"Description # gnmic can be used in a \"dial-out telemetry\" mode by means of the listen command. In the dial-out mode: a network element is configured with the telemetry paths a network element initiates a connection towards the server/collector ( gnmic acts as a server in that case) Info Currently gnmic only implements the dial-out support for Nokia 1 SR OS 20.5.r1+ routers. Usage # gnmic listen [global flags] [local flags] Flags # address # The address flag [-a | --address] tells gnmic which address to bind an internal server to in an address:port format, e.g.: 0.0.0.0:57400 . tls-cert # Path to the TLS certificate can be supplied with --tls-cert flag. tls-key # Path to the private key can be supplied with --tls-key flag. max-concurrent-streams # To limit the maximum number of concurrent HTTP2 streams use the --max-concurrent-streams flag, the default value is 256. Examples # TLS disabled server # To start gnmic as a server listening on all interfaces without TLS support is as simple as: gnmic listen -a 0.0.0.0:57400 SR OS configuration for non TLS dialout connections /configure system telemetry destination-group \"dialout\" allow-unsecure-connection /configure system telemetry destination-group \"dialout\" destination 10.2.0.99 port 57400 router-instance \"management\" /configure system telemetry persistent-subscriptions { } /configure system telemetry persistent-subscriptions subscription \"dialout\" admin-state enable /configure system telemetry persistent-subscriptions subscription \"dialout\" sensor-group \"port_stats\" /configure system telemetry persistent-subscriptions subscription \"dialout\" mode sample /configure system telemetry persistent-subscriptions subscription \"dialout\" sample-interval 1000 /configure system telemetry persistent-subscriptions subscription \"dialout\" destination-group \"dialout\" /configure system telemetry persistent-subscriptions subscription \"dialout\" encoding bytes /configure system telemetry sensor-groups { } /configure system telemetry sensor-groups { sensor-group \"port_stats\" } /configure system telemetry sensor-groups { sensor-group \"port_stats\" path \"/state/port[port-id=1/1/c1/1]/statistics/in-octets\" } TLS enabled server # By using tls-cert and tls-key flags it is possible to run gnmic with TLS. gnmic listen -a 0.0.0.0:57400 --tls-cert gnmic.pem --tls-key gnmic-key.pem SR OS configuration for a TLS enabled dialout connections The configuration below does not utilise router-side certificates and uses the certificate provided by the server (gnmic). The router will also not verify the certificate. /configure system telemetry destination-group \"dialout\" tls-client-profile \"client-tls\" /configure system telemetry destination-group \"dialout\" destination 10.2.0.99 port 57400 router-instance \"management\" /configure system telemetry persistent-subscriptions { } /configure system telemetry persistent-subscriptions subscription \"dialout\" admin-state enable /configure system telemetry persistent-subscriptions subscription \"dialout\" sensor-group \"port_stats\" /configure system telemetry persistent-subscriptions subscription \"dialout\" mode sample /configure system telemetry persistent-subscriptions subscription \"dialout\" sample-interval 1000 /configure system telemetry persistent-subscriptions subscription \"dialout\" destination-group \"dialout\" /configure system telemetry persistent-subscriptions subscription \"dialout\" encoding bytes /configure system telemetry sensor-groups { } /configure system telemetry sensor-groups { sensor-group \"port_stats\" } /configure system telemetry sensor-groups { sensor-group \"port_stats\" path \"/state/port[port-id=1/1/c1/1]/statistics/in-octets\" } /configure system security tls client-cipher-list \"client-ciphers\" { } /configure system security tls client-cipher-list \"client-ciphers\" cipher 1 name tls-rsa-with-aes128-cbc-sha /configure system security tls client-cipher-list \"client-ciphers\" cipher 2 name tls-rsa-with-aes128-cbc-sha256 /configure system security tls client-cipher-list \"client-ciphers\" cipher 3 name tls-rsa-with-aes256-cbc-sha /configure system security tls client-cipher-list \"client-ciphers\" cipher 4 name tls-rsa-with-aes256-cbc-sha256 /configure system security tls client-tls-profile \"client-tls\" admin-state enable /configure system security tls client-tls-profile \"client-tls\" cipher-list \"client-ciphers\" Nokia dial-out proto definition can be found in karimra/sros-dialout \u21a9","title":"Listen"},{"location":"cmd/listen/#description","text":"gnmic can be used in a \"dial-out telemetry\" mode by means of the listen command. In the dial-out mode: a network element is configured with the telemetry paths a network element initiates a connection towards the server/collector ( gnmic acts as a server in that case) Info Currently gnmic only implements the dial-out support for Nokia 1 SR OS 20.5.r1+ routers.","title":"Description"},{"location":"cmd/listen/#usage","text":"gnmic listen [global flags] [local flags]","title":"Usage"},{"location":"cmd/listen/#flags","text":"","title":"Flags"},{"location":"cmd/listen/#address","text":"The address flag [-a | --address] tells gnmic which address to bind an internal server to in an address:port format, e.g.: 0.0.0.0:57400 .","title":"address"},{"location":"cmd/listen/#tls-cert","text":"Path to the TLS certificate can be supplied with --tls-cert flag.","title":"tls-cert"},{"location":"cmd/listen/#tls-key","text":"Path to the private key can be supplied with --tls-key flag.","title":"tls-key"},{"location":"cmd/listen/#max-concurrent-streams","text":"To limit the maximum number of concurrent HTTP2 streams use the --max-concurrent-streams flag, the default value is 256.","title":"max-concurrent-streams"},{"location":"cmd/listen/#examples","text":"","title":"Examples"},{"location":"cmd/listen/#tls-disabled-server","text":"To start gnmic as a server listening on all interfaces without TLS support is as simple as: gnmic listen -a 0.0.0.0:57400 SR OS configuration for non TLS dialout connections /configure system telemetry destination-group \"dialout\" allow-unsecure-connection /configure system telemetry destination-group \"dialout\" destination 10.2.0.99 port 57400 router-instance \"management\" /configure system telemetry persistent-subscriptions { } /configure system telemetry persistent-subscriptions subscription \"dialout\" admin-state enable /configure system telemetry persistent-subscriptions subscription \"dialout\" sensor-group \"port_stats\" /configure system telemetry persistent-subscriptions subscription \"dialout\" mode sample /configure system telemetry persistent-subscriptions subscription \"dialout\" sample-interval 1000 /configure system telemetry persistent-subscriptions subscription \"dialout\" destination-group \"dialout\" /configure system telemetry persistent-subscriptions subscription \"dialout\" encoding bytes /configure system telemetry sensor-groups { } /configure system telemetry sensor-groups { sensor-group \"port_stats\" } /configure system telemetry sensor-groups { sensor-group \"port_stats\" path \"/state/port[port-id=1/1/c1/1]/statistics/in-octets\" }","title":"TLS disabled server"},{"location":"cmd/listen/#tls-enabled-server","text":"By using tls-cert and tls-key flags it is possible to run gnmic with TLS. gnmic listen -a 0.0.0.0:57400 --tls-cert gnmic.pem --tls-key gnmic-key.pem SR OS configuration for a TLS enabled dialout connections The configuration below does not utilise router-side certificates and uses the certificate provided by the server (gnmic). The router will also not verify the certificate. /configure system telemetry destination-group \"dialout\" tls-client-profile \"client-tls\" /configure system telemetry destination-group \"dialout\" destination 10.2.0.99 port 57400 router-instance \"management\" /configure system telemetry persistent-subscriptions { } /configure system telemetry persistent-subscriptions subscription \"dialout\" admin-state enable /configure system telemetry persistent-subscriptions subscription \"dialout\" sensor-group \"port_stats\" /configure system telemetry persistent-subscriptions subscription \"dialout\" mode sample /configure system telemetry persistent-subscriptions subscription \"dialout\" sample-interval 1000 /configure system telemetry persistent-subscriptions subscription \"dialout\" destination-group \"dialout\" /configure system telemetry persistent-subscriptions subscription \"dialout\" encoding bytes /configure system telemetry sensor-groups { } /configure system telemetry sensor-groups { sensor-group \"port_stats\" } /configure system telemetry sensor-groups { sensor-group \"port_stats\" path \"/state/port[port-id=1/1/c1/1]/statistics/in-octets\" } /configure system security tls client-cipher-list \"client-ciphers\" { } /configure system security tls client-cipher-list \"client-ciphers\" cipher 1 name tls-rsa-with-aes128-cbc-sha /configure system security tls client-cipher-list \"client-ciphers\" cipher 2 name tls-rsa-with-aes128-cbc-sha256 /configure system security tls client-cipher-list \"client-ciphers\" cipher 3 name tls-rsa-with-aes256-cbc-sha /configure system security tls client-cipher-list \"client-ciphers\" cipher 4 name tls-rsa-with-aes256-cbc-sha256 /configure system security tls client-tls-profile \"client-tls\" admin-state enable /configure system security tls client-tls-profile \"client-tls\" cipher-list \"client-ciphers\" Nokia dial-out proto definition can be found in karimra/sros-dialout \u21a9","title":"TLS enabled server"},{"location":"cmd/path/","text":"Description # With path command it is possible to generate and search through the XPATH style paths extracted from a YANG file. Warning Experimental feature. Only supports Nokia conf and state models in combined variant 1 . By extracting the XPATH styled paths from a YANG model it is made possible to utilize CLI search tools like awk , sed and alike to find the paths satisfying specific matching rules. The embedded search capability allows to perform a quick and simple search through the model's paths using simple inclusion/exclusion operators. Flags # file # With the mandatory --file flag user specifies the path to a YANG file to extract paths from. module # The [-m | --module] flag specifies the module name that is contained in the referenced YANG file. Defaults to nokia-state ; to extract configuration paths the nokia-conf module name should be provided. types # When --types flag is present the extracted paths will also have a corresponding type printed out. path-type # The --path-type flag governs which style is used to display the path information. The default value is xpath which will produce the XPATH compatible paths. The other option is gnmi which will result in the paths to be formatted using the gNMI Path Conventions. XPATH /state/sfm[sfm-slot=*]/hardware-data/firmware-revision-status gNMI elem:{name:\"state\"} elem:{name:\"sfm\" key:{key:\"sfm-slot\" value:\"*\"}} elem:{name:\"hardware-data\"} elem:{name:\"firmware-revision-status\"} search # With the --search flag present an interactive CLI search dialog is displayed that allows to navigate through the paths list and perform a search. \u276f gnmic path --file _test/nokia-state-combined.yang --search Use the arrow keys to navigate: \u2193 \u2191 \u2192 \u2190 and : toggles search ? select path: /state/aaa/radius/statistics/coa/dropped/bad-authentication /state/aaa/radius/statistics/coa/dropped/missing-auth-policy \u25b8 /state/aaa/radius/statistics/coa/dropped/invalid /state/aaa/radius/statistics/coa/dropped/missing-resource /state/aaa/radius/statistics/coa/received /state/aaa/radius/statistics/coa/accepted /state/aaa/radius/statistics/coa/rejected /state/aaa/radius/statistics/disconnect-messages/dropped/bad-authentication /state/aaa/radius/statistics/disconnect-messages/dropped/missing-auth-policy \u2193 /state/aaa/radius/statistics/disconnect-messages/dropped/invalid Examples # # output to stdout the XPATH styled paths # from the nokia-state module of nokia-state-combined.yang file gnmic path --file nokia-state-combined.yang # from the nokia-conf module gnmic path -m nokia-conf --file nokia-conf-combined.yang # with the gNMI styled paths gnmic path --file nokia-state-combined.yang --path-type gnmi # with path types gnmic path --file nokia-state-combined.yang --types # entering the interactive navigation prompt gnmic path --file nokia-state-combined.yang --search Nokia combined models can be found in nokia/7x50_YangModels repo. \u21a9","title":"Path"},{"location":"cmd/path/#description","text":"With path command it is possible to generate and search through the XPATH style paths extracted from a YANG file. Warning Experimental feature. Only supports Nokia conf and state models in combined variant 1 . By extracting the XPATH styled paths from a YANG model it is made possible to utilize CLI search tools like awk , sed and alike to find the paths satisfying specific matching rules. The embedded search capability allows to perform a quick and simple search through the model's paths using simple inclusion/exclusion operators.","title":"Description"},{"location":"cmd/path/#flags","text":"","title":"Flags"},{"location":"cmd/path/#file","text":"With the mandatory --file flag user specifies the path to a YANG file to extract paths from.","title":"file"},{"location":"cmd/path/#module","text":"The [-m | --module] flag specifies the module name that is contained in the referenced YANG file. Defaults to nokia-state ; to extract configuration paths the nokia-conf module name should be provided.","title":"module"},{"location":"cmd/path/#types","text":"When --types flag is present the extracted paths will also have a corresponding type printed out.","title":"types"},{"location":"cmd/path/#path-type","text":"The --path-type flag governs which style is used to display the path information. The default value is xpath which will produce the XPATH compatible paths. The other option is gnmi which will result in the paths to be formatted using the gNMI Path Conventions. XPATH /state/sfm[sfm-slot=*]/hardware-data/firmware-revision-status gNMI elem:{name:\"state\"} elem:{name:\"sfm\" key:{key:\"sfm-slot\" value:\"*\"}} elem:{name:\"hardware-data\"} elem:{name:\"firmware-revision-status\"}","title":"path-type"},{"location":"cmd/path/#search","text":"With the --search flag present an interactive CLI search dialog is displayed that allows to navigate through the paths list and perform a search. \u276f gnmic path --file _test/nokia-state-combined.yang --search Use the arrow keys to navigate: \u2193 \u2191 \u2192 \u2190 and : toggles search ? select path: /state/aaa/radius/statistics/coa/dropped/bad-authentication /state/aaa/radius/statistics/coa/dropped/missing-auth-policy \u25b8 /state/aaa/radius/statistics/coa/dropped/invalid /state/aaa/radius/statistics/coa/dropped/missing-resource /state/aaa/radius/statistics/coa/received /state/aaa/radius/statistics/coa/accepted /state/aaa/radius/statistics/coa/rejected /state/aaa/radius/statistics/disconnect-messages/dropped/bad-authentication /state/aaa/radius/statistics/disconnect-messages/dropped/missing-auth-policy \u2193 /state/aaa/radius/statistics/disconnect-messages/dropped/invalid","title":"search"},{"location":"cmd/path/#examples","text":"# output to stdout the XPATH styled paths # from the nokia-state module of nokia-state-combined.yang file gnmic path --file nokia-state-combined.yang # from the nokia-conf module gnmic path -m nokia-conf --file nokia-conf-combined.yang # with the gNMI styled paths gnmic path --file nokia-state-combined.yang --path-type gnmi # with path types gnmic path --file nokia-state-combined.yang --types # entering the interactive navigation prompt gnmic path --file nokia-state-combined.yang --search Nokia combined models can be found in nokia/7x50_YangModels repo. \u21a9","title":"Examples"},{"location":"cmd/prompt/","text":"Description # The prompt command starts gnmic in an interactive prompt mode with the following auto-completion features: All gnmic commands names and their flags are suggested . Values for the flags that rely on YANG-defined data (like --path , --prefix , --model ,...) will be dynamically suggested, we call this feature YANG-completions . The auto-completions are generated from the YANG modules d with the --file and --dir flags. Flags with the fixed set of values ( --format , --encoding , ...) will get their values suggested . Flags that require a file path value will auto-suggest the available files as the user types. Usage # gnmic [global-flags] prompt [local-flags] Flags # file # A path to a YANG file or a directory with YANG files which gnmic will use to generate auto-completion for YANG-defined data (paths, models). Multiple --file flags can be supplied. dir # A path to a directory which gnmic would recursively traverse in search for the additional YANG files which may be required by YANG files specified with --file to build the YANG tree. Can also point to a single YANG file instead of a directory. Multiple --dir flags can be supplied. description-with-prefix # When set, the description of the path elements in the suggestion box will contain module's prefix. description-with-types # When set, the description of the path elements in the suggestion box will contain element's type information. exclude # The --exclude flag specifies the YANG module names to be excluded from the path generation when YANG modules names are clashed. Multiple --exclude flags can be supplied. max-suggestions # The --max-suggestions flag sets the number of lines that the suggestion box will display without scrolling. Defaults to 10. Note, the terminal height might limit the number of lines in the suggestions box. suggest-all-flags # The --suggest-all-flags makes gnmic prompt suggest both global and local flags for a sub-command. The default behavior (when this flag is not set) is to suggest only local flags for any typed sub-command. suggest-with-origin # The --suggest-with-origin flag prepends the suggested path with the module name to which this path belongs. The path becomes rendered as <module_name>:/<suggested-container> . The module name will be used as the origin of the gNMI path. suggestions-bg-color # The --suggestions-bg-color flag sets the background color of the left part of the suggestion box. Defaults to dark blue. description-bg-color # The --description-bg-color flag sets the background color of the right part of the suggestion box. Defaults to dark gray. prefix-color # The --prefix-color flag sets the gnmic prompt prefix color gnmic> . Defaults to dark blue. Examples # The detailed explanation of the prompt command the the YANG-completions is provided on the Prompt mode and auto-suggestions page.","title":"Prompt"},{"location":"cmd/prompt/#description","text":"The prompt command starts gnmic in an interactive prompt mode with the following auto-completion features: All gnmic commands names and their flags are suggested . Values for the flags that rely on YANG-defined data (like --path , --prefix , --model ,...) will be dynamically suggested, we call this feature YANG-completions . The auto-completions are generated from the YANG modules d with the --file and --dir flags. Flags with the fixed set of values ( --format , --encoding , ...) will get their values suggested . Flags that require a file path value will auto-suggest the available files as the user types.","title":"Description"},{"location":"cmd/prompt/#usage","text":"gnmic [global-flags] prompt [local-flags]","title":"Usage"},{"location":"cmd/prompt/#flags","text":"","title":"Flags"},{"location":"cmd/prompt/#file","text":"A path to a YANG file or a directory with YANG files which gnmic will use to generate auto-completion for YANG-defined data (paths, models). Multiple --file flags can be supplied.","title":"file"},{"location":"cmd/prompt/#dir","text":"A path to a directory which gnmic would recursively traverse in search for the additional YANG files which may be required by YANG files specified with --file to build the YANG tree. Can also point to a single YANG file instead of a directory. Multiple --dir flags can be supplied.","title":"dir"},{"location":"cmd/prompt/#description-with-prefix","text":"When set, the description of the path elements in the suggestion box will contain module's prefix.","title":"description-with-prefix"},{"location":"cmd/prompt/#description-with-types","text":"When set, the description of the path elements in the suggestion box will contain element's type information.","title":"description-with-types"},{"location":"cmd/prompt/#exclude","text":"The --exclude flag specifies the YANG module names to be excluded from the path generation when YANG modules names are clashed. Multiple --exclude flags can be supplied.","title":"exclude"},{"location":"cmd/prompt/#max-suggestions","text":"The --max-suggestions flag sets the number of lines that the suggestion box will display without scrolling. Defaults to 10. Note, the terminal height might limit the number of lines in the suggestions box.","title":"max-suggestions"},{"location":"cmd/prompt/#suggest-all-flags","text":"The --suggest-all-flags makes gnmic prompt suggest both global and local flags for a sub-command. The default behavior (when this flag is not set) is to suggest only local flags for any typed sub-command.","title":"suggest-all-flags"},{"location":"cmd/prompt/#suggest-with-origin","text":"The --suggest-with-origin flag prepends the suggested path with the module name to which this path belongs. The path becomes rendered as <module_name>:/<suggested-container> . The module name will be used as the origin of the gNMI path.","title":"suggest-with-origin"},{"location":"cmd/prompt/#suggestions-bg-color","text":"The --suggestions-bg-color flag sets the background color of the left part of the suggestion box. Defaults to dark blue.","title":"suggestions-bg-color"},{"location":"cmd/prompt/#description-bg-color","text":"The --description-bg-color flag sets the background color of the right part of the suggestion box. Defaults to dark gray.","title":"description-bg-color"},{"location":"cmd/prompt/#prefix-color","text":"The --prefix-color flag sets the gnmic prompt prefix color gnmic> . Defaults to dark blue.","title":"prefix-color"},{"location":"cmd/prompt/#examples","text":"The detailed explanation of the prompt command the the YANG-completions is provided on the Prompt mode and auto-suggestions page.","title":"Examples"},{"location":"cmd/set/","text":"Description # The set command represents the gNMI Set RPC . It is used to send a Set Request to the specified target(s) and expects one Set Response per target. Set RPC allows the client to modify the state of data on the target. The data specified referenced by a path can be updated, replaced or deleted . Usage # gnmic [global-flags] set [local-flags] The Set Request can be any of (or a combination of) update, replace or/and delete operations. Common flags # prefix # The --prefix flag sets a common prefix to all paths specified using the local --path flag. Defaults to \"\" . If a user needs to provide origin information to the Path message, the following pattern should be used for the path string: \"origin:path\" : Note The path after the origin value has to start with a / gnmic set --update \"openconfig-interfaces:/interfaces/interface:::<type>:::<value>\" target # With the optional [--target] flag it is possible to supply the path target information in the prefix field of the SetRequest message. Update # There are several ways to perform an update operation with gNMI Set RPC: 1. in-line update, implicit type # Using both --update-path and --update-value flags, a user can update a value for a given path. gnmic set --update-path /configure/system/name --update-value router1 gnmic set --update-path /configure/router [ router-name = Base ] /interface [ interface-name = system ] /admin-state \\ --update-value enable The above 2 updates can be combined in the same cli command: gnmic set --update-path /configure/system/name \\ --update-value router1 \\ --update-path /configure/router [ router-name = Base ] /interface [ interface-name = system ] /admin-state \\ --update-value enable 2. in-line update, explicit type # Using the update flag --update , one can specify the path, value type and value in a single parameter using a delimiter --delimiter . Delimiter string defaults to \":::\" . Supported types: json, json_ietf, string, int, uint, bool, decimal, float, bytes, ascii. # path:::value-type:::value gnmic set --update /configure/system/name:::json:::router1 gnmic set --update /configure/router [ router-name = Base ] /interface [ interface-name = system ] /admin-state:::json:::enable gnmic set --update /configure/router [ router-name = Base ] /interface [ interface-name = system ] :::json::: '{\"admin-state\":\"enable\"}' 3. update with a value from JSON or YAML file # It is also possible to specify the values from a local JSON or YAML file using --update-file flag for the value and --update-path for the path. In which case the value encoding will be determined by the global flag [ -e | --encoding ] , both JSON and JSON_IETF are supported The file's format is identified by its extension, json: .json and yaml .yaml or .yml . interface.json { \"admin-state\" : \"enable\" , \"ipv4\" : { \"primary\" : { \"address\" : \"1.1.1.1\" , \"prefix-length\" : 32 } } } gnmic set --update-path /configure/router [ router-name = Base ] /interface [ interface-name = system ] \\ --update-file interface.json interface.yml \"admin-state\" : enable \"ipv4\" : \"primary\" : \"address\" : 1 .1.1.1 \"prefix-length\" : 32 gnmic set --update-path /configure/router [ router-name = Base ] /interface [ interface-name = system ] \\ --update-file interface.yml Replace # There are 3 main ways to specify a replace operation: 1. in-line replace, implicit type # Using both --replace-path and --replace-value flags, a user can replace a value for a given path. The type of the value is implicitly set to JSON : gnmic set --replace-path /configure/system/name --replace-value router1 gnmic set --replace-path /configure/router [ router-name = Base ] /interface [ interface-name = system ] /admin-state \\ --replace-value enable The above 2 commands can be packed in the same cli command: gnmic set --replace-path /configure/system/name \\ --replace-value router1 \\ --replace-path /configure/router [ router-name = Base ] /interface [ interface-name = system ] /admin-state \\ --replace-value enable 2. in-line replace, explicit type # Using the replace flag --replace , you can specify the path, value type and value in a single parameter using a delimiter --delimiter . Delimiter string defaults to \":::\" . Supported types: json, json_ietf, string, int, uint, bool, decimal, float, bytes, ascii. gnmic set --replace /configure/system/name:::json:::router1 gnmic set --replace /configure/router [ router-name = Base ] /interface [ interface-name = system ] /admin-state:::json:::enable 3. replace with a value from JSON or YAML file # It is also possible to specify the values from a local JSON or YAML file using flag --replace-file for the value and --replace-path for the path. In which case the value encoding will be determined by the global flag [ -e | --encoding ] , both JSON and JSON_IETF are supported The file is identified by its extension, json: .json and yaml .yaml or .yml . interface.json { \"admin-state\" : \"enable\" , \"ipv4\" : { \"primary\" : { \"address\" : \"1.1.1.1\" , \"prefix-length\" : 32 } } } interface.yml \"admin-state\" : enable \"ipv4\" : \"primary\" : \"address\" : 1 .1.1.1 \"prefix-length\" : 32 Then refer to the file with --replace-file flag gnmic set --replace-path /configure/router [ router-name = Base ] /interface [ interface-name = system ] \\ --replace-file interface.json Delete # A deletion operation within the Set RPC is specified using the delete flag --delete . It takes an XPATH pointing to the config node to be deleted: gnmic set --delete \"/configure/router[router-name=Base]/interface[interface-name=dummy_interface]\" Examples # 1. update # in-line value # gnmic -a <ip:port> set --update-path /configure/system/name \\ --update-value <system_name> value from JSON file # cat jsonFile.json { \"name\" : \"router1\" } gnmic -a <ip:port> set --update-path /configure/system \\ --update-file <jsonFile.json> echo '{\"name\": \"router1\"}' | gnmic -a <ip:port> set \\ --update-path /configure/system \\ --update-file - specify value type # gnmic -a <ip:port> set --update /configure/system/name:::json:::router1 gnmic -a <ip:port> set --update /configure/system/name@json@router1 \\ --delimiter @ 2. replace # cat interface.json { \"address\" : \"1.1.1.1\" , \"prefix-length\" : 32 } gnmic -a <ip:port> --insecure \\ set --replace-path /configure/router [ router-name = Base ] /interface [ interface-name = interface1 ] /ipv4/primary \\ --replace-file interface.json echo '{\"address\": \"1.1.1.1\", \"prefix-length\": 32}' | gnmic -a <ip:port> --insecure \\ set --replace-path /configure/router [ router-name = Base ] /interface [ interface-name = interface1 ] /ipv4/primary \\ --replace-file - 3. delete # gnmic -a <ip:port> --insecure set --delete /configure/router [ router-name = Base ] /interface [ interface-name = interface1 ]","title":"Set"},{"location":"cmd/set/#description","text":"The set command represents the gNMI Set RPC . It is used to send a Set Request to the specified target(s) and expects one Set Response per target. Set RPC allows the client to modify the state of data on the target. The data specified referenced by a path can be updated, replaced or deleted .","title":"Description"},{"location":"cmd/set/#usage","text":"gnmic [global-flags] set [local-flags] The Set Request can be any of (or a combination of) update, replace or/and delete operations.","title":"Usage"},{"location":"cmd/set/#common-flags","text":"","title":"Common flags"},{"location":"cmd/set/#prefix","text":"The --prefix flag sets a common prefix to all paths specified using the local --path flag. Defaults to \"\" . If a user needs to provide origin information to the Path message, the following pattern should be used for the path string: \"origin:path\" : Note The path after the origin value has to start with a / gnmic set --update \"openconfig-interfaces:/interfaces/interface:::<type>:::<value>\"","title":"prefix"},{"location":"cmd/set/#target","text":"With the optional [--target] flag it is possible to supply the path target information in the prefix field of the SetRequest message.","title":"target"},{"location":"cmd/set/#update","text":"There are several ways to perform an update operation with gNMI Set RPC:","title":"Update"},{"location":"cmd/set/#1-in-line-update-implicit-type","text":"Using both --update-path and --update-value flags, a user can update a value for a given path. gnmic set --update-path /configure/system/name --update-value router1 gnmic set --update-path /configure/router [ router-name = Base ] /interface [ interface-name = system ] /admin-state \\ --update-value enable The above 2 updates can be combined in the same cli command: gnmic set --update-path /configure/system/name \\ --update-value router1 \\ --update-path /configure/router [ router-name = Base ] /interface [ interface-name = system ] /admin-state \\ --update-value enable","title":"1. in-line update, implicit type"},{"location":"cmd/set/#2-in-line-update-explicit-type","text":"Using the update flag --update , one can specify the path, value type and value in a single parameter using a delimiter --delimiter . Delimiter string defaults to \":::\" . Supported types: json, json_ietf, string, int, uint, bool, decimal, float, bytes, ascii. # path:::value-type:::value gnmic set --update /configure/system/name:::json:::router1 gnmic set --update /configure/router [ router-name = Base ] /interface [ interface-name = system ] /admin-state:::json:::enable gnmic set --update /configure/router [ router-name = Base ] /interface [ interface-name = system ] :::json::: '{\"admin-state\":\"enable\"}'","title":"2. in-line update, explicit type"},{"location":"cmd/set/#3-update-with-a-value-from-json-or-yaml-file","text":"It is also possible to specify the values from a local JSON or YAML file using --update-file flag for the value and --update-path for the path. In which case the value encoding will be determined by the global flag [ -e | --encoding ] , both JSON and JSON_IETF are supported The file's format is identified by its extension, json: .json and yaml .yaml or .yml . interface.json { \"admin-state\" : \"enable\" , \"ipv4\" : { \"primary\" : { \"address\" : \"1.1.1.1\" , \"prefix-length\" : 32 } } } gnmic set --update-path /configure/router [ router-name = Base ] /interface [ interface-name = system ] \\ --update-file interface.json interface.yml \"admin-state\" : enable \"ipv4\" : \"primary\" : \"address\" : 1 .1.1.1 \"prefix-length\" : 32 gnmic set --update-path /configure/router [ router-name = Base ] /interface [ interface-name = system ] \\ --update-file interface.yml","title":"3. update with a value from JSON or YAML file"},{"location":"cmd/set/#replace","text":"There are 3 main ways to specify a replace operation:","title":"Replace"},{"location":"cmd/set/#1-in-line-replace-implicit-type","text":"Using both --replace-path and --replace-value flags, a user can replace a value for a given path. The type of the value is implicitly set to JSON : gnmic set --replace-path /configure/system/name --replace-value router1 gnmic set --replace-path /configure/router [ router-name = Base ] /interface [ interface-name = system ] /admin-state \\ --replace-value enable The above 2 commands can be packed in the same cli command: gnmic set --replace-path /configure/system/name \\ --replace-value router1 \\ --replace-path /configure/router [ router-name = Base ] /interface [ interface-name = system ] /admin-state \\ --replace-value enable","title":"1. in-line replace, implicit type"},{"location":"cmd/set/#2-in-line-replace-explicit-type","text":"Using the replace flag --replace , you can specify the path, value type and value in a single parameter using a delimiter --delimiter . Delimiter string defaults to \":::\" . Supported types: json, json_ietf, string, int, uint, bool, decimal, float, bytes, ascii. gnmic set --replace /configure/system/name:::json:::router1 gnmic set --replace /configure/router [ router-name = Base ] /interface [ interface-name = system ] /admin-state:::json:::enable","title":"2. in-line replace, explicit type"},{"location":"cmd/set/#3-replace-with-a-value-from-json-or-yaml-file","text":"It is also possible to specify the values from a local JSON or YAML file using flag --replace-file for the value and --replace-path for the path. In which case the value encoding will be determined by the global flag [ -e | --encoding ] , both JSON and JSON_IETF are supported The file is identified by its extension, json: .json and yaml .yaml or .yml . interface.json { \"admin-state\" : \"enable\" , \"ipv4\" : { \"primary\" : { \"address\" : \"1.1.1.1\" , \"prefix-length\" : 32 } } } interface.yml \"admin-state\" : enable \"ipv4\" : \"primary\" : \"address\" : 1 .1.1.1 \"prefix-length\" : 32 Then refer to the file with --replace-file flag gnmic set --replace-path /configure/router [ router-name = Base ] /interface [ interface-name = system ] \\ --replace-file interface.json","title":"3. replace with a value from JSON or YAML file"},{"location":"cmd/set/#delete","text":"A deletion operation within the Set RPC is specified using the delete flag --delete . It takes an XPATH pointing to the config node to be deleted: gnmic set --delete \"/configure/router[router-name=Base]/interface[interface-name=dummy_interface]\"","title":"Delete"},{"location":"cmd/set/#examples","text":"","title":"Examples"},{"location":"cmd/set/#1-update","text":"","title":"1. update"},{"location":"cmd/set/#in-line-value","text":"gnmic -a <ip:port> set --update-path /configure/system/name \\ --update-value <system_name>","title":"in-line value"},{"location":"cmd/set/#value-from-json-file","text":"cat jsonFile.json { \"name\" : \"router1\" } gnmic -a <ip:port> set --update-path /configure/system \\ --update-file <jsonFile.json> echo '{\"name\": \"router1\"}' | gnmic -a <ip:port> set \\ --update-path /configure/system \\ --update-file -","title":"value from JSON file"},{"location":"cmd/set/#specify-value-type","text":"gnmic -a <ip:port> set --update /configure/system/name:::json:::router1 gnmic -a <ip:port> set --update /configure/system/name@json@router1 \\ --delimiter @","title":"specify value type"},{"location":"cmd/set/#2-replace","text":"cat interface.json { \"address\" : \"1.1.1.1\" , \"prefix-length\" : 32 } gnmic -a <ip:port> --insecure \\ set --replace-path /configure/router [ router-name = Base ] /interface [ interface-name = interface1 ] /ipv4/primary \\ --replace-file interface.json echo '{\"address\": \"1.1.1.1\", \"prefix-length\": 32}' | gnmic -a <ip:port> --insecure \\ set --replace-path /configure/router [ router-name = Base ] /interface [ interface-name = interface1 ] /ipv4/primary \\ --replace-file -","title":"2. replace"},{"location":"cmd/set/#3-delete","text":"gnmic -a <ip:port> --insecure set --delete /configure/router [ router-name = Base ] /interface [ interface-name = interface1 ]","title":"3. delete"},{"location":"cmd/subscribe/","text":"Description # The [subscribe | sub] command represents the gNMI Subscribe RPC . It is used to send a Subscribe Request to the specified target(s) and expects one or multiple Subscribe Response Usage # gnmic [global-flags] subscribe [local-flags] Local Flags # The subscribe command supports the following local flags: prefix # The [--prefix] flag sets a common prefix to all paths specified using the local --path flag. Defaults to \"\" . path # The path flag [--path] is used to specify the path(s) to which the client wants to subscribe. Multiple paths can be specified by using repeated --path flags: gnmic sub --path \"/state/ports[port-id=*]\" \\ --path \"/state/router[router-name=*]/interface[interface-name=*]\" If a user needs to provide origin information to the Path message, the following pattern should be used for the path string: \"origin:path\" : Note The path after the origin value has to start with a / gnmic sub --path \"openconfig-interfaces:/interfaces/interface\" target # With the optional [--target] flag it is possible to supply the path target information in the prefix field of the SubscriptionList message. model # The [--model] flag is used to specify the schema definition modules that the target should use when extracting the data to stream back. qos # The [--qos] flag specifies the packet marking that is to be used for the responses to the subscription request. Default marking is set to 20 . If qos marking is not supported by a target the marking can be disabled by setting the value to 0 . mode # The [--mode] mode flag specifies the mode of subscription to be created. This may be one of: ONCE , STREAM or POLL . It is case insensitive and defaults to STREAM . stream subscription mode # The [--stream-mode] flag is used to specify the stream subscription mode. This may be one of: ON_CHANGE, SAMPLE or TARGET_DEFINED This flag applies only if --mode is set to STREAM . It is case insensitive and defaults to SAMPLE . sample interval # The [--sample-interval] flag is used to specify the sample interval to be used by the target to send samples to the client. This flag applies only in case --mode is set to STREAM and --stream-mode is set to SAMPLE . Valid formats: 1s, 1m30s, 1h . Defaults to 0s which is the lowest interval supported by a target. heartbeat interval # The [--heartbeat-interval] flag is used to specify the server heartbeat interval. The heartbeat interval value can be specified along with ON_CHANGE or SAMPLE stream subscriptions modes. ON_CHANGE : The value of the data item(s) MUST be re-sent once per heartbeat interval regardless of whether the value has changed or not. SAMPLE : The target MUST generate one telemetry update per heartbeat interval, regardless of whether the --suppress-redundant flag is set to true. quiet # With [--quiet] flag set gnmic will not output subscription responses to stdout . The --quiet flag is useful when gnmic exports the received data to one of the export providers. suppress redundant # When the [--suppress-redundant] flag is set to true, the target SHOULD NOT generate a telemetry update message unless the value of the path being reported on has changed since the last update was generated. This flag applies only in case --mode is set to STREAM and --stream-mode is set to SAMPLE . updates only # When the [--updates-only] flag is set to true, the target MUST not transmit the current state of the paths that the client has subscribed to, but rather should send only updates to them. name # The [--name] flag is used to trigger one or multiple subscriptions already defined in the configuration file see defining subscriptions output # The [--output] flag is used to select one or multiple output already defined in the configuration file. Outputs defined under target take precedence over this flag, see defining outputs and defining targets watch-config # The [--watch-config] flag is used to enable automatic target loading from the configuration source at runtime. On each configuration change, gnmic reloads the list of targets, subscribes to new targets and/or deletes subscriptions to the deleted ones. Only addition and deletion of targets are currently supported, changes in an existing target config are not possible. backoff # The [--backoff] flag is used to specify a duration between consecutive subscription towards targets. It defaults to 0s meaning all subscription are started in parallel. If a locker is configured, the backoff timer is set to 100ms by default. lock-retry # The [--lock-retry] flag is a duration used to set the wait time between consecutive lock attempts. Defaults to 5s Examples # 1. streaming, target-defined, 10s interval # gnmic -a <ip:port> sub --path /state/port [ port-id = * ] /statistics 2. streaming, sample, 30s interval # gnmic -a <ip:port> sub --path \"/state/port[port-id=*]/statistics\" \\ --sample-interval 30s 3. streaming, on-change, heartbeat interval 1min # gnmic -a <ip:port> sub --path \"/state/port[port-id=*]/statistics\" \\ --stream-mode on-change \\ --heartbeat-interval 1m 4. once subscription # gnmic -a <ip:port> sub --path \"/state/port[port-id=*]/statistics\" \\ --mode once","title":"Subscribe"},{"location":"cmd/subscribe/#description","text":"The [subscribe | sub] command represents the gNMI Subscribe RPC . It is used to send a Subscribe Request to the specified target(s) and expects one or multiple Subscribe Response","title":"Description"},{"location":"cmd/subscribe/#usage","text":"gnmic [global-flags] subscribe [local-flags]","title":"Usage"},{"location":"cmd/subscribe/#local-flags","text":"The subscribe command supports the following local flags:","title":"Local Flags"},{"location":"cmd/subscribe/#prefix","text":"The [--prefix] flag sets a common prefix to all paths specified using the local --path flag. Defaults to \"\" .","title":"prefix"},{"location":"cmd/subscribe/#path","text":"The path flag [--path] is used to specify the path(s) to which the client wants to subscribe. Multiple paths can be specified by using repeated --path flags: gnmic sub --path \"/state/ports[port-id=*]\" \\ --path \"/state/router[router-name=*]/interface[interface-name=*]\" If a user needs to provide origin information to the Path message, the following pattern should be used for the path string: \"origin:path\" : Note The path after the origin value has to start with a / gnmic sub --path \"openconfig-interfaces:/interfaces/interface\"","title":"path"},{"location":"cmd/subscribe/#target","text":"With the optional [--target] flag it is possible to supply the path target information in the prefix field of the SubscriptionList message.","title":"target"},{"location":"cmd/subscribe/#model","text":"The [--model] flag is used to specify the schema definition modules that the target should use when extracting the data to stream back.","title":"model"},{"location":"cmd/subscribe/#qos","text":"The [--qos] flag specifies the packet marking that is to be used for the responses to the subscription request. Default marking is set to 20 . If qos marking is not supported by a target the marking can be disabled by setting the value to 0 .","title":"qos"},{"location":"cmd/subscribe/#mode","text":"The [--mode] mode flag specifies the mode of subscription to be created. This may be one of: ONCE , STREAM or POLL . It is case insensitive and defaults to STREAM .","title":"mode"},{"location":"cmd/subscribe/#stream-subscription-mode","text":"The [--stream-mode] flag is used to specify the stream subscription mode. This may be one of: ON_CHANGE, SAMPLE or TARGET_DEFINED This flag applies only if --mode is set to STREAM . It is case insensitive and defaults to SAMPLE .","title":"stream subscription mode"},{"location":"cmd/subscribe/#sample-interval","text":"The [--sample-interval] flag is used to specify the sample interval to be used by the target to send samples to the client. This flag applies only in case --mode is set to STREAM and --stream-mode is set to SAMPLE . Valid formats: 1s, 1m30s, 1h . Defaults to 0s which is the lowest interval supported by a target.","title":"sample interval"},{"location":"cmd/subscribe/#heartbeat-interval","text":"The [--heartbeat-interval] flag is used to specify the server heartbeat interval. The heartbeat interval value can be specified along with ON_CHANGE or SAMPLE stream subscriptions modes. ON_CHANGE : The value of the data item(s) MUST be re-sent once per heartbeat interval regardless of whether the value has changed or not. SAMPLE : The target MUST generate one telemetry update per heartbeat interval, regardless of whether the --suppress-redundant flag is set to true.","title":"heartbeat interval"},{"location":"cmd/subscribe/#quiet","text":"With [--quiet] flag set gnmic will not output subscription responses to stdout . The --quiet flag is useful when gnmic exports the received data to one of the export providers.","title":"quiet"},{"location":"cmd/subscribe/#suppress-redundant","text":"When the [--suppress-redundant] flag is set to true, the target SHOULD NOT generate a telemetry update message unless the value of the path being reported on has changed since the last update was generated. This flag applies only in case --mode is set to STREAM and --stream-mode is set to SAMPLE .","title":"suppress redundant"},{"location":"cmd/subscribe/#updates-only","text":"When the [--updates-only] flag is set to true, the target MUST not transmit the current state of the paths that the client has subscribed to, but rather should send only updates to them.","title":"updates only"},{"location":"cmd/subscribe/#name","text":"The [--name] flag is used to trigger one or multiple subscriptions already defined in the configuration file see defining subscriptions","title":"name"},{"location":"cmd/subscribe/#output","text":"The [--output] flag is used to select one or multiple output already defined in the configuration file. Outputs defined under target take precedence over this flag, see defining outputs and defining targets","title":"output"},{"location":"cmd/subscribe/#watch-config","text":"The [--watch-config] flag is used to enable automatic target loading from the configuration source at runtime. On each configuration change, gnmic reloads the list of targets, subscribes to new targets and/or deletes subscriptions to the deleted ones. Only addition and deletion of targets are currently supported, changes in an existing target config are not possible.","title":"watch-config"},{"location":"cmd/subscribe/#backoff","text":"The [--backoff] flag is used to specify a duration between consecutive subscription towards targets. It defaults to 0s meaning all subscription are started in parallel. If a locker is configured, the backoff timer is set to 100ms by default.","title":"backoff"},{"location":"cmd/subscribe/#lock-retry","text":"The [--lock-retry] flag is a duration used to set the wait time between consecutive lock attempts. Defaults to 5s","title":"lock-retry"},{"location":"cmd/subscribe/#examples","text":"","title":"Examples"},{"location":"cmd/subscribe/#1-streaming-target-defined-10s-interval","text":"gnmic -a <ip:port> sub --path /state/port [ port-id = * ] /statistics","title":"1. streaming, target-defined, 10s interval"},{"location":"cmd/subscribe/#2-streaming-sample-30s-interval","text":"gnmic -a <ip:port> sub --path \"/state/port[port-id=*]/statistics\" \\ --sample-interval 30s","title":"2. streaming, sample, 30s interval"},{"location":"cmd/subscribe/#3-streaming-on-change-heartbeat-interval-1min","text":"gnmic -a <ip:port> sub --path \"/state/port[port-id=*]/statistics\" \\ --stream-mode on-change \\ --heartbeat-interval 1m","title":"3. streaming, on-change, heartbeat interval 1min"},{"location":"cmd/subscribe/#4-once-subscription","text":"gnmic -a <ip:port> sub --path \"/state/port[port-id=*]/statistics\" \\ --mode once","title":"4. once subscription"},{"location":"deployments/deployments_intro/","text":"There are numerous ways gnmic can be deployed, each fulfilling a specific use case. Whether it is gNMI telemetry collection and export to a single output, or clustered data pipelines with high availability and redundancy, the below examples should cover the most common use cases. Each example comes with a set of deployment files: one or multiple gnmic configuration file(s) a docker-compose file extra configuration files if the used output requires it (e.g: prometheus) If you do not not find an example that fits your need, feel free to start a discussion on github Single Instance # These examples showcase single gnmic instance deployments with the most commonly used outputs NATS output Kafka output InfluxDB output Prometheus output Multiple outputs Clusters # gnmic can also be deployed in clustered mode to either load share the targets connections between multiple instances and offer connection resiliency, and/or replicate the collected data among all the cluster members InfluxDB output Prometheus output Prometheus output with data replication Pipelines # Building data pipelines using gnmic is achieved using the outputs and inputs plugins. You will be able to process the data in a serial fashion, split it for parallel processing or mirror it to create a forked pipeline. NATS to Prometheus NATS to InfluxDB Clustered pipeline Forked pipeline","title":"Deployments"},{"location":"deployments/deployments_intro/#single-instance","text":"These examples showcase single gnmic instance deployments with the most commonly used outputs NATS output Kafka output InfluxDB output Prometheus output Multiple outputs","title":"Single Instance"},{"location":"deployments/deployments_intro/#clusters","text":"gnmic can also be deployed in clustered mode to either load share the targets connections between multiple instances and offer connection resiliency, and/or replicate the collected data among all the cluster members InfluxDB output Prometheus output Prometheus output with data replication","title":"Clusters"},{"location":"deployments/deployments_intro/#pipelines","text":"Building data pipelines using gnmic is achieved using the outputs and inputs plugins. You will be able to process the data in a serial fashion, split it for parallel processing or mirror it to create a forked pipeline. NATS to Prometheus NATS to InfluxDB Clustered pipeline Forked pipeline","title":"Pipelines"},{"location":"deployments/clusters/cluster_with_influxdb_output/","text":"The purpose of this deployment is to achieve redundancy , high-availability via clustering. This deployment example includes: A 3 instances gnmic cluster , A single InfluxDB output The leader election and target distribution is done with the help of a Consul server Deployment files: docker compose gnmic config Download the files, update the gnmic config files with the desired subscriptions and targets. Deploy it with: sudo docker-compose up -d Check the InfluxDB Output documentation page for more configuration options","title":"InfluxDB output"},{"location":"deployments/clusters/cluster_with_nats_input_and_prometheus_output/","text":"The purpose of this deployment is to achieve redundancy , high-availability as well as data replication . The redundancy and high-availability are guaranteed by deploying a gnmic cluster. The data replication is achieved using a NATS server acting as both a gnmic input and output. This deployment example includes a: 3 instances gnmic cluster , A NATS input and output A Prometheus output The leader election and target distribution is done with the help of a Consul server Each gnmic instance outputs the streamed gNMI data to NATS, and reads back all the data from the same NATS server (including its own), This effectively guarantees that each instance holds the data streamed by the whole cluster. Like in the previous examples, each gnmic instance will also register its Prometheus output service in Consul . But before doing so, it will attempt to acquire a key lock gnmic/$CLUSTER_NAME/prometheus-output , ( use-lock: true ) prom-output : type : prometheus listen : \":9804\" service-registration : address : consul-agent:8500 use-lock : true # <=== Since only one instance can hold a lock, only one prometheus output is registered, so only one output is scraped by Prometheus. Deployment files: docker compose gnmic config prometheus config Download the files, update the gnmic config files with the desired subscriptions and targets. Note The targets outputs list should include the nats output name Deploy it with: sudo docker-compose up -d Check the NATS Output , NATS Input and Prometheus Output documentation pages for more configuration options","title":"Prometheus output with data replication"},{"location":"deployments/clusters/cluster_with_prometheus_output/","text":"The purpose of this deployment is to achieve redundancy , high-availability via clustering. This deployment example includes: A 3 instances gnmic cluster , A single Prometheus output The leader election and target distribution is done with the help of a Consul server gnmic will also register its Prometheus output service in Consul so that Prometheus can discover which Prometheus servers are available to be scraped Deployment files: docker compose gnmic config prometheus config Download the files, update the gnmic config files with the desired subscriptions and targets. Deploy it with: sudo docker-compose up -d Check the Prometheus Output documentation page for more configuration options","title":"Prometheus output"},{"location":"deployments/pipelines/forked_pipeline/","text":"The purpose of this deployment is to create a forked data pipeline using NATS , Influxdb and Prometheus The example includes 3 gnmic instances. The first, called collector , is responsible for streaming the gNMI data from the targets and output it to a NATS server. The second and third, called relay1 and relay2 , reads the data from NATS and writes it to either InfluxDB or Prometheus This deployment enables a few use cases: Apply different processors by the collector and relay. Scale the collector and relay separately, see this example for a scaled-out version. Fork the data into a separate pipeline for a different use case. Deployment files: docker compose gnmic collector config gnmic relay1 config gnmic relay2 config prometheus config Download the files, update the gnmic collector config files with the desired subscriptions and targets. Deploy it with: sudo docker-compose up -d Check the Prometheus Output and NATS Input documentation page for more configuration options","title":"Forked pipeline"},{"location":"deployments/pipelines/gnmic_cluster_nats_prometheus/","text":"The purpose of this deployment is to create a clustered data pipeline using NATS and Prometheus . Achieving redundancy , high-availability and data replication , all in clustered data pipeline. The example is divided in 2 parts: Clustered collectors and single relay Clustered collectors and clustered relays These 2 examples are essentially scaled-out versions of this example Clustered collectors and single relay # Deployment files: docker compose gnmic collector config gnmic relay config prometheus config Download the files, update the gnmic collectors config files with the desired subscriptions and targets. Deploy it with: sudo docker-compose up -d Check the Prometheus Output and NATS Input documentation page for more configuration options Clustered collectors and clustered relays # Deployment files: docker compose gnmic collector config gnmic relay config prometheus config Download the files, update the gnmic collectors config files with the desired subscriptions and targets. Deploy it with: sudo docker-compose up -d Check the Prometheus Output and NATS Input documentation page for more configuration options","title":"Clustered pipeline"},{"location":"deployments/pipelines/gnmic_cluster_nats_prometheus/#clustered-collectors-and-single-relay","text":"Deployment files: docker compose gnmic collector config gnmic relay config prometheus config Download the files, update the gnmic collectors config files with the desired subscriptions and targets. Deploy it with: sudo docker-compose up -d Check the Prometheus Output and NATS Input documentation page for more configuration options","title":"Clustered collectors and single relay"},{"location":"deployments/pipelines/gnmic_cluster_nats_prometheus/#clustered-collectors-and-clustered-relays","text":"Deployment files: docker compose gnmic collector config gnmic relay config prometheus config Download the files, update the gnmic collectors config files with the desired subscriptions and targets. Deploy it with: sudo docker-compose up -d Check the Prometheus Output and NATS Input documentation page for more configuration options","title":"Clustered collectors and clustered relays"},{"location":"deployments/pipelines/nats_influxdb/","text":"The purpose of this deployment is to create data pipeline using NATS and InfluxDB The example includes 2 gnmic instances. The first, called collector , is responsible for streaming the gNMI data from the targets and output it to a NATS server. The second, called relay , reads the data from NATS and writes it to InfluxDB This deployment enables a few use cases: Apply different processors by the collector and relay. Scale the collector and relay separately, see this example for a scaled-out version. Fork the data into a separate pipeline for a different use case. Deployment files: docker compose gnmic collector config gnmic relay config Download the files, update the gnmic collector config files with the desired subscriptions and targets. Deploy it with: sudo docker-compose up -d Check the InfluxDB Output and NATS Input documentation page for more configuration options","title":"NATS to InfluxDB"},{"location":"deployments/pipelines/nats_prometheus/","text":"The purpose of this deployment is to create data pipeline using NATS and Prometheus The example includes 2 gnmic instances. The first, called collector , is responsible for streaming the gNMI data from the targets and output it to a NATS server. The second, called relay , reads the data from NATS and writes it to Prometheus This deployment enables a few use cases: Apply different processors by the collector and relay. Scale the collector and relay separately, see this example for a scaled-out version. Fork the data into a separate pipeline for a different use case. Deployment files: docker compose gnmic collector config gnmic relay config Download the files, update the gnmic collector config files with the desired subscriptions and targets. Deploy it with: sudo docker-compose up -d Check the Prometheus Output and NATS Input documentation page for more configuration options","title":"NATS to Prometheus"},{"location":"deployments/single-instance/influxdb-output/","text":"The purpose of this deployment is to collect gNMI data and write it to an InfluxDB instance. This deployment example includes a single gnmic instance and a single InfluxDB output Deployment files: docker compose gnmic config Download both files, update the gnmic config file with the desired subscriptions and targets. Deploy it with: sudo docker-compose up -d Check the InfluxDB Output documentation page for more configuration options","title":"InfluxDB output"},{"location":"deployments/single-instance/kafka-output/","text":"The purpose of this deployment is to collect gNMI data and write it to a Kafka broker. Multiple 3 rd Party systems (acting as a Kafka consumers) can then read the data from the Kafka broker for further processing. This deployment example includes a single gnmic instance and a single Kafka output Deployment files: docker compose gnmic config Download both files, update the gnmic config file with the desired subscriptions and targets. Deploy it with: sudo docker-compose up -d Check the Kafka Output documentation page for more configuration options","title":"Kafka output"},{"location":"deployments/single-instance/multiple-outputs/","text":"The purpose of this deployment is to collect gNMI data and write it to multiple outputs. This deployment example includes: A single gnmic instance A Prometheus output An InfluxDB output A NATS output A Kafka output A File output Deployment files: docker compose gnmic config Download both files, update the gnmic config file with the desired subscriptions and targets. Deploy it with: sudo docker-compose up -d Check the gnmic outputs documentation page for more configuration options","title":"Multiple outputs"},{"location":"deployments/single-instance/nats-output/","text":"The purpose of this deployment is to collect gNMI data and write it to a NATS server. Multiple 3 rd Party systems (acting as a NATS clients) can then read the data from the NATS server for further processing. This deployment example includes a single gnmic instance and a single NATS output Deployment files: docker compose gnmic config Download both files, update the gnmic config file with the desired subscriptions and targets. Deploy it with: sudo docker-compose up -d Check the NATS Output documentation page for more configuration options","title":"NATS output"},{"location":"deployments/single-instance/prometheus-output/","text":"The purpose of this deployment is to collect gNMI data and make it available for scraping by a Prometheus client. This deployment example includes a single gnmic instance and a single Prometheus output Deployment files: docker compose gnmic config Download both files, update the gnmic config file with the desired subscriptions and targets. Deploy it with: sudo docker-compose up -d Check the Prometheus output documentation page for more configuration options","title":"Prometheus output"},{"location":"user_guide/HA/","text":"Multiple instances of gnmic can be run in clustered mode in order to load share the targets connections and protect against failures. The cluster mode allows gnmic to scale and be highly available at the same time To join the cluster, the instances rely on a service discovery system and distributed KV store such as Consul , Clustering process # At startup, all instances belonging to a cluster: Enter an election process in order to become the cluster leader. Register their API service gnmic-api in a configured service discovery system. Upon becoming the leader: The gnmic instance starts watching the registered gnmic-api services, and maintains a local cache of the active ones. These are essentially the instances restAPI addresses. The leader then waits for clustering/leader-wait-timer to allow the other instances to register their API services as well. This is useful in case an instance is slow to boot, which leaves it out of the initial load sharing process. The leader then enters a \"target watch loop\" ( clustering/targets-watch-timer ), at each iteration the leader tries to determine if all configured targets are handled by an instance of the cluster, this is done by checking if there is a lock maintained for each configured target. The instances which failed to become the leader, continue to try to acquire the leader lock. Target distribution process # If the leader detects that a target does not have a lock, it triggers the target distribution process: Query all the targets keys from the KV store and calculate each instance load (number of maintained gNMI targets). If the target configuration includes tags , the leader selects the instance with the most matching tags (in order). If multiple instances have the same matching tags, the one with the lowest load is selected. If the target doesn't have configured tags, the leader simply select the least loaded instance to handle the target's subscriptions. Retrieve the selected instance API address from the local services cache. Send both the target configuration as well as a target activation action to the selected instance. When a cluster instance gets assigned a target (target activation): Acquire a key lock for that specific target. Once the lock is acquired, create the configured gNMI subscriptions. Maintain the target lock for the duration of the gNMI subscription. The whole target distribution process is repeated for each target missing a lock. Configuration # The cluster configuration is as simple as: # rest api address, format \"address:port\" api : \"\" # clustering related configuration fields clustering : # the cluster name, tells with instances belong to the same cluster # it is used as part of the leader key lock, and the targets key locks # if no value is configured, the value from flag --cluster-name is used. # if the flag has the empty string as value, \"default-cluster\" is used. cluster-name : default-cluster # unique instance name within the cluster, # used as the value in the target locks, # used as the value in the leader lock. # if no value is configured, the value from flag --instance-name is used. # if the flag has the empty string as value, a value is generated in # the format `gnmic-$UUID` instance-name : \"\" # service address to be registered in the locker(Consul) # if not defined, it defaults to the address part of the API address:port service-address : \"\" # gnmic instances API service watch timer # this is a long timer used by the cluster leader # in a consul long-blocking query: # https://www.consul.io/api-docs/features/blocking#implementation-details services-watch-timer : 60s # targets-watch-timer, targets watch timer, duration the leader waits # between consecutive targets distributions targets-watch-timer : 20s # target-assignment-timeout, max time a leader waits for an instance to # lock an assigned target. # if the timeout is reached the leader unassigns the target and reselects # a different instance. target-assignment-timeout : 10s # leader wait timer, allows to configure a wait time after an instance # acquires the leader key. # this wait time goal is to give more chances to other instances to register # their API services before the target distribution starts leader-wait-timer : 5s # ordered list of strings to be added as tags during api service # registration in addition to `cluster-name=${cluster-name}` and # `instance-name=${instance-name}` tags : [] # locker is used to configure the KV store used for # service registration, service discovery, leader election and targets locks locker : # type of locker, only consul is supported currently type : consul # address of the locker server address : localhost:8500 # Consul Data center, defaults to dc1 datacenter : # Consul username, to be used as part of HTTP basicAuth username : # Consul password, to be used as part of HTTP basicAuth password : # Consul Token, is used to provide a per-request ACL token which overrides # the agent's default token token : # session-ttl, session time-to-live after which a session is considered # invalid if not renewed # upon session invalidation, all services and locks created using this session # are considered invalid. session-ttl : 10s # delay, a time duration (0s to 60s), in the event of a session invalidation # consul will prevent the lock from being acquired for this duration. # The purpose is to allow a gnmic instance to stop active subscriptions before # another one takes over. delay : 5s # retry-timer, wait period between retries to acquire a lock # in the event of client failure, key is already locked or lock lost. retry-timer : 2s # renew-period, session renew period, must be lower that session-ttl. # if the value is greater or equal than session-ttl, is will be set to half # of session-ttl. renew-period : 5s # debug, enable extra logging messages debug : false A gnmic instance creates gNMI subscriptions only towards targets for which it acquired locks. It is also responsible for maintaining that lock for the duration of the subscription. Instance affinity # The target distribution process can be influenced using tags added to the target configuration. By default, gnmic instances register their API service with 2 tags; cluster-name=${clustering/cluster-name} instance-name=${clustering/instance-name} By adding the same tags to a target router1 configuration (below YAML), the cluster leader will \"assign\" router1 to instance gnmic1 in cluster my-cluster regardless of the instance load. targets : router1 : tags : - cluster-name=my-cluster - instance-name=gnmic1 Custom tags can be added to an instance API service registration in order to customize the instance affinity logic. clustering : tags : - my-custom-tag=value1 Instance failure # In the event of an instance failure, its maintained targets locks expire, which on the next clustering/targets-watch-timer interval will be detected by the cluster leader. The leader then performs the same target distribution process for those targets without a lock. Leader reelection # If a cluster leader fails, one of the other instances in the cluster eventually acquires the leader lock and becomes the cluster leader. It then, proceeds with the targets distribution process to assign the unhandled targets to an instance in the cluster. Scalability # Using the same above-mentioned clustering mechanism, gnmic can horizontally scale the number of supported gNMI connections distributed across multiple gnmic instances. The collected gNMI data can then be aggregated and made available through any of the running gnmic instances, regardless of whether that instance collected the data from the target or not. The data aggregation is done by chaining gnmic outputs and inputs to build a gNMI data pipeline. In the diagram below, the gnmic instances on the left and right side of NATS server can be identical.","title":"Clustering"},{"location":"user_guide/HA/#clustering-process","text":"At startup, all instances belonging to a cluster: Enter an election process in order to become the cluster leader. Register their API service gnmic-api in a configured service discovery system. Upon becoming the leader: The gnmic instance starts watching the registered gnmic-api services, and maintains a local cache of the active ones. These are essentially the instances restAPI addresses. The leader then waits for clustering/leader-wait-timer to allow the other instances to register their API services as well. This is useful in case an instance is slow to boot, which leaves it out of the initial load sharing process. The leader then enters a \"target watch loop\" ( clustering/targets-watch-timer ), at each iteration the leader tries to determine if all configured targets are handled by an instance of the cluster, this is done by checking if there is a lock maintained for each configured target. The instances which failed to become the leader, continue to try to acquire the leader lock.","title":"Clustering process"},{"location":"user_guide/HA/#target-distribution-process","text":"If the leader detects that a target does not have a lock, it triggers the target distribution process: Query all the targets keys from the KV store and calculate each instance load (number of maintained gNMI targets). If the target configuration includes tags , the leader selects the instance with the most matching tags (in order). If multiple instances have the same matching tags, the one with the lowest load is selected. If the target doesn't have configured tags, the leader simply select the least loaded instance to handle the target's subscriptions. Retrieve the selected instance API address from the local services cache. Send both the target configuration as well as a target activation action to the selected instance. When a cluster instance gets assigned a target (target activation): Acquire a key lock for that specific target. Once the lock is acquired, create the configured gNMI subscriptions. Maintain the target lock for the duration of the gNMI subscription. The whole target distribution process is repeated for each target missing a lock.","title":"Target distribution process"},{"location":"user_guide/HA/#configuration","text":"The cluster configuration is as simple as: # rest api address, format \"address:port\" api : \"\" # clustering related configuration fields clustering : # the cluster name, tells with instances belong to the same cluster # it is used as part of the leader key lock, and the targets key locks # if no value is configured, the value from flag --cluster-name is used. # if the flag has the empty string as value, \"default-cluster\" is used. cluster-name : default-cluster # unique instance name within the cluster, # used as the value in the target locks, # used as the value in the leader lock. # if no value is configured, the value from flag --instance-name is used. # if the flag has the empty string as value, a value is generated in # the format `gnmic-$UUID` instance-name : \"\" # service address to be registered in the locker(Consul) # if not defined, it defaults to the address part of the API address:port service-address : \"\" # gnmic instances API service watch timer # this is a long timer used by the cluster leader # in a consul long-blocking query: # https://www.consul.io/api-docs/features/blocking#implementation-details services-watch-timer : 60s # targets-watch-timer, targets watch timer, duration the leader waits # between consecutive targets distributions targets-watch-timer : 20s # target-assignment-timeout, max time a leader waits for an instance to # lock an assigned target. # if the timeout is reached the leader unassigns the target and reselects # a different instance. target-assignment-timeout : 10s # leader wait timer, allows to configure a wait time after an instance # acquires the leader key. # this wait time goal is to give more chances to other instances to register # their API services before the target distribution starts leader-wait-timer : 5s # ordered list of strings to be added as tags during api service # registration in addition to `cluster-name=${cluster-name}` and # `instance-name=${instance-name}` tags : [] # locker is used to configure the KV store used for # service registration, service discovery, leader election and targets locks locker : # type of locker, only consul is supported currently type : consul # address of the locker server address : localhost:8500 # Consul Data center, defaults to dc1 datacenter : # Consul username, to be used as part of HTTP basicAuth username : # Consul password, to be used as part of HTTP basicAuth password : # Consul Token, is used to provide a per-request ACL token which overrides # the agent's default token token : # session-ttl, session time-to-live after which a session is considered # invalid if not renewed # upon session invalidation, all services and locks created using this session # are considered invalid. session-ttl : 10s # delay, a time duration (0s to 60s), in the event of a session invalidation # consul will prevent the lock from being acquired for this duration. # The purpose is to allow a gnmic instance to stop active subscriptions before # another one takes over. delay : 5s # retry-timer, wait period between retries to acquire a lock # in the event of client failure, key is already locked or lock lost. retry-timer : 2s # renew-period, session renew period, must be lower that session-ttl. # if the value is greater or equal than session-ttl, is will be set to half # of session-ttl. renew-period : 5s # debug, enable extra logging messages debug : false A gnmic instance creates gNMI subscriptions only towards targets for which it acquired locks. It is also responsible for maintaining that lock for the duration of the subscription.","title":"Configuration"},{"location":"user_guide/HA/#instance-affinity","text":"The target distribution process can be influenced using tags added to the target configuration. By default, gnmic instances register their API service with 2 tags; cluster-name=${clustering/cluster-name} instance-name=${clustering/instance-name} By adding the same tags to a target router1 configuration (below YAML), the cluster leader will \"assign\" router1 to instance gnmic1 in cluster my-cluster regardless of the instance load. targets : router1 : tags : - cluster-name=my-cluster - instance-name=gnmic1 Custom tags can be added to an instance API service registration in order to customize the instance affinity logic. clustering : tags : - my-custom-tag=value1","title":"Instance affinity"},{"location":"user_guide/HA/#instance-failure","text":"In the event of an instance failure, its maintained targets locks expire, which on the next clustering/targets-watch-timer interval will be detected by the cluster leader. The leader then performs the same target distribution process for those targets without a lock.","title":"Instance failure"},{"location":"user_guide/HA/#leader-reelection","text":"If a cluster leader fails, one of the other instances in the cluster eventually acquires the leader lock and becomes the cluster leader. It then, proceeds with the targets distribution process to assign the unhandled targets to an instance in the cluster.","title":"Leader reelection"},{"location":"user_guide/HA/#scalability","text":"Using the same above-mentioned clustering mechanism, gnmic can horizontally scale the number of supported gNMI connections distributed across multiple gnmic instances. The collected gNMI data can then be aggregated and made available through any of the running gnmic instances, regardless of whether that instance collected the data from the target or not. The data aggregation is done by chaining gnmic outputs and inputs to build a gNMI data pipeline. In the diagram below, the gnmic instances on the left and right side of NATS server can be identical.","title":"Scalability"},{"location":"user_guide/configuration_env/","text":"gnmic can be configured using environment variables, it will read the environment variables starting with GNMIC_ . The Env variable names are inline with the flag names as well as the configuration hierarchy. For e.g to set the gNMI username, the env variable GNMIC_USERNAME should be set. Global flags to env variable name mapping: Flag name ENV variable name --address GNMIC_ADDRESS --encoding GNMIC_ENCODING --format GNMIC_FORMAT --insecure GNMIC_INSECURE --log GNMIC_LOG --log-file GNMIC_LOG_FILE --no-prefix GNMIC_NO_PREFIX --password GNMIC_PASSWORD --no-prometheus-address GNMIC_PROMETHEUS_ADDRESS --proxy-from-env GNMIC_PROXY_FROM_ENV --retry GNMIC_RETRY --skip-verify GNMIC_SKIP_VERIFY --timeout GNMIC_TIMEOUT --tls-ca GNMIC_TLS_CA --tls-cert GNMIC_TLS_CERT --tls-key GNMIC_TLS_KEY --tls-max-version GNMIC_TLS_MAX_VERSION --tls-min-version GNMIC_TLS_MIN_VERSION --tls-version GNMIC_TLS_VERSION --username GNMIC_USERNAME --cluster-name GNMIC_CLUSTER_NAME --instance-name GNMIC_INSTANCE_NAME --proto-file GNMIC_PROTO_FILE --proto-dir GNMIC_PROTO_DIR Configuration items that do not have a corresponding flag, the env variable will be constructed from the path elements to the variable name joined with a _ . For e.g to set the clustering locker address, as in the yaml blob below: clustering : locker : address : the env variable GNMIC_CLUSTERING_LOCKER_ADDRESS should be set Limitations: Configuration items of type list cannot be set using env vars. Intermediate configuration keys should not contain _ or - . Example: outputs : output1 : # <-- should not contain `_` or `-` type : prometheus listen : :9804 Is equivalent to: GNMIC_OUTPUTS_OUTPUT1_TYPE=prometheus GNMIC_OUTPUTS_OUTPUT1_LISTEN=:9804","title":"Environment variables"},{"location":"user_guide/configuration_file/","text":"gnmic configuration by means of the command line flags is both consistent and reliable. But sometimes its not the best way forward. With lots of configuration options that gnmic supports it might get tedious to pass them all via CLI flags. In cases like that the file-based configuration comes handy. With a configuration file a user can specify all the command line flags by means of a single file. gnmic will read this file and retrieve the configuration options from it. What options can be in a file? # Configuration file allows a user to specify everything that can be supplied over the CLI and more. Global flags # All of the global flags can be put in a conf file. Consider the following example of a typical configuration file in YAML format: # gNMI target address; CLI flag `--address` address : \"10.0.0.1:57400\" # gNMI target user name; CLI flag `--username` username : admin # gNMI target user password; CLI flag `--password` password : admin # connection mode; CLI flag `--insecure` insecure : true # log file location; CLI flag `--log-file` log-file : /tmp/gnmic.log With such a file located at a default path the gNMI requests can be made in a very short and concise form: # configuration file is read by its default path gnmi capabilities # cfg file has all the global options set, so only the local flags are needed gnmi get --path /configure/system/name Local flags # Local flags have the scope of the command where they have been defined. Local flags can be put in a configuration file as well. To avoid flags names overlap between the different commands a command name should prepend the flag name - <cmd name>-<flag name> . So, for example, we can provide the path flag of a get command in the file by adding the get- prefix to the local flag name: address : \"router.lab:57400\" username : admin password : admin insecure : true get-path : /configure/system/name # `get` command local flag Another example: the update-path flag of a set will be set-update-path in the configuration file. Targets # It is possible to specify multiple targets with different configurations (credentials, timeout,...). This is described in Multiple targets documentation article. Subscriptions # It is possible to specify multiple subscriptions and associate them with different targets in a flexible way. This configuration option is described in Multiple subscriptions documentation article. Outputs # The other mode gnmic supports (in contrast to CLI) is running as a daemon and exporting the data received from gNMI subscriptions to multiple outputs like stan/nats, kafka, file, prometheus, influxdb, etc... Inputs # gnmic supports reading gNMI data from a set of inputs and export the data to any of the configured outputs. This is used when building data pipelines with gnmic Repeated flags # If a flag can appear more than once on the CLI, it can be represented as a list in the file. For example one can set multiple paths for get/set/subscribe operations. In the following example we define multiple paths for the get command to operate on: address : \"router.lab:57400\" username : admin password : admin insecure : true get-path : - /configure/system/name - /state/system/version Options preference # Configuration passed via CLI flags and Env variables take precedence over the file config. Environment variables in file # Environment variables can be used in the configuration file and will be expanded at the time the configuration is read. outputs : output1 : type : nats address : ${NATS_IP}:4222","title":"File configuration"},{"location":"user_guide/configuration_file/#what-options-can-be-in-a-file","text":"Configuration file allows a user to specify everything that can be supplied over the CLI and more.","title":"What options can be in a file?"},{"location":"user_guide/configuration_file/#global-flags","text":"All of the global flags can be put in a conf file. Consider the following example of a typical configuration file in YAML format: # gNMI target address; CLI flag `--address` address : \"10.0.0.1:57400\" # gNMI target user name; CLI flag `--username` username : admin # gNMI target user password; CLI flag `--password` password : admin # connection mode; CLI flag `--insecure` insecure : true # log file location; CLI flag `--log-file` log-file : /tmp/gnmic.log With such a file located at a default path the gNMI requests can be made in a very short and concise form: # configuration file is read by its default path gnmi capabilities # cfg file has all the global options set, so only the local flags are needed gnmi get --path /configure/system/name","title":"Global flags"},{"location":"user_guide/configuration_file/#local-flags","text":"Local flags have the scope of the command where they have been defined. Local flags can be put in a configuration file as well. To avoid flags names overlap between the different commands a command name should prepend the flag name - <cmd name>-<flag name> . So, for example, we can provide the path flag of a get command in the file by adding the get- prefix to the local flag name: address : \"router.lab:57400\" username : admin password : admin insecure : true get-path : /configure/system/name # `get` command local flag Another example: the update-path flag of a set will be set-update-path in the configuration file.","title":"Local flags"},{"location":"user_guide/configuration_file/#targets","text":"It is possible to specify multiple targets with different configurations (credentials, timeout,...). This is described in Multiple targets documentation article.","title":"Targets"},{"location":"user_guide/configuration_file/#subscriptions","text":"It is possible to specify multiple subscriptions and associate them with different targets in a flexible way. This configuration option is described in Multiple subscriptions documentation article.","title":"Subscriptions"},{"location":"user_guide/configuration_file/#outputs","text":"The other mode gnmic supports (in contrast to CLI) is running as a daemon and exporting the data received from gNMI subscriptions to multiple outputs like stan/nats, kafka, file, prometheus, influxdb, etc...","title":"Outputs"},{"location":"user_guide/configuration_file/#inputs","text":"gnmic supports reading gNMI data from a set of inputs and export the data to any of the configured outputs. This is used when building data pipelines with gnmic","title":"Inputs"},{"location":"user_guide/configuration_file/#repeated-flags","text":"If a flag can appear more than once on the CLI, it can be represented as a list in the file. For example one can set multiple paths for get/set/subscribe operations. In the following example we define multiple paths for the get command to operate on: address : \"router.lab:57400\" username : admin password : admin insecure : true get-path : - /configure/system/name - /state/system/version","title":"Repeated flags"},{"location":"user_guide/configuration_file/#options-preference","text":"Configuration passed via CLI flags and Env variables take precedence over the file config.","title":"Options preference"},{"location":"user_guide/configuration_file/#environment-variables-in-file","text":"Environment variables can be used in the configuration file and will be expanded at the time the configuration is read. outputs : output1 : type : nats address : ${NATS_IP}:4222","title":"Environment variables in file"},{"location":"user_guide/configuration_flags/","text":"gnmic supports a set of global flags, applicable to all sub commands, as well as local flags which are specific to each sub command. Global flags Local flags: Capabilities Get Set Subscribe Prompt Path Listen","title":"Flags"},{"location":"user_guide/configuration_intro/","text":"gnmic reads configuration from three different sources, Global and local flags , environment variables and local system file . The different sources follow a precedence order where a configuration variable from a source take precedence over the next one in the below list: flags env file Flags # See here for a complete list of the supported global and local flags. Environment variables # gnmic can also be configured using environment variables, it will read the environment variables starting with GNMIC_ . The Env variable names are inline with the flag names as well as the configuration hierarchy. See here for more details on environment variables. File configuration # Configuration file that gnmic reads must be in one of the following formats: JSON, YAML, TOML, HCL or Properties. By default, gnmic will search for a file named .gnmic.[yml/yaml, toml, json] in the following locations and will use the first file that exists: $PWD $HOME $XDG_CONFIG_HOME $XDG_CONFIG_HOME/gnmic The default path can be overridden with --config flag. # config file default path is : # $PWD/.gnmic.[yml, toml, json], or # $HOME/.gnmic.[yml, toml, json], or # $XDG_CONFIG_HOME/.gnmic.[yml, toml, json], or # $XDG_CONFIG_HOME/gnmic/.gnmic.[yml, toml, json] gnmic capabilities # read `cfg.yml` file located in the current directory gnmic --config ./cfg.yml capabilities If the file referenced by --config flag is not present, the default path won't be tried. Example of the gnmic config files are provided in the following formats: YAML , JSON , TOML .","title":"Introduction"},{"location":"user_guide/configuration_intro/#flags","text":"See here for a complete list of the supported global and local flags.","title":"Flags"},{"location":"user_guide/configuration_intro/#environment-variables","text":"gnmic can also be configured using environment variables, it will read the environment variables starting with GNMIC_ . The Env variable names are inline with the flag names as well as the configuration hierarchy. See here for more details on environment variables.","title":"Environment variables"},{"location":"user_guide/configuration_intro/#file-configuration","text":"Configuration file that gnmic reads must be in one of the following formats: JSON, YAML, TOML, HCL or Properties. By default, gnmic will search for a file named .gnmic.[yml/yaml, toml, json] in the following locations and will use the first file that exists: $PWD $HOME $XDG_CONFIG_HOME $XDG_CONFIG_HOME/gnmic The default path can be overridden with --config flag. # config file default path is : # $PWD/.gnmic.[yml, toml, json], or # $HOME/.gnmic.[yml, toml, json], or # $XDG_CONFIG_HOME/.gnmic.[yml, toml, json], or # $XDG_CONFIG_HOME/gnmic/.gnmic.[yml, toml, json] gnmic capabilities # read `cfg.yml` file located in the current directory gnmic --config ./cfg.yml capabilities If the file referenced by --config flag is not present, the default path won't be tried. Example of the gnmic config files are provided in the following formats: YAML , JSON , TOML .","title":"File configuration"},{"location":"user_guide/prompt_suggestions/","text":"Starting with gnmic v0.4.0 release the users can enjoy the interactive prompt mode which can be enabled with the prompt command. The prompt mode delivers two major features: simplifies gnmic commands and flags navigation, as every option is suggested and auto-completed provides interactive YANG path auto-suggestions for get , set , subscribe commands effectively making the terminal your YANG browser Using the prompt interface # Depending on the cursor position in the prompt line, a so-called suggestion box pops up with contextual auto-completions. The user can enter the suggestion box by pressing the TAB key. The \u2191 and \u2193 keys can be used to navigate the suggestion list. Select the suggested menu item with SPACE key or directly commit your command with ENTER , its that easy! The following most-common key bindings will work in the prompt mode: Key combination Description Option/Control + \u2192/\u2190 move cursor a word right/left Control + W delete a word to the left Control + Z delete a path element in the xpath string ( example ) Control + A move cursor to the beginning of a line Control + E move cursor to the end of a line Control + C discard the current line Control + D exit prompt Control + K delete the line after the cursor to the clipboard Control + U delete the line before the cursor to the clipboard Control + L clear screen Commands and flags suggestions # To make gnmic configurable and flexible we introduced a considerable amount of flags and sub-commands. To help the users navigate the sheer selection of gnmic configuration options, the prompt mode will auto-suggest the global flags, sub-commands and local flags of those sub-commands. When the prompt mode is launched, the suggestions will be shown for the top-level commands and all the global flags. Once the sub-command is typed into the terminal, the auto-suggestions will be provided for the commands nested under this command and its local flags. In the following demo we show how the command and flag suggestions work. As the prompt starts, the suggestion box immediately hints what commands and global flags are available for input as well as their description. The user starts with adding the global flags --address, --insecure, --username and then selects the capabilities command and commits it. This results in gNMI Capability RPC execution against a specified target. Mixed mode # Its perfectly fine to specify some global flags outside of the prompt command and add more within the prompt mode. For example, the following is a valid invocation: gnmic --insecure --username admin --password admin --address 10.1.0.11 prompt Here the prompt will start with with the insecure, username, password, address flags set. YANG-completions # One of the most challenging problems in the network automation field is to process the YANG models and traverse YANG trees to construct the requests used against the network elements. Be it gNMI, NETCONF or RESTCONF a users still needs to have a path pointing to specific YANG-defined node which is targeted by a request. In gNMI paths can be represented in a human readable XPATH-like form - /a/b/c[key=val]/d - and these paths are based on the underlying YANG models. The problem at hand was how to get these paths interactively, or even better - walk the YANG tree from within the CLI and dynamically build the path used in a gNMI RPC? With YANG-completions feature embedded in gnmic what used to be a dream is now a reality \ud83c\udf89 Let us explain what just happened there. In the demonstration above, we called the gnmic with the well-known flags defining the gNMI target ( address , username , password ). But this time we also added a few YANG specific flags ( --file and --dir ) that load the full set of Nokia SR OS YANG models and the 3 rd party models SR OS rely on. gnmic --address 10.1.0.11 --insecure --username admin --password admin \\ --file ~/7x50_YangModels/YANG/nokia-combined \\ --dir ~/7x50_YangModels/YANG \\ prompt In the background gnmic processed these YANG models to build the entire schema tree of the Nokia SR OS state and configuration datastores. With that in-mem stored information, gnmic was able to auto-suggest all the possible YANG paths when the user entered the --path flag which accepts gNMI paths. By using the auto-suggestion hints, a user navigated the /state tree of a router and drilled down to the version-number leaf that, in the end, was retrieved with the gNMI Get RPC. YANG-driven path suggestions gnmic is now capable of reading and processing YANG modules to enable live path auto-suggestions YANG processing # For the YANG-completion feature to work its absolutely imperative for gnmic to successfully parse and compile the YANG models. The prompt command leverages the --file and --dir flags to select the YANG models for processing. With the --file flag a user specifies a file path to a YANG file or a directory of them that gnmic will read and process. If it points to a directory it will be visited recursively reading in all *.yang files it finds. The --dir flag also points to a YANG file or a directory and indicates which additional YANG files might be required. For example, if the YANG modules that a user specified with the --file flag import or include modules that were not part of the path specified with --file , they need to be added with the --dir flag. The Examples section provide some good practical examples on how these two flags can be used together to process the YANG models from different vendors. Understanding path suggestions # When gnmic provides a user with the path suggestions it does it in a smart and intuitive way. First, it understands in what part of the tree a user currently is and suggests only the next possible elements. Additionally, the suggested next path elements will be augmented with the information extracted from the YANG model, such as: element description, as given in the YANG description statement for the element element configuration state ( rw / ro ), as defined in section 4.2.3 of RFC 7950 . node type: The containers and lists will be denoted with the [+] marker, which means that a user can type / char after them to receive suggestions for the nested elements. the [\u22ef] character belongs to a leaf-list element. an empty space will indicate the leaf element. Examples # The examples in this section will show how to use the --file and --dir flags of the prompt command with the YANG collections from different vendors and standard bodies. Nokia SR OS # YANG repo: nokia/7x50_YangModels Clone the repository with Nokia YANG models and checkout the release of interest: git clone https://github.com/nokia/7x50_YangModels cd 7x50_YangModels git checkout sros_20.7.r2 Start gnmic in prompt mode and read in the nokia-combined YANG modules: gnmic --file YANG/nokia-combined \\ --dir YANG \\ prompt This will enable path auto-suggestions for the entire tree of the Nokia SR OS YANG models. The full command with the gNMI target specified could look like this: gnmic --address 10.1.0.11 --insecure --username admin --password admin \\ prompt \\ --file ~/7x50_YangModels/YANG/nokia-combined \\ --dir ~/7x50_YangModels/YANG Openconfig # YANG repo: openconfig/public Clone the OpenConfig repository: git clone https://github.com/openconfig/public cd public Start gnmic in prompt mode and read in all the modules: gnmic --file release/models \\ --dir third_party \\ --exclude ietf-interfaces \\ prompt Note With OpenConfig models we have to use --exclude flag to exclude ietf-interfaces module from being clashed with OpenConfig interfaces module. Cisco # YANG repo: YangModels/yang Clone the YangModels/yang repo and change into the main directory of the repo: git clone https://github.com/YangModels/yang cd yang/vendor IOS-XR # The IOS-XR native YANG models are disaggregated and spread all over the place. Although its technically possible to load them all in one go, this approach will produce a lot of top-level modules making the navigation quite hard. An easier and cleaner approach would be to find the relevant module(s) and load them separately or in small batches. For example here we load BGP config and operational models together: gnmic --file vendor/cisco/xr/721/Cisco-IOS-XR-um-router-bgp-cfg.yang \\ --file vendor/cisco/xr/721/Cisco-IOS-XR-ipv4-bgp-oper.yang \\ --dir standard/ietf \\ prompt Note We needed to include the ietf/ directory by means of the --dir flag, since the Cisco's native modules rely on the IETF modules and these modules are not in the same directory as the BGP modules. The full command that you can against the real Cisco IOS-XR node must have a target defined, the encoding set and origin suggestions enabled. Here is what it can look like: gnmic -a 10.10.30.5:57500 --insecure -e json_ietf -u admin -p Cisco123 \\ prompt \\ --file yang/vendor/cisco/xr/662/Cisco-IOS-XR-ipv4-bgp-cfg.yang \\ --file yang/vendor/cisco/xr/662/Cisco-IOS-XR-ipv4-bgp-oper.yang \\ --dir yang/standard/ietf \\ --suggest-with-origin NX-OS # Cisco NX-OS native modules, on the other hand, are aggregated in a single file, here is how you can generate the suggestions from it: gnmic --file vendor/cisco/xr/721/Cisco-IOS-XR-um-router-bgp-cfg.yang \\ --dir standard/ietf \\ prompt Juniper # YANG repo: Juniper/yang Clone the Juniper YANG repository and change into the release directory: git clone https://github.com/Juniper/yang cd yang/20.3/20.3R1 Start gnmic and generate path suggestions for the whole configuration tree of Juniper MX: gnmic --file junos/conf --dir common prompt Note Juniper models are constructed in a way that a top-level container appears to be /configuration , that will not work with your gNMI Subscribe RPC. Instead, you should omit this top level container. So, for example, the suggested path /configuration/interfaces/interface/state should become /interfaces/interface/state . Juniper vMX doesn't support gNMI Get RPC, if you plan to test it, use gNMI Subscribe RPC With gNMI Subscribe, specify -e proto flag to enable protobuf encoding. Arista # YANG repo: aristanetworks/yang Arista uses a subset of OpenConfig modules and does not provide IETF modules inside their repo. So make sure you have IETF models available so you can reference it, a openconfig/public is a good candidate. Clone the Arista YANG repo: git clone https://github.com/aristanetworks/yang cd yang Generate path suggestions for all Arista OpenConfig modules: gnmic --file EOS-4.23.2F/openconfig/public/release/models \\ --dir ~/public/third_party/ietf \\ --exclude ietf-interfaces \\ prompt Enumeration suggestions # gnmic flags that can take pre-defined values (enumerations) will get suggestions as well. For example, no need to keep in mind which subscription modes are available, the prompt will hint you: File-path completions # Whenever a user needs to provide a file path in a prompt mode, the filepath suggestions will make the process interactive:","title":"Prompt mode and auto-suggestions"},{"location":"user_guide/prompt_suggestions/#using-the-prompt-interface","text":"Depending on the cursor position in the prompt line, a so-called suggestion box pops up with contextual auto-completions. The user can enter the suggestion box by pressing the TAB key. The \u2191 and \u2193 keys can be used to navigate the suggestion list. Select the suggested menu item with SPACE key or directly commit your command with ENTER , its that easy! The following most-common key bindings will work in the prompt mode: Key combination Description Option/Control + \u2192/\u2190 move cursor a word right/left Control + W delete a word to the left Control + Z delete a path element in the xpath string ( example ) Control + A move cursor to the beginning of a line Control + E move cursor to the end of a line Control + C discard the current line Control + D exit prompt Control + K delete the line after the cursor to the clipboard Control + U delete the line before the cursor to the clipboard Control + L clear screen","title":"Using the prompt interface"},{"location":"user_guide/prompt_suggestions/#commands-and-flags-suggestions","text":"To make gnmic configurable and flexible we introduced a considerable amount of flags and sub-commands. To help the users navigate the sheer selection of gnmic configuration options, the prompt mode will auto-suggest the global flags, sub-commands and local flags of those sub-commands. When the prompt mode is launched, the suggestions will be shown for the top-level commands and all the global flags. Once the sub-command is typed into the terminal, the auto-suggestions will be provided for the commands nested under this command and its local flags. In the following demo we show how the command and flag suggestions work. As the prompt starts, the suggestion box immediately hints what commands and global flags are available for input as well as their description. The user starts with adding the global flags --address, --insecure, --username and then selects the capabilities command and commits it. This results in gNMI Capability RPC execution against a specified target.","title":"Commands and flags suggestions"},{"location":"user_guide/prompt_suggestions/#mixed-mode","text":"Its perfectly fine to specify some global flags outside of the prompt command and add more within the prompt mode. For example, the following is a valid invocation: gnmic --insecure --username admin --password admin --address 10.1.0.11 prompt Here the prompt will start with with the insecure, username, password, address flags set.","title":"Mixed mode"},{"location":"user_guide/prompt_suggestions/#yang-completions","text":"One of the most challenging problems in the network automation field is to process the YANG models and traverse YANG trees to construct the requests used against the network elements. Be it gNMI, NETCONF or RESTCONF a users still needs to have a path pointing to specific YANG-defined node which is targeted by a request. In gNMI paths can be represented in a human readable XPATH-like form - /a/b/c[key=val]/d - and these paths are based on the underlying YANG models. The problem at hand was how to get these paths interactively, or even better - walk the YANG tree from within the CLI and dynamically build the path used in a gNMI RPC? With YANG-completions feature embedded in gnmic what used to be a dream is now a reality \ud83c\udf89 Let us explain what just happened there. In the demonstration above, we called the gnmic with the well-known flags defining the gNMI target ( address , username , password ). But this time we also added a few YANG specific flags ( --file and --dir ) that load the full set of Nokia SR OS YANG models and the 3 rd party models SR OS rely on. gnmic --address 10.1.0.11 --insecure --username admin --password admin \\ --file ~/7x50_YangModels/YANG/nokia-combined \\ --dir ~/7x50_YangModels/YANG \\ prompt In the background gnmic processed these YANG models to build the entire schema tree of the Nokia SR OS state and configuration datastores. With that in-mem stored information, gnmic was able to auto-suggest all the possible YANG paths when the user entered the --path flag which accepts gNMI paths. By using the auto-suggestion hints, a user navigated the /state tree of a router and drilled down to the version-number leaf that, in the end, was retrieved with the gNMI Get RPC. YANG-driven path suggestions gnmic is now capable of reading and processing YANG modules to enable live path auto-suggestions","title":"YANG-completions"},{"location":"user_guide/prompt_suggestions/#yang-processing","text":"For the YANG-completion feature to work its absolutely imperative for gnmic to successfully parse and compile the YANG models. The prompt command leverages the --file and --dir flags to select the YANG models for processing. With the --file flag a user specifies a file path to a YANG file or a directory of them that gnmic will read and process. If it points to a directory it will be visited recursively reading in all *.yang files it finds. The --dir flag also points to a YANG file or a directory and indicates which additional YANG files might be required. For example, if the YANG modules that a user specified with the --file flag import or include modules that were not part of the path specified with --file , they need to be added with the --dir flag. The Examples section provide some good practical examples on how these two flags can be used together to process the YANG models from different vendors.","title":"YANG processing"},{"location":"user_guide/prompt_suggestions/#understanding-path-suggestions","text":"When gnmic provides a user with the path suggestions it does it in a smart and intuitive way. First, it understands in what part of the tree a user currently is and suggests only the next possible elements. Additionally, the suggested next path elements will be augmented with the information extracted from the YANG model, such as: element description, as given in the YANG description statement for the element element configuration state ( rw / ro ), as defined in section 4.2.3 of RFC 7950 . node type: The containers and lists will be denoted with the [+] marker, which means that a user can type / char after them to receive suggestions for the nested elements. the [\u22ef] character belongs to a leaf-list element. an empty space will indicate the leaf element.","title":"Understanding path suggestions"},{"location":"user_guide/prompt_suggestions/#examples","text":"The examples in this section will show how to use the --file and --dir flags of the prompt command with the YANG collections from different vendors and standard bodies.","title":"Examples"},{"location":"user_guide/prompt_suggestions/#nokia-sr-os","text":"YANG repo: nokia/7x50_YangModels Clone the repository with Nokia YANG models and checkout the release of interest: git clone https://github.com/nokia/7x50_YangModels cd 7x50_YangModels git checkout sros_20.7.r2 Start gnmic in prompt mode and read in the nokia-combined YANG modules: gnmic --file YANG/nokia-combined \\ --dir YANG \\ prompt This will enable path auto-suggestions for the entire tree of the Nokia SR OS YANG models. The full command with the gNMI target specified could look like this: gnmic --address 10.1.0.11 --insecure --username admin --password admin \\ prompt \\ --file ~/7x50_YangModels/YANG/nokia-combined \\ --dir ~/7x50_YangModels/YANG","title":"Nokia SR OS"},{"location":"user_guide/prompt_suggestions/#openconfig","text":"YANG repo: openconfig/public Clone the OpenConfig repository: git clone https://github.com/openconfig/public cd public Start gnmic in prompt mode and read in all the modules: gnmic --file release/models \\ --dir third_party \\ --exclude ietf-interfaces \\ prompt Note With OpenConfig models we have to use --exclude flag to exclude ietf-interfaces module from being clashed with OpenConfig interfaces module.","title":"Openconfig"},{"location":"user_guide/prompt_suggestions/#cisco","text":"YANG repo: YangModels/yang Clone the YangModels/yang repo and change into the main directory of the repo: git clone https://github.com/YangModels/yang cd yang/vendor","title":"Cisco"},{"location":"user_guide/prompt_suggestions/#ios-xr","text":"The IOS-XR native YANG models are disaggregated and spread all over the place. Although its technically possible to load them all in one go, this approach will produce a lot of top-level modules making the navigation quite hard. An easier and cleaner approach would be to find the relevant module(s) and load them separately or in small batches. For example here we load BGP config and operational models together: gnmic --file vendor/cisco/xr/721/Cisco-IOS-XR-um-router-bgp-cfg.yang \\ --file vendor/cisco/xr/721/Cisco-IOS-XR-ipv4-bgp-oper.yang \\ --dir standard/ietf \\ prompt Note We needed to include the ietf/ directory by means of the --dir flag, since the Cisco's native modules rely on the IETF modules and these modules are not in the same directory as the BGP modules. The full command that you can against the real Cisco IOS-XR node must have a target defined, the encoding set and origin suggestions enabled. Here is what it can look like: gnmic -a 10.10.30.5:57500 --insecure -e json_ietf -u admin -p Cisco123 \\ prompt \\ --file yang/vendor/cisco/xr/662/Cisco-IOS-XR-ipv4-bgp-cfg.yang \\ --file yang/vendor/cisco/xr/662/Cisco-IOS-XR-ipv4-bgp-oper.yang \\ --dir yang/standard/ietf \\ --suggest-with-origin","title":"IOS-XR"},{"location":"user_guide/prompt_suggestions/#nx-os","text":"Cisco NX-OS native modules, on the other hand, are aggregated in a single file, here is how you can generate the suggestions from it: gnmic --file vendor/cisco/xr/721/Cisco-IOS-XR-um-router-bgp-cfg.yang \\ --dir standard/ietf \\ prompt","title":"NX-OS"},{"location":"user_guide/prompt_suggestions/#juniper","text":"YANG repo: Juniper/yang Clone the Juniper YANG repository and change into the release directory: git clone https://github.com/Juniper/yang cd yang/20.3/20.3R1 Start gnmic and generate path suggestions for the whole configuration tree of Juniper MX: gnmic --file junos/conf --dir common prompt Note Juniper models are constructed in a way that a top-level container appears to be /configuration , that will not work with your gNMI Subscribe RPC. Instead, you should omit this top level container. So, for example, the suggested path /configuration/interfaces/interface/state should become /interfaces/interface/state . Juniper vMX doesn't support gNMI Get RPC, if you plan to test it, use gNMI Subscribe RPC With gNMI Subscribe, specify -e proto flag to enable protobuf encoding.","title":"Juniper"},{"location":"user_guide/prompt_suggestions/#arista","text":"YANG repo: aristanetworks/yang Arista uses a subset of OpenConfig modules and does not provide IETF modules inside their repo. So make sure you have IETF models available so you can reference it, a openconfig/public is a good candidate. Clone the Arista YANG repo: git clone https://github.com/aristanetworks/yang cd yang Generate path suggestions for all Arista OpenConfig modules: gnmic --file EOS-4.23.2F/openconfig/public/release/models \\ --dir ~/public/third_party/ietf \\ --exclude ietf-interfaces \\ prompt","title":"Arista"},{"location":"user_guide/prompt_suggestions/#enumeration-suggestions","text":"gnmic flags that can take pre-defined values (enumerations) will get suggestions as well. For example, no need to keep in mind which subscription modes are available, the prompt will hint you:","title":"Enumeration suggestions"},{"location":"user_guide/prompt_suggestions/#file-path-completions","text":"Whenever a user needs to provide a file path in a prompt mode, the filepath suggestions will make the process interactive:","title":"File-path completions"},{"location":"user_guide/subscriptions/","text":"Defining subscriptions with subscribe command's CLI flags is a quick&easy way to work with gNMI subscriptions. A downside of that approach though is that its not flexible enough. With the multiple subscriptions defined in the configuration file we make a complex task of managing multiple subscriptions for multiple targets easy. The idea behind the multiple subscriptions is to define the subscriptions separately and then bind them to the targets. Defining subscriptions # To define a subscription a user needs to create the subscriptions container in the configuration file: # part of ~/gnmic.yml config file subscriptions : # container for subscriptions port_stats : # a named subscription, a key is a name paths : # list of subscription paths for that named subscription - \"/state/port[port-id=1/1/c1/1]/statistics/out-octets\" - \"/state/port[port-id=1/1/c1/1]/statistics/in-octets\" stream-mode : sample # one of [on-change target-defined sample] sample-interval : 5s encoding : bytes service_state : paths : - \"/state/service/vpls[service-name=*]/oper-state\" - \"/state/service/vprn[service-name=*]/oper-state\" stream-mode : on-change system_facts : paths : - \"/configure/system/name\" - \"/state/system/version\" mode : once Inside that subscriptions container a user defines individual named subscriptions; in the example above two named subscriptions port_stats and service_state were defined. Each subscription is independent and fully configurable. The following list of configuration options is available: prefix target paths models mode stream-mode encoding qos sample-interval heartbeat-interval suppress-redundant updates-only These subscriptions can be used on the cli via the [ --name ] flag of subscribe command: gnmic subscribe --name service_state --name port_stats Or by binding them to different targets, (see next section) Binding subscriptions # Once the subscriptions are defined, they can be flexibly associated with the targets. # part of ~/gnmic.yml config file targets : router1.lab.com : username : admin password : secret subscriptions : - port_stats - service_state router2.lab.com : username : gnmi password : telemetry subscriptions : - service_state The named subscriptions are put under the subscriptions section of a target container. As shown in the example above, it is allowed to add multiple named subscriptions under a single target; in that case each named subscription will result in a separate Subscription Request towards a target. Note If a target is not explicitly associated with any subscription, the client will subscribe to all defined subscriptions in the file. The full configuration with the subscriptions defined and associated with targets will look like this: targets : router1.lab.com : subscriptions : - port_stats - service_state - system_facts router2.lab.com : subscriptions : - service_state - system_facts username : admin password : nokiasr0s insecure : true subscriptions : port_stats : paths : - \"/state/port[port-id=1/1/c1/1]/statistics/out-octets\" - \"/state/port[port-id=1/1/c1/1]/statistics/in-octets\" stream-mode : sample sample-interval : 5s encoding : bytes service_state : paths : - \"/state/service/vpls[service-name=*]/oper-state\" - \"/state/service/vprn[service-name=*]/oper-state\" stream-mode : on-change system_facts : paths : - \"/configure/system/name\" - \"/state/system/version\" mode : once As a result of such configuration the gnmic will set up three gNMI subscriptions to router1 and two other gNMI subscriptions to router2: $ gnmic subscribe gnmic 2020/07/06 22:03:35.579942 target 'router2.lab.com' initialized gnmic 2020/07/06 22:03:35.593082 target 'router1.lab.com' initialized { \"source\" : \"router2.lab.com\" , \"subscription-name\" : \"service_state\" , \"timestamp\" : 1594065869313065895 , \"time\" : \"2020-07-06T22:04:29.313065895+02:00\" , \"prefix\" : \"state/service/vpls[service-name=testvpls]\" , \"updates\" : [ { \"Path\" : \"oper-state\" , \"values\" : { \"oper-state\" : \"down\" } } ] } { \"source\" : \"router1.lab.com\" , \"subscription-name\" : \"service_state\" , \"timestamp\" : 1594065868850351364 , \"time\" : \"2020-07-06T22:04:28.850351364+02:00\" , \"prefix\" : \"state/service/vpls[service-name=test]\" , \"updates\" : [ { \"Path\" : \"oper-state\" , \"values\" : { \"oper-state\" : \"down\" } } ] } { \"source\" : \"router1.lab.com\" , \"subscription-name\" : \"port_stats\" , \"timestamp\" : 1594065873938155916 , \"time\" : \"2020-07-06T22:04:33.938155916+02:00\" , \"prefix\" : \"state/port[port-id=1/1/c1/1]/statistics\" , \"updates\" : [ { \"Path\" : \"in-octets\" , \"values\" : { \"in-octets\" : \"671552\" } } ] } { \"source\" : \"router1.lab.com\" , \"subscription-name\" : \"port_stats\" , \"timestamp\" : 1594065873938043848 , \"time\" : \"2020-07-06T22:04:33.938043848+02:00\" , \"prefix\" : \"state/port[port-id=1/1/c1/1]/statistics\" , \"updates\" : [ { \"Path\" : \"out-octets\" , \"values\" : { \"out-octets\" : \"370930\" } } ] } ^C received sig nal 'i nterru p t '. ter mi nat i n g...","title":"Subscriptions"},{"location":"user_guide/subscriptions/#defining-subscriptions","text":"To define a subscription a user needs to create the subscriptions container in the configuration file: # part of ~/gnmic.yml config file subscriptions : # container for subscriptions port_stats : # a named subscription, a key is a name paths : # list of subscription paths for that named subscription - \"/state/port[port-id=1/1/c1/1]/statistics/out-octets\" - \"/state/port[port-id=1/1/c1/1]/statistics/in-octets\" stream-mode : sample # one of [on-change target-defined sample] sample-interval : 5s encoding : bytes service_state : paths : - \"/state/service/vpls[service-name=*]/oper-state\" - \"/state/service/vprn[service-name=*]/oper-state\" stream-mode : on-change system_facts : paths : - \"/configure/system/name\" - \"/state/system/version\" mode : once Inside that subscriptions container a user defines individual named subscriptions; in the example above two named subscriptions port_stats and service_state were defined. Each subscription is independent and fully configurable. The following list of configuration options is available: prefix target paths models mode stream-mode encoding qos sample-interval heartbeat-interval suppress-redundant updates-only These subscriptions can be used on the cli via the [ --name ] flag of subscribe command: gnmic subscribe --name service_state --name port_stats Or by binding them to different targets, (see next section)","title":"Defining subscriptions"},{"location":"user_guide/subscriptions/#binding-subscriptions","text":"Once the subscriptions are defined, they can be flexibly associated with the targets. # part of ~/gnmic.yml config file targets : router1.lab.com : username : admin password : secret subscriptions : - port_stats - service_state router2.lab.com : username : gnmi password : telemetry subscriptions : - service_state The named subscriptions are put under the subscriptions section of a target container. As shown in the example above, it is allowed to add multiple named subscriptions under a single target; in that case each named subscription will result in a separate Subscription Request towards a target. Note If a target is not explicitly associated with any subscription, the client will subscribe to all defined subscriptions in the file. The full configuration with the subscriptions defined and associated with targets will look like this: targets : router1.lab.com : subscriptions : - port_stats - service_state - system_facts router2.lab.com : subscriptions : - service_state - system_facts username : admin password : nokiasr0s insecure : true subscriptions : port_stats : paths : - \"/state/port[port-id=1/1/c1/1]/statistics/out-octets\" - \"/state/port[port-id=1/1/c1/1]/statistics/in-octets\" stream-mode : sample sample-interval : 5s encoding : bytes service_state : paths : - \"/state/service/vpls[service-name=*]/oper-state\" - \"/state/service/vprn[service-name=*]/oper-state\" stream-mode : on-change system_facts : paths : - \"/configure/system/name\" - \"/state/system/version\" mode : once As a result of such configuration the gnmic will set up three gNMI subscriptions to router1 and two other gNMI subscriptions to router2: $ gnmic subscribe gnmic 2020/07/06 22:03:35.579942 target 'router2.lab.com' initialized gnmic 2020/07/06 22:03:35.593082 target 'router1.lab.com' initialized { \"source\" : \"router2.lab.com\" , \"subscription-name\" : \"service_state\" , \"timestamp\" : 1594065869313065895 , \"time\" : \"2020-07-06T22:04:29.313065895+02:00\" , \"prefix\" : \"state/service/vpls[service-name=testvpls]\" , \"updates\" : [ { \"Path\" : \"oper-state\" , \"values\" : { \"oper-state\" : \"down\" } } ] } { \"source\" : \"router1.lab.com\" , \"subscription-name\" : \"service_state\" , \"timestamp\" : 1594065868850351364 , \"time\" : \"2020-07-06T22:04:28.850351364+02:00\" , \"prefix\" : \"state/service/vpls[service-name=test]\" , \"updates\" : [ { \"Path\" : \"oper-state\" , \"values\" : { \"oper-state\" : \"down\" } } ] } { \"source\" : \"router1.lab.com\" , \"subscription-name\" : \"port_stats\" , \"timestamp\" : 1594065873938155916 , \"time\" : \"2020-07-06T22:04:33.938155916+02:00\" , \"prefix\" : \"state/port[port-id=1/1/c1/1]/statistics\" , \"updates\" : [ { \"Path\" : \"in-octets\" , \"values\" : { \"in-octets\" : \"671552\" } } ] } { \"source\" : \"router1.lab.com\" , \"subscription-name\" : \"port_stats\" , \"timestamp\" : 1594065873938043848 , \"time\" : \"2020-07-06T22:04:33.938043848+02:00\" , \"prefix\" : \"state/port[port-id=1/1/c1/1]/statistics\" , \"updates\" : [ { \"Path\" : \"out-octets\" , \"values\" : { \"out-octets\" : \"370930\" } } ] } ^C received sig nal 'i nterru p t '. ter mi nat i n g...","title":"Binding subscriptions"},{"location":"user_guide/target_loaders/","text":"gnmic supports dynamic loading of gNMI targets from external systems. Note Only one loader is supported at a time Two types of target loaders are supported, from file or from a Consul KV store File target loader # gnmic is able to watch changes happening to a file carrying the gNMI target configuration. A file targets loader can be configured in a couple of ways: using the --targets-file flag: gnmic --targets-file ./targets-config.yaml subscribe using the main configuration file: loader : type : file # path to the file file : ./targets-config.yaml # watch interval at which the file # is read again to determine if a target was added or deleted. interval : 5s The --targets-file flag takes precedence over the loader configuration section. The targets file can be either a YAML or a JSON file (identified by its extension json, yaml or yml), and follows the same format as the main configuration file targets section. See here Examples: YAML 10.10.10.10 : username : admin insecure : true 10.10.10.11 : username : admin 10.10.10.12 : 10.10.10.13 : 10.10.10.14 : JSON { \"10.10.10.10\" : { \"username\" : \"admin\" , \"insecure\" : true }, \"10.10.10.11\" : { \"username\" : \"admin\" , }, \"10.10.10.12\" : {}, \"10.10.10.13\" : {}, \"10.10.10.14\" : {} } Just like the targets in the main configuration file, the missing configuration fields get filled with the global flags, the ENV variables, the config file main section and then the default values. Consul target loader # The consul target loader is basically gnmic watching a KV prefix in a Consul server. The prefix is expected to hold each gNMI target configuration as multiple Key/Values. For example, the below YAML file: 10.10.10.10 : username : admin insecure : true 10.10.10.11 : username : admin 10.10.10.12 : 10.10.10.13 : 10.10.10.14 : is equivalent to the below set of KVs: Key Value gnmic/config/targets/10.10.10.10/username admin gnmic/config/targets/10.10.10.10/insecure true gnmic/config/targets/10.10.10.11/username admin gnmic/config/targets/10.10.10.12 \"\" gnmic/config/targets/10.10.10.13 \"\" gnmic/config/targets/10.10.10.14 \"\" Consul Target loader configuration: loader : type : consul # address of the loader server address : localhost:8500 # Consul Data center, defaults to dc1 datacenter : dc1 # Consul username, to be used as part of HTTP basicAuth username : # Consul password, to be used as part of HTTP basicAuth password : # Consul Token, is used to provide a per-request ACL token which overrides the agent's default token token : # the key prefix to watch for targets configuration, defaults to \"gnmic/config/targets\" key-prefix : gnmic/config/targets","title":"Target loaders"},{"location":"user_guide/target_loaders/#file-target-loader","text":"gnmic is able to watch changes happening to a file carrying the gNMI target configuration. A file targets loader can be configured in a couple of ways: using the --targets-file flag: gnmic --targets-file ./targets-config.yaml subscribe using the main configuration file: loader : type : file # path to the file file : ./targets-config.yaml # watch interval at which the file # is read again to determine if a target was added or deleted. interval : 5s The --targets-file flag takes precedence over the loader configuration section. The targets file can be either a YAML or a JSON file (identified by its extension json, yaml or yml), and follows the same format as the main configuration file targets section. See here Examples: YAML 10.10.10.10 : username : admin insecure : true 10.10.10.11 : username : admin 10.10.10.12 : 10.10.10.13 : 10.10.10.14 : JSON { \"10.10.10.10\" : { \"username\" : \"admin\" , \"insecure\" : true }, \"10.10.10.11\" : { \"username\" : \"admin\" , }, \"10.10.10.12\" : {}, \"10.10.10.13\" : {}, \"10.10.10.14\" : {} } Just like the targets in the main configuration file, the missing configuration fields get filled with the global flags, the ENV variables, the config file main section and then the default values.","title":"File target loader"},{"location":"user_guide/target_loaders/#consul-target-loader","text":"The consul target loader is basically gnmic watching a KV prefix in a Consul server. The prefix is expected to hold each gNMI target configuration as multiple Key/Values. For example, the below YAML file: 10.10.10.10 : username : admin insecure : true 10.10.10.11 : username : admin 10.10.10.12 : 10.10.10.13 : 10.10.10.14 : is equivalent to the below set of KVs: Key Value gnmic/config/targets/10.10.10.10/username admin gnmic/config/targets/10.10.10.10/insecure true gnmic/config/targets/10.10.10.11/username admin gnmic/config/targets/10.10.10.12 \"\" gnmic/config/targets/10.10.10.13 \"\" gnmic/config/targets/10.10.10.14 \"\" Consul Target loader configuration: loader : type : consul # address of the loader server address : localhost:8500 # Consul Data center, defaults to dc1 datacenter : dc1 # Consul username, to be used as part of HTTP basicAuth username : # Consul password, to be used as part of HTTP basicAuth password : # Consul Token, is used to provide a per-request ACL token which overrides the agent's default token token : # the key prefix to watch for targets configuration, defaults to \"gnmic/config/targets\" key-prefix : gnmic/config/targets","title":"Consul target loader"},{"location":"user_guide/targets/","text":"Sometimes it is needed to perform an operation on multiple devices; be it getting the same leaf value from a given set of the network elements or setting a certain configuration element to some value. For cases like that gnmic offers support for multiple targets operations which a user can configure both via CLI flags as well as with the file-based configuration . CLI configuration # Specifying multiple targets in the CLI is as easy as repeating the --address flag. \u276f gnmic -a router1.lab.net:57400 \\ -a router2.lab.net:57400 \\ get --path /configure/system/name File-based configuration # With the file-based configuration a user has two options to specify multiple targets: using address option using targets option address option # With address option the user must provide a list of addresses. In the YAML format that would look like that: address : - \"router1.lab.net:57400\" - \"router2.lab.net:57400\" The limitation this approach has is that it is impossible to set different credentials for the targets, they will essentially share the credentials specified in a file or via flags. target option # With the targets option it is possible to set target specific options (such as credentials, subscriptions, TLS config, outputs), and thus this option is recommended to use: targets : router1.lab.net : timeout : 2s username : r1 password : gnmi_pass router2.lab.net:57000 : username : r2 password : gnmi_pass tls-key : /path/file1 tls-cert : /path/file2 The target address is defined as the key under the targets section of the configuration file. The default port (57400) can be omitted as demonstrated with router1.lab.net target address. Have a look at the file-based targets configuration example to get a glimpse of what it is capable of. The target inherits the globally defined options if the matching options are not set on a target level. For example, if a target doesn't have a username defined, it will use the username value set on a global level. secure/insecure connections # gnmic supports both secure and insecure gRPC connections to the target. insecure connection # Using the --insecure flag it is possible to establish an insecure gRPC connection to the target. gnmic -a router1:57400 \\ --insecure \\ get --path /configure/system/name secure connection # A one way secure connection without target certificate verification can be established using the --skip-verify flag. gnmic -a router1:57400 \\ --skip-verify \\ get --path /configure/system/name Adding target certificate verification can be done using the --tls-ca flag. gnmic -a router1:57400 \\ --tls-ca /path/to/ca/file \\ get --path /configure/system/name A two way secure connection can be established using the --tls-cert --tls-key flags. gnmic -a router1:57400 \\ --tls-cert /path/to/certificate/file \\ --tls-key /path/to/certificate/file \\ get --path /configure/system/name It is also possible to control the negotiated TLS version using the --tls-min-version , --tls-max-version and --tls-version (preferred TLS version) flags. target configuration options # Target supported options: targets : # target address, IP or DNS name. # can include a port number or not, # if a port is not included, the default gRPC port will be added target1 : # target name, will default to address if not specified name : # target address address : # target username username : # target password password : # target RPC timeout timeout : # establish an insecure connection insecure : # path to tls ca file tls-ca : # path to tls certificate tls-cert : # path to tls key tls-key : # max tls version to use during negotiation tls-max-version : # min tls version to use during negotiation tls-min-version : # preferred tls version to use during negotiation tls-version : # do not verify the target certificate when using tls skip-verify : # list of subscription names to establish for this target. # if empty it defaults to all subscriptions defined under # the main level `subscriptions` field subscriptions : # list of output names to which the gnmi data will be written. # if empty if defaults to all outputs defined under # the main level `outputs` field outputs : # number of subscribe responses to keep in buffer before writing # the target outputs buffer-size : # target retry period retry : # list of tags, relevant when clustering is enabled. tags : # list of proto file names to decode protoBytes values proto-files : # list of directories to look for the proto files proto-dirs : # enable grpc gzip compression gzip : Example # Whatever configuration option you choose, the multi-targeted operations will uniformly work across the commands that support them. Consider the get command acting on two routers getting their names: \u276f gnmic -a router1.lab.net:57400 \\ -a router2.lab.net:57400 \\ get --path /configure/system/name [router1.lab.net:57400] { [router1.lab.net:57400] \"source\": \"router1.lab.net:57400\", [router1.lab.net:57400] \"timestamp\": 1593009759618786781, [router1.lab.net:57400] \"time\": \"2020-06-24T16:42:39.618786781+02:00\", [router1.lab.net:57400] \"updates\": [ [router1.lab.net:57400] { [router1.lab.net:57400] \"Path\": \"configure/system/name\", [router1.lab.net:57400] \"values\": { [router1.lab.net:57400] \"configure/system/name\": \"gnmic_r1\" [router1.lab.net:57400] } [router1.lab.net:57400] } [router1.lab.net:57400] ] [router1.lab.net:57400] } [router2.lab.net:57400] { [router2.lab.net:57400] \"source\": \"router2.lab.net:57400\", [router2.lab.net:57400] \"timestamp\": 1593009759748265232, [router2.lab.net:57400] \"time\": \"2020-06-24T16:42:39.748265232+02:00\", [router2.lab.net:57400] \"updates\": [ [router2.lab.net:57400] { [router2.lab.net:57400] \"Path\": \"configure/system/name\", [router2.lab.net:57400] \"values\": { [router2.lab.net:57400] \"configure/system/name\": \"gnmic_r2\" [router2.lab.net:57400] } [router2.lab.net:57400] } [router2.lab.net:57400] ] [router2.lab.net:57400] } Notice how in the output the different gNMI targets are prefixed with the target address to make the output easy to read. If those prefixes are not needed, you can make them disappear with --no-prefix global flag.","title":"Targets"},{"location":"user_guide/targets/#cli-configuration","text":"Specifying multiple targets in the CLI is as easy as repeating the --address flag. \u276f gnmic -a router1.lab.net:57400 \\ -a router2.lab.net:57400 \\ get --path /configure/system/name","title":"CLI configuration"},{"location":"user_guide/targets/#file-based-configuration","text":"With the file-based configuration a user has two options to specify multiple targets: using address option using targets option","title":"File-based configuration"},{"location":"user_guide/targets/#address-option","text":"With address option the user must provide a list of addresses. In the YAML format that would look like that: address : - \"router1.lab.net:57400\" - \"router2.lab.net:57400\" The limitation this approach has is that it is impossible to set different credentials for the targets, they will essentially share the credentials specified in a file or via flags.","title":"address option"},{"location":"user_guide/targets/#target-option","text":"With the targets option it is possible to set target specific options (such as credentials, subscriptions, TLS config, outputs), and thus this option is recommended to use: targets : router1.lab.net : timeout : 2s username : r1 password : gnmi_pass router2.lab.net:57000 : username : r2 password : gnmi_pass tls-key : /path/file1 tls-cert : /path/file2 The target address is defined as the key under the targets section of the configuration file. The default port (57400) can be omitted as demonstrated with router1.lab.net target address. Have a look at the file-based targets configuration example to get a glimpse of what it is capable of. The target inherits the globally defined options if the matching options are not set on a target level. For example, if a target doesn't have a username defined, it will use the username value set on a global level.","title":"target option"},{"location":"user_guide/targets/#secureinsecure-connections","text":"gnmic supports both secure and insecure gRPC connections to the target.","title":"secure/insecure connections"},{"location":"user_guide/targets/#insecure-connection","text":"Using the --insecure flag it is possible to establish an insecure gRPC connection to the target. gnmic -a router1:57400 \\ --insecure \\ get --path /configure/system/name","title":"insecure connection"},{"location":"user_guide/targets/#secure-connection","text":"A one way secure connection without target certificate verification can be established using the --skip-verify flag. gnmic -a router1:57400 \\ --skip-verify \\ get --path /configure/system/name Adding target certificate verification can be done using the --tls-ca flag. gnmic -a router1:57400 \\ --tls-ca /path/to/ca/file \\ get --path /configure/system/name A two way secure connection can be established using the --tls-cert --tls-key flags. gnmic -a router1:57400 \\ --tls-cert /path/to/certificate/file \\ --tls-key /path/to/certificate/file \\ get --path /configure/system/name It is also possible to control the negotiated TLS version using the --tls-min-version , --tls-max-version and --tls-version (preferred TLS version) flags.","title":"secure connection"},{"location":"user_guide/targets/#target-configuration-options","text":"Target supported options: targets : # target address, IP or DNS name. # can include a port number or not, # if a port is not included, the default gRPC port will be added target1 : # target name, will default to address if not specified name : # target address address : # target username username : # target password password : # target RPC timeout timeout : # establish an insecure connection insecure : # path to tls ca file tls-ca : # path to tls certificate tls-cert : # path to tls key tls-key : # max tls version to use during negotiation tls-max-version : # min tls version to use during negotiation tls-min-version : # preferred tls version to use during negotiation tls-version : # do not verify the target certificate when using tls skip-verify : # list of subscription names to establish for this target. # if empty it defaults to all subscriptions defined under # the main level `subscriptions` field subscriptions : # list of output names to which the gnmi data will be written. # if empty if defaults to all outputs defined under # the main level `outputs` field outputs : # number of subscribe responses to keep in buffer before writing # the target outputs buffer-size : # target retry period retry : # list of tags, relevant when clustering is enabled. tags : # list of proto file names to decode protoBytes values proto-files : # list of directories to look for the proto files proto-dirs : # enable grpc gzip compression gzip :","title":"target configuration options"},{"location":"user_guide/targets/#example","text":"Whatever configuration option you choose, the multi-targeted operations will uniformly work across the commands that support them. Consider the get command acting on two routers getting their names: \u276f gnmic -a router1.lab.net:57400 \\ -a router2.lab.net:57400 \\ get --path /configure/system/name [router1.lab.net:57400] { [router1.lab.net:57400] \"source\": \"router1.lab.net:57400\", [router1.lab.net:57400] \"timestamp\": 1593009759618786781, [router1.lab.net:57400] \"time\": \"2020-06-24T16:42:39.618786781+02:00\", [router1.lab.net:57400] \"updates\": [ [router1.lab.net:57400] { [router1.lab.net:57400] \"Path\": \"configure/system/name\", [router1.lab.net:57400] \"values\": { [router1.lab.net:57400] \"configure/system/name\": \"gnmic_r1\" [router1.lab.net:57400] } [router1.lab.net:57400] } [router1.lab.net:57400] ] [router1.lab.net:57400] } [router2.lab.net:57400] { [router2.lab.net:57400] \"source\": \"router2.lab.net:57400\", [router2.lab.net:57400] \"timestamp\": 1593009759748265232, [router2.lab.net:57400] \"time\": \"2020-06-24T16:42:39.748265232+02:00\", [router2.lab.net:57400] \"updates\": [ [router2.lab.net:57400] { [router2.lab.net:57400] \"Path\": \"configure/system/name\", [router2.lab.net:57400] \"values\": { [router2.lab.net:57400] \"configure/system/name\": \"gnmic_r2\" [router2.lab.net:57400] } [router2.lab.net:57400] } [router2.lab.net:57400] ] [router2.lab.net:57400] } Notice how in the output the different gNMI targets are prefixed with the target address to make the output easy to read. If those prefixes are not needed, you can make them disappear with --no-prefix global flag.","title":"Example"},{"location":"user_guide/api/api_intro/","text":"A limited set of REST endpoints are supported, these are mainly used to allow for a clustered deployment for multiple gnmic instances. The API can be used to automate (to a certain extent) the targets configuration loading and starting/stopping subscriptions. Enabling the API server can be done via a command line flag: gnmic --config gnmic.yaml subscribe --api \":7890\" via ENV variable: GNMIC_API=':7890' Or via file configuration, by adding the below line to the config file: api : \":7890\" API Endpoints # Configuration Targets","title":"Introduction"},{"location":"user_guide/api/api_intro/#api-endpoints","text":"Configuration Targets","title":"API Endpoints"},{"location":"user_guide/api/configuration/","text":"/config # /config # GET /config # Request all gnmic configuration Returns the whole configuration as json Request curl --request GET gnmic-api-address:port/config 200 OK { \"username\" : \"admin\" , \"password\" : \"admin\" , \"port\" : \"57400\" , \"encoding\" : \"json_ietf\" , \"insecure\" : true , \"timeout\" : 10000000000 , \"log\" : true , \"max-msg-size\" : 536870912 , \"prometheus-address\" : \":8989\" , \"retry\" : 10000000000 , \"api\" : \":7890\" , \"get-type\" : \"ALL\" , \"set-delimiter\" : \":::\" , \"subscribe-mode\" : \"stream\" , \"subscribe-stream-mode\" : \"target-defined\" , \"subscribe-cluster-name\" : \"default-cluster\" , \"subscribe-lock-retry\" : 5000000000 , \"path-path-type\" : \"xpath\" , \"prompt-max-suggestions\" : 10 , \"prompt-prefix-color\" : \"dark_blue\" , \"prompt-suggestions-bg-color\" : \"dark_blue\" , \"prompt-description-bg-color\" : \"dark_gray\" , \"targets\" : { \"192.168.1.131:57400\" : { \"name\" : \"192.168.1.131:57400\" , \"address\" : \"192.168.1.131:57400\" , \"username\" : \"admin\" , \"password\" : \"admin\" , \"timeout\" : 10000000000 , \"insecure\" : true , \"skip-verify\" : false , \"buffer-size\" : 1000 , \"retry-timer\" : 10000000000 }, \"192.168.1.132:57400\" : { \"name\" : \"192.168.1.132:57400\" , \"address\" : \"192.168.1.131:57400\" , \"username\" : \"admin\" , \"password\" : \"admin\" , \"timeout\" : 10000000000 , \"insecure\" : true , \"skip-verify\" : false , \"buffer-size\" : 1000 , \"retry-timer\" : 10000000000 } }, \"subscriptions\" : { \"sub1\" : { \"name\" : \"sub1\" , \"paths\" : [ \"/interface/statistics\" ], \"mode\" : \"stream\" , \"stream-mode\" : \"sample\" , \"encoding\" : \"json_ietf\" , \"sample-interval\" : 1000000000 } }, \"Outputs\" : { \"output2\" : { \"address\" : \"192.168.1.131:4222\" , \"format\" : \"event\" , \"subject\" : \"telemetry\" , \"type\" : \"nats\" , \"write-timeout\" : \"10s\" } }, \"inputs\" : {}, \"processors\" : {}, \"clustering\" : { \"cluster-name\" : \"cluster1\" , \"instance-name\" : \"gnmic1\" , \"service-address\" : \"gnmic1\" , \"services-watch-timer\" : 60000000000 , \"targets-watch-timer\" : 5000000000 , \"leader-wait-timer\" : 5000000000 , \"locker\" : { \"address\" : \"consul-agent:8500\" , \"type\" : \"consul\" } } } 500 Internal Server Error { \"errors\" : [ \"Error Text\" ] } /config/targets # GET /config/targets # Request all targets configuration returns the targets configuration as json Request curl --request GET gnmic-api-address:port/config/targets 200 OK { \"192.168.1.131:57400\" : { \"name\" : \"192.168.1.131:57400\" , \"address\" : \"192.168.1.131:57400\" , \"username\" : \"admin\" , \"password\" : \"admin\" , \"timeout\" : 10000000000 , \"insecure\" : true , \"skip-verify\" : false , \"buffer-size\" : 1000 , \"retry-timer\" : 10000000000 }, \"192.168.1.132:57400\" : { \"name\" : \"192.168.1.132:57400\" , \"address\" : \"192.168.1.131:57400\" , \"username\" : \"admin\" , \"password\" : \"admin\" , \"timeout\" : 10000000000 , \"insecure\" : true , \"skip-verify\" : false , \"buffer-size\" : 1000 , \"retry-timer\" : 10000000000 } } 404 Not found { \"errors\" : [ \"no targets found\" , ] } 500 Internal Server Error { \"errors\" : [ \"Error Text\" ] } GET /config/targets/{id} # Request a single target configuration Returns a single target configuration as json, where {id} is the target ID Request curl --request GET gnmic-api-address:port/config/targets/192.168.1.131:57400 200 OK { \"name\" : \"192.168.1.131:57400\" , \"address\" : \"192.168.1.131:57400\" , \"username\" : \"admin\" , \"password\" : \"admin\" , \"timeout\" : 10000000000 , \"insecure\" : true , \"skip-verify\" : false , \"buffer-size\" : 1000 , \"retry-timer\" : 10000000000 } 404 Not found { \"errors\" : [ \"target $target not found\" , ] } 500 Internal Server Error { \"errors\" : [ \"Error Text\" ] } POST /config/targets # Add a new target to gnmic configuration Expected request body is a single target config as json Returns an empty body if successful. Request curl --request POST -H \"Content-Type: application/json\" \\ -d '{\"address\": \"10.10.10.10:57400\", \"username\": \"admin\", \"password\": \"admin\", \"insecure\": true}' \\ gnmic-api-address:port/config/targets 200 OK 400 Bad Request 500 Internal Server Error { \"errors\" : [ \"Error Text\" ] } DELETE /config/targets/{id} # Deletes a target {id} configuration, all active subscriptions are terminated. Returns an empty body Request curl --request DELETE gnmic-api-address:port/config/targets/192.168.1.131:57400 200 OK /config/subscriptions # GET /config/subscriptions # Request all the configured subscriptions. Returns the subscriptions configuration as json /config/outputs # GET /config/outputs # Request all the configured outputs. Returns the outputs configuration as json /config/inputs # GET /config/inputs # Request all the configured inputs. Returns the outputs configuration as json /config/processors # GET /config/processors # Request all the configured processors. Returns the processors configuration as json /config/clustering # GET /config/clustering # Request the clustering configuration. Returns the clustering configuration as json","title":"Configuration"},{"location":"user_guide/api/configuration/#config","text":"","title":"/config"},{"location":"user_guide/api/configuration/#config_1","text":"","title":"/config"},{"location":"user_guide/api/configuration/#get-config","text":"Request all gnmic configuration Returns the whole configuration as json Request curl --request GET gnmic-api-address:port/config 200 OK { \"username\" : \"admin\" , \"password\" : \"admin\" , \"port\" : \"57400\" , \"encoding\" : \"json_ietf\" , \"insecure\" : true , \"timeout\" : 10000000000 , \"log\" : true , \"max-msg-size\" : 536870912 , \"prometheus-address\" : \":8989\" , \"retry\" : 10000000000 , \"api\" : \":7890\" , \"get-type\" : \"ALL\" , \"set-delimiter\" : \":::\" , \"subscribe-mode\" : \"stream\" , \"subscribe-stream-mode\" : \"target-defined\" , \"subscribe-cluster-name\" : \"default-cluster\" , \"subscribe-lock-retry\" : 5000000000 , \"path-path-type\" : \"xpath\" , \"prompt-max-suggestions\" : 10 , \"prompt-prefix-color\" : \"dark_blue\" , \"prompt-suggestions-bg-color\" : \"dark_blue\" , \"prompt-description-bg-color\" : \"dark_gray\" , \"targets\" : { \"192.168.1.131:57400\" : { \"name\" : \"192.168.1.131:57400\" , \"address\" : \"192.168.1.131:57400\" , \"username\" : \"admin\" , \"password\" : \"admin\" , \"timeout\" : 10000000000 , \"insecure\" : true , \"skip-verify\" : false , \"buffer-size\" : 1000 , \"retry-timer\" : 10000000000 }, \"192.168.1.132:57400\" : { \"name\" : \"192.168.1.132:57400\" , \"address\" : \"192.168.1.131:57400\" , \"username\" : \"admin\" , \"password\" : \"admin\" , \"timeout\" : 10000000000 , \"insecure\" : true , \"skip-verify\" : false , \"buffer-size\" : 1000 , \"retry-timer\" : 10000000000 } }, \"subscriptions\" : { \"sub1\" : { \"name\" : \"sub1\" , \"paths\" : [ \"/interface/statistics\" ], \"mode\" : \"stream\" , \"stream-mode\" : \"sample\" , \"encoding\" : \"json_ietf\" , \"sample-interval\" : 1000000000 } }, \"Outputs\" : { \"output2\" : { \"address\" : \"192.168.1.131:4222\" , \"format\" : \"event\" , \"subject\" : \"telemetry\" , \"type\" : \"nats\" , \"write-timeout\" : \"10s\" } }, \"inputs\" : {}, \"processors\" : {}, \"clustering\" : { \"cluster-name\" : \"cluster1\" , \"instance-name\" : \"gnmic1\" , \"service-address\" : \"gnmic1\" , \"services-watch-timer\" : 60000000000 , \"targets-watch-timer\" : 5000000000 , \"leader-wait-timer\" : 5000000000 , \"locker\" : { \"address\" : \"consul-agent:8500\" , \"type\" : \"consul\" } } } 500 Internal Server Error { \"errors\" : [ \"Error Text\" ] }","title":"GET /config"},{"location":"user_guide/api/configuration/#configtargets","text":"","title":"/config/targets"},{"location":"user_guide/api/configuration/#get-configtargets","text":"Request all targets configuration returns the targets configuration as json Request curl --request GET gnmic-api-address:port/config/targets 200 OK { \"192.168.1.131:57400\" : { \"name\" : \"192.168.1.131:57400\" , \"address\" : \"192.168.1.131:57400\" , \"username\" : \"admin\" , \"password\" : \"admin\" , \"timeout\" : 10000000000 , \"insecure\" : true , \"skip-verify\" : false , \"buffer-size\" : 1000 , \"retry-timer\" : 10000000000 }, \"192.168.1.132:57400\" : { \"name\" : \"192.168.1.132:57400\" , \"address\" : \"192.168.1.131:57400\" , \"username\" : \"admin\" , \"password\" : \"admin\" , \"timeout\" : 10000000000 , \"insecure\" : true , \"skip-verify\" : false , \"buffer-size\" : 1000 , \"retry-timer\" : 10000000000 } } 404 Not found { \"errors\" : [ \"no targets found\" , ] } 500 Internal Server Error { \"errors\" : [ \"Error Text\" ] }","title":"GET /config/targets"},{"location":"user_guide/api/configuration/#get-configtargetsid","text":"Request a single target configuration Returns a single target configuration as json, where {id} is the target ID Request curl --request GET gnmic-api-address:port/config/targets/192.168.1.131:57400 200 OK { \"name\" : \"192.168.1.131:57400\" , \"address\" : \"192.168.1.131:57400\" , \"username\" : \"admin\" , \"password\" : \"admin\" , \"timeout\" : 10000000000 , \"insecure\" : true , \"skip-verify\" : false , \"buffer-size\" : 1000 , \"retry-timer\" : 10000000000 } 404 Not found { \"errors\" : [ \"target $target not found\" , ] } 500 Internal Server Error { \"errors\" : [ \"Error Text\" ] }","title":"GET /config/targets/{id}"},{"location":"user_guide/api/configuration/#post-configtargets","text":"Add a new target to gnmic configuration Expected request body is a single target config as json Returns an empty body if successful. Request curl --request POST -H \"Content-Type: application/json\" \\ -d '{\"address\": \"10.10.10.10:57400\", \"username\": \"admin\", \"password\": \"admin\", \"insecure\": true}' \\ gnmic-api-address:port/config/targets 200 OK 400 Bad Request 500 Internal Server Error { \"errors\" : [ \"Error Text\" ] }","title":"POST /config/targets"},{"location":"user_guide/api/configuration/#delete-configtargetsid","text":"Deletes a target {id} configuration, all active subscriptions are terminated. Returns an empty body Request curl --request DELETE gnmic-api-address:port/config/targets/192.168.1.131:57400 200 OK","title":"DELETE /config/targets/{id}"},{"location":"user_guide/api/configuration/#configsubscriptions","text":"","title":"/config/subscriptions"},{"location":"user_guide/api/configuration/#get-configsubscriptions","text":"Request all the configured subscriptions. Returns the subscriptions configuration as json","title":"GET /config/subscriptions"},{"location":"user_guide/api/configuration/#configoutputs","text":"","title":"/config/outputs"},{"location":"user_guide/api/configuration/#get-configoutputs","text":"Request all the configured outputs. Returns the outputs configuration as json","title":"GET /config/outputs"},{"location":"user_guide/api/configuration/#configinputs","text":"","title":"/config/inputs"},{"location":"user_guide/api/configuration/#get-configinputs","text":"Request all the configured inputs. Returns the outputs configuration as json","title":"GET /config/inputs"},{"location":"user_guide/api/configuration/#configprocessors","text":"","title":"/config/processors"},{"location":"user_guide/api/configuration/#get-configprocessors","text":"Request all the configured processors. Returns the processors configuration as json","title":"GET /config/processors"},{"location":"user_guide/api/configuration/#configclustering","text":"","title":"/config/clustering"},{"location":"user_guide/api/configuration/#get-configclustering","text":"Request the clustering configuration. Returns the clustering configuration as json","title":"GET /config/clustering"},{"location":"user_guide/api/targets/","text":"GET /targets # Request all active targets details. Returns all active targets as json Request curl --request GET gnmic-api-address:port/targets 200 OK { \"192.168.1.131:57400\" : { \"config\" : { \"name\" : \"192.168.1.131:57400\" , \"address\" : \"192.168.1.131:57400\" , \"username\" : \"admin\" , \"password\" : \"admin\" , \"timeout\" : 10000000000 , \"insecure\" : true , \"skip-verify\" : false , \"buffer-size\" : 1000 , \"retry-timer\" : 10000000000 }, \"subscriptions\" : { \"sub1\" : { \"name\" : \"sub1\" , \"paths\" : [ \"/interface/statistics\" ], \"mode\" : \"stream\" , \"stream-mode\" : \"sample\" , \"encoding\" : \"json_ietf\" , \"sample-interval\" : 1000000000 } } }, \"192.168.1.131:57401\" : { \"config\" : { \"name\" : \"192.168.1.131:57401\" , \"address\" : \"192.168.1.131:57401\" , \"username\" : \"admin\" , \"password\" : \"admin\" , \"timeout\" : 10000000000 , \"insecure\" : true , \"skip-verify\" : false , \"buffer-size\" : 1000 , \"retry-timer\" : 10000000000 }, \"subscriptions\" : { \"sub1\" : { \"name\" : \"sub1\" , \"paths\" : [ \"/interface/statistics\" ], \"mode\" : \"stream\" , \"stream-mode\" : \"sample\" , \"encoding\" : \"json_ietf\" , \"sample-interval\" : 1000000000 } } } } 404 Not found { \"errors\" : [ \"no targets found\" ] } 500 Internal Server Error { \"errors\" : [ \"Error Text\" ] } GET /targets/{id} # Query a single target details, if active. Returns a single target if active as json, where {id} is the target ID Request curl --request GET gnmic-api-address:port/targets/192.168.1.131:57400 200 OK { \"config\" : { \"name\" : \"192.168.1.131:57400\" , \"address\" : \"192.168.1.131:57400\" , \"username\" : \"admin\" , \"password\" : \"admin\" , \"timeout\" : 10000000000 , \"insecure\" : true , \"skip-verify\" : false , \"buffer-size\" : 1000 , \"retry-timer\" : 10000000000 }, \"subscriptions\" : { \"sub1\" : { \"name\" : \"sub1\" , \"paths\" : [ \"/interface/statistics\" ], \"mode\" : \"stream\" , \"stream-mode\" : \"sample\" , \"encoding\" : \"json_ietf\" , \"sample-interval\" : 1000000000 } } } 404 Not found { \"errors\" : [ \"no targets found\" ] } 500 Internal Server Error { \"errors\" : [ \"Error Text\" ] } POST /targets/{id} # Starts a single target subscriptions, where {id} is the target ID Returns an empty body if successful. Request curl --request POST gnmic-api-address:port/targets/192.168.1.131:57400 200 OK 404 Not found { \"errors\" : [ \"target $target not found\" ] } 500 Internal Server Error { \"errors\" : [ \"Error Text\" ] } DELETE /targets/{id} # Stops a single target active subscriptions, where {id} is the target ID Returns an empty body if successful. Request curl --request DELETE gnmic-api-address:port/targets/192.168.1.131:57400 200 OK 404 Not found { \"errors\" : [ \"target $target not found\" ] } 500 Internal Server Error { \"errors\" : [ \"Error Text\" ] }","title":"Targets"},{"location":"user_guide/api/targets/#get-targets","text":"Request all active targets details. Returns all active targets as json Request curl --request GET gnmic-api-address:port/targets 200 OK { \"192.168.1.131:57400\" : { \"config\" : { \"name\" : \"192.168.1.131:57400\" , \"address\" : \"192.168.1.131:57400\" , \"username\" : \"admin\" , \"password\" : \"admin\" , \"timeout\" : 10000000000 , \"insecure\" : true , \"skip-verify\" : false , \"buffer-size\" : 1000 , \"retry-timer\" : 10000000000 }, \"subscriptions\" : { \"sub1\" : { \"name\" : \"sub1\" , \"paths\" : [ \"/interface/statistics\" ], \"mode\" : \"stream\" , \"stream-mode\" : \"sample\" , \"encoding\" : \"json_ietf\" , \"sample-interval\" : 1000000000 } } }, \"192.168.1.131:57401\" : { \"config\" : { \"name\" : \"192.168.1.131:57401\" , \"address\" : \"192.168.1.131:57401\" , \"username\" : \"admin\" , \"password\" : \"admin\" , \"timeout\" : 10000000000 , \"insecure\" : true , \"skip-verify\" : false , \"buffer-size\" : 1000 , \"retry-timer\" : 10000000000 }, \"subscriptions\" : { \"sub1\" : { \"name\" : \"sub1\" , \"paths\" : [ \"/interface/statistics\" ], \"mode\" : \"stream\" , \"stream-mode\" : \"sample\" , \"encoding\" : \"json_ietf\" , \"sample-interval\" : 1000000000 } } } } 404 Not found { \"errors\" : [ \"no targets found\" ] } 500 Internal Server Error { \"errors\" : [ \"Error Text\" ] }","title":"GET /targets"},{"location":"user_guide/api/targets/#get-targetsid","text":"Query a single target details, if active. Returns a single target if active as json, where {id} is the target ID Request curl --request GET gnmic-api-address:port/targets/192.168.1.131:57400 200 OK { \"config\" : { \"name\" : \"192.168.1.131:57400\" , \"address\" : \"192.168.1.131:57400\" , \"username\" : \"admin\" , \"password\" : \"admin\" , \"timeout\" : 10000000000 , \"insecure\" : true , \"skip-verify\" : false , \"buffer-size\" : 1000 , \"retry-timer\" : 10000000000 }, \"subscriptions\" : { \"sub1\" : { \"name\" : \"sub1\" , \"paths\" : [ \"/interface/statistics\" ], \"mode\" : \"stream\" , \"stream-mode\" : \"sample\" , \"encoding\" : \"json_ietf\" , \"sample-interval\" : 1000000000 } } } 404 Not found { \"errors\" : [ \"no targets found\" ] } 500 Internal Server Error { \"errors\" : [ \"Error Text\" ] }","title":"GET /targets/{id}"},{"location":"user_guide/api/targets/#post-targetsid","text":"Starts a single target subscriptions, where {id} is the target ID Returns an empty body if successful. Request curl --request POST gnmic-api-address:port/targets/192.168.1.131:57400 200 OK 404 Not found { \"errors\" : [ \"target $target not found\" ] } 500 Internal Server Error { \"errors\" : [ \"Error Text\" ] }","title":"POST /targets/{id}"},{"location":"user_guide/api/targets/#delete-targetsid","text":"Stops a single target active subscriptions, where {id} is the target ID Returns an empty body if successful. Request curl --request DELETE gnmic-api-address:port/targets/192.168.1.131:57400 200 OK 404 Not found { \"errors\" : [ \"target $target not found\" ] } 500 Internal Server Error { \"errors\" : [ \"Error Text\" ] }","title":"DELETE /targets/{id}"},{"location":"user_guide/event_processors/event_add_tag/","text":"The event-add-tag processor, adds a set of tags to an event message if one of the configured regular expressions in the values, value names, tags or tag names sections matches. It is possible to overwrite a tag if it's name already exists. processors : # processor name sample-processor : # processor type event-add-tag : # jq expression, if evaluated to true, the tags are added condition : # list of regular expressions to be matched against the tags names, if matched, the tags are added tag-names : # list of regular expressions to be matched against the tags values, if matched, the tags are added tags : # list of regular expressions to be matched against the values names, if matched, the tags are added value-names : # list of regular expressions to be matched against the values, if matched, the tags are added values : # boolean, if true tags are over-written with the added ones if they already exist. overwrite : # map of tags to be added add : tag_name : tag_value Examples # processors : # processor name sample-processor : # processor type event-add-tag : value-names : - \".\" add : tag_name : tag_value Event format before { \"name\" : \"sub1\" , \"timestamp\" : 1607678293684962443 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.20.20.5:57400\" }, \"values\" : { \"Carrier_Transitions\" : 1 , \"In_Broadcast_Packets\" : 448 , \"In_Error_Packets\" : 0 , \"In_Fcs_Error_Packets\" : 0 , \"In_Multicast_Packets\" : 47578 , \"In_Octets\" : 15557349 , \"In_Unicast_Packets\" : 6482 , \"Out_Broadcast_Packets\" : 110 , \"Out_Error_Packets\" : 0 , \"Out_Multicast_Packets\" : 10 , \"Out_Octets\" : 464766 } } Event format after { \"name\" : \"sub1\" , \"timestamp\" : 1607678293684962443 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.20.20.5:57400\" , \"tag_name\" : \"tag_value\" }, \"values\" : { \"Carrier_Transitions\" : 1 , \"In_Broadcast_Packets\" : 448 , \"In_Error_Packets\" : 0 , \"In_Fcs_Error_Packets\" : 0 , \"In_Multicast_Packets\" : 47578 , \"In_Octets\" : 15557349 , \"In_Unicast_Packets\" : 6482 , \"Out_Broadcast_Packets\" : 110 , \"Out_Error_Packets\" : 0 , \"Out_Multicast_Packets\" : 10 , \"Out_Octets\" : 464766 } }","title":"Add Tag"},{"location":"user_guide/event_processors/event_add_tag/#examples","text":"processors : # processor name sample-processor : # processor type event-add-tag : value-names : - \".\" add : tag_name : tag_value Event format before { \"name\" : \"sub1\" , \"timestamp\" : 1607678293684962443 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.20.20.5:57400\" }, \"values\" : { \"Carrier_Transitions\" : 1 , \"In_Broadcast_Packets\" : 448 , \"In_Error_Packets\" : 0 , \"In_Fcs_Error_Packets\" : 0 , \"In_Multicast_Packets\" : 47578 , \"In_Octets\" : 15557349 , \"In_Unicast_Packets\" : 6482 , \"Out_Broadcast_Packets\" : 110 , \"Out_Error_Packets\" : 0 , \"Out_Multicast_Packets\" : 10 , \"Out_Octets\" : 464766 } } Event format after { \"name\" : \"sub1\" , \"timestamp\" : 1607678293684962443 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.20.20.5:57400\" , \"tag_name\" : \"tag_value\" }, \"values\" : { \"Carrier_Transitions\" : 1 , \"In_Broadcast_Packets\" : 448 , \"In_Error_Packets\" : 0 , \"In_Fcs_Error_Packets\" : 0 , \"In_Multicast_Packets\" : 47578 , \"In_Octets\" : 15557349 , \"In_Unicast_Packets\" : 6482 , \"Out_Broadcast_Packets\" : 110 , \"Out_Error_Packets\" : 0 , \"Out_Multicast_Packets\" : 10 , \"Out_Octets\" : 464766 } }","title":"Examples"},{"location":"user_guide/event_processors/event_allow/","text":"The event-allow processor, allows only messages matching the configured condition or one of the regular expressions under tags , tag-names , values or value-names . Non matching messages are dropped. processors : # processor name sample-processor : # processor type event-allow : # jq expression, if evaluated to true, the message is allowed condition : # list of regular expressions to be matched against the tags names, # if matched, the message is allowed tag-names : # list of regular expressions to be matched against the tags values, # if matched, the message is allowed tags : # list of regular expressions to be matched against the values names, # if matched, the message is allowed value-names : # list of regular expressions to be matched against the values, # if matched, the message is allowed values : Examples # processors : # processor name allow-processor : # processor type event-allow : condition : \".tags.interface_name == 1/1/1\" Event format before [ { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"/srl_nokia-interfaces:interface/statistics/carrier-transitions\" : \"1\" , \"/srl_nokia-interfaces:interface/statistics/in-broadcast-packets\" : \"3797\" , \"/srl_nokia-interfaces:interface/statistics/in-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-fcs-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-multicast-packets\" : \"288033\" , \"/srl_nokia-interfaces:interface/statistics/in-octets\" : \"65382630\" , \"/srl_nokia-interfaces:interface/statistics/in-unicast-packets\" : \"107154\" , \"/srl_nokia-interfaces:interface/statistics/out-broadcast-packets\" : \"614\" , \"/srl_nokia-interfaces:interface/statistics/out-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/out-multicast-packets\" : \"11\" , \"/srl_nokia-interfaces:interface/statistics/out-octets\" : \"64721394\" , \"/srl_nokia-interfaces:interface/statistics/out-unicast-packets\" : \"105876\" } }, { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"1/1/1\" , \"source\" : \"172.23.23.3:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"/srl_nokia-interfaces:interface/statistics/carrier-transitions\" : \"1\" , \"/srl_nokia-interfaces:interface/statistics/in-broadcast-packets\" : \"3797\" , \"/srl_nokia-interfaces:interface/statistics/in-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-fcs-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-multicast-packets\" : \"288033\" , \"/srl_nokia-interfaces:interface/statistics/in-octets\" : \"65382630\" , \"/srl_nokia-interfaces:interface/statistics/in-unicast-packets\" : \"107154\" , \"/srl_nokia-interfaces:interface/statistics/out-broadcast-packets\" : \"614\" , \"/srl_nokia-interfaces:interface/statistics/out-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/out-multicast-packets\" : \"11\" , \"/srl_nokia-interfaces:interface/statistics/out-octets\" : \"64721394\" , \"/srl_nokia-interfaces:interface/statistics/out-unicast-packets\" : \"105876\" } } ] Event format after [ { }, { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"1/1/1\" , \"source\" : \"172.23.23.3:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"/srl_nokia-interfaces:interface/statistics/carrier-transitions\" : \"1\" , \"/srl_nokia-interfaces:interface/statistics/in-broadcast-packets\" : \"3797\" , \"/srl_nokia-interfaces:interface/statistics/in-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-fcs-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-multicast-packets\" : \"288033\" , \"/srl_nokia-interfaces:interface/statistics/in-octets\" : \"65382630\" , \"/srl_nokia-interfaces:interface/statistics/in-unicast-packets\" : \"107154\" , \"/srl_nokia-interfaces:interface/statistics/out-broadcast-packets\" : \"614\" , \"/srl_nokia-interfaces:interface/statistics/out-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/out-multicast-packets\" : \"11\" , \"/srl_nokia-interfaces:interface/statistics/out-octets\" : \"64721394\" , \"/srl_nokia-interfaces:interface/statistics/out-unicast-packets\" : \"105876\" } } ]","title":"Allow"},{"location":"user_guide/event_processors/event_allow/#examples","text":"processors : # processor name allow-processor : # processor type event-allow : condition : \".tags.interface_name == 1/1/1\" Event format before [ { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"/srl_nokia-interfaces:interface/statistics/carrier-transitions\" : \"1\" , \"/srl_nokia-interfaces:interface/statistics/in-broadcast-packets\" : \"3797\" , \"/srl_nokia-interfaces:interface/statistics/in-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-fcs-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-multicast-packets\" : \"288033\" , \"/srl_nokia-interfaces:interface/statistics/in-octets\" : \"65382630\" , \"/srl_nokia-interfaces:interface/statistics/in-unicast-packets\" : \"107154\" , \"/srl_nokia-interfaces:interface/statistics/out-broadcast-packets\" : \"614\" , \"/srl_nokia-interfaces:interface/statistics/out-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/out-multicast-packets\" : \"11\" , \"/srl_nokia-interfaces:interface/statistics/out-octets\" : \"64721394\" , \"/srl_nokia-interfaces:interface/statistics/out-unicast-packets\" : \"105876\" } }, { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"1/1/1\" , \"source\" : \"172.23.23.3:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"/srl_nokia-interfaces:interface/statistics/carrier-transitions\" : \"1\" , \"/srl_nokia-interfaces:interface/statistics/in-broadcast-packets\" : \"3797\" , \"/srl_nokia-interfaces:interface/statistics/in-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-fcs-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-multicast-packets\" : \"288033\" , \"/srl_nokia-interfaces:interface/statistics/in-octets\" : \"65382630\" , \"/srl_nokia-interfaces:interface/statistics/in-unicast-packets\" : \"107154\" , \"/srl_nokia-interfaces:interface/statistics/out-broadcast-packets\" : \"614\" , \"/srl_nokia-interfaces:interface/statistics/out-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/out-multicast-packets\" : \"11\" , \"/srl_nokia-interfaces:interface/statistics/out-octets\" : \"64721394\" , \"/srl_nokia-interfaces:interface/statistics/out-unicast-packets\" : \"105876\" } } ] Event format after [ { }, { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"1/1/1\" , \"source\" : \"172.23.23.3:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"/srl_nokia-interfaces:interface/statistics/carrier-transitions\" : \"1\" , \"/srl_nokia-interfaces:interface/statistics/in-broadcast-packets\" : \"3797\" , \"/srl_nokia-interfaces:interface/statistics/in-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-fcs-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-multicast-packets\" : \"288033\" , \"/srl_nokia-interfaces:interface/statistics/in-octets\" : \"65382630\" , \"/srl_nokia-interfaces:interface/statistics/in-unicast-packets\" : \"107154\" , \"/srl_nokia-interfaces:interface/statistics/out-broadcast-packets\" : \"614\" , \"/srl_nokia-interfaces:interface/statistics/out-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/out-multicast-packets\" : \"11\" , \"/srl_nokia-interfaces:interface/statistics/out-octets\" : \"64721394\" , \"/srl_nokia-interfaces:interface/statistics/out-unicast-packets\" : \"105876\" } } ]","title":"Examples"},{"location":"user_guide/event_processors/event_convert/","text":"The event-convert processor, converts the values matching one of the regular expressions to a specific type: uint , int , string , float Examples # processors : # processor name convert-int-processor : # processor type event-convert : # list of regex to be matched with the values names value-names : - \".*octets$\" # the desired value type, one of int, uint, string, float type : int Event format before { \"name\" : \"default\" , \"timestamp\" : 1607290633806716620 , \"tags\" : { \"port_port-id\" : \"A/1\" , \"source\" : \"172.17.0.100:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"/state/port/ethernet/statistics/in-octets\" : \"7753940\" } } Event format after { \"name\" : \"default\" , \"timestamp\" : 1607290633806716620 , \"tags\" : { \"port_port-id\" : \"A/1\" , \"source\" : \"172.17.0.100:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"/state/port/ethernet/statistics/in-octets\" : 7753940 } }","title":"Convert"},{"location":"user_guide/event_processors/event_convert/#examples","text":"processors : # processor name convert-int-processor : # processor type event-convert : # list of regex to be matched with the values names value-names : - \".*octets$\" # the desired value type, one of int, uint, string, float type : int Event format before { \"name\" : \"default\" , \"timestamp\" : 1607290633806716620 , \"tags\" : { \"port_port-id\" : \"A/1\" , \"source\" : \"172.17.0.100:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"/state/port/ethernet/statistics/in-octets\" : \"7753940\" } } Event format after { \"name\" : \"default\" , \"timestamp\" : 1607290633806716620 , \"tags\" : { \"port_port-id\" : \"A/1\" , \"source\" : \"172.17.0.100:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"/state/port/ethernet/statistics/in-octets\" : 7753940 } }","title":"Examples"},{"location":"user_guide/event_processors/event_date_string/","text":"The event-date-string processor, converts a specific timestamp value (under tags or values) to a string representation. The format and location can be configured. Examples # processors : # processor name convert-timestamp-processor : # processor type event-date-string : # list of regex to be matched with the values names value-names : - \"timestamp\" # received timestamp unit precision : ms # desired date string format, defaults to RFC3339 format : \"2006-01-02T15:04:05Z07:00\" # timezone, defaults to the local timezone location : Asia/Taipei","title":"Date string"},{"location":"user_guide/event_processors/event_date_string/#examples","text":"processors : # processor name convert-timestamp-processor : # processor type event-date-string : # list of regex to be matched with the values names value-names : - \"timestamp\" # received timestamp unit precision : ms # desired date string format, defaults to RFC3339 format : \"2006-01-02T15:04:05Z07:00\" # timezone, defaults to the local timezone location : Asia/Taipei","title":"Examples"},{"location":"user_guide/event_processors/event_delete/","text":"The event-delete processor, deletes all tags or values matching a set of regular expressions from the event message. Examples # processors : # processor name delete-processor : # processor type event-delete : value-names : - \".*multicast.*\" - \".*broadcast.*\" Event format before { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"/srl_nokia-interfaces:interface/statistics/carrier-transitions\" : \"1\" , \"/srl_nokia-interfaces:interface/statistics/in-broadcast-packets\" : \"3797\" , \"/srl_nokia-interfaces:interface/statistics/in-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-fcs-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-multicast-packets\" : \"288033\" , \"/srl_nokia-interfaces:interface/statistics/in-octets\" : \"65382630\" , \"/srl_nokia-interfaces:interface/statistics/in-unicast-packets\" : \"107154\" , \"/srl_nokia-interfaces:interface/statistics/out-broadcast-packets\" : \"614\" , \"/srl_nokia-interfaces:interface/statistics/out-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/out-multicast-packets\" : \"11\" , \"/srl_nokia-interfaces:interface/statistics/out-octets\" : \"64721394\" , \"/srl_nokia-interfaces:interface/statistics/out-unicast-packets\" : \"105876\" } } Event format after { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"/srl_nokia-interfaces:interface/statistics/carrier-transitions\" : \"1\" , \"/srl_nokia-interfaces:interface/statistics/in-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-fcs-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-octets\" : \"65382630\" , \"/srl_nokia-interfaces:interface/statistics/in-unicast-packets\" : \"107154\" , \"/srl_nokia-interfaces:interface/statistics/out-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/out-octets\" : \"64721394\" , \"/srl_nokia-interfaces:interface/statistics/out-unicast-packets\" : \"105876\" } }","title":"Delete"},{"location":"user_guide/event_processors/event_delete/#examples","text":"processors : # processor name delete-processor : # processor type event-delete : value-names : - \".*multicast.*\" - \".*broadcast.*\" Event format before { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"/srl_nokia-interfaces:interface/statistics/carrier-transitions\" : \"1\" , \"/srl_nokia-interfaces:interface/statistics/in-broadcast-packets\" : \"3797\" , \"/srl_nokia-interfaces:interface/statistics/in-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-fcs-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-multicast-packets\" : \"288033\" , \"/srl_nokia-interfaces:interface/statistics/in-octets\" : \"65382630\" , \"/srl_nokia-interfaces:interface/statistics/in-unicast-packets\" : \"107154\" , \"/srl_nokia-interfaces:interface/statistics/out-broadcast-packets\" : \"614\" , \"/srl_nokia-interfaces:interface/statistics/out-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/out-multicast-packets\" : \"11\" , \"/srl_nokia-interfaces:interface/statistics/out-octets\" : \"64721394\" , \"/srl_nokia-interfaces:interface/statistics/out-unicast-packets\" : \"105876\" } } Event format after { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"/srl_nokia-interfaces:interface/statistics/carrier-transitions\" : \"1\" , \"/srl_nokia-interfaces:interface/statistics/in-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-fcs-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-octets\" : \"65382630\" , \"/srl_nokia-interfaces:interface/statistics/in-unicast-packets\" : \"107154\" , \"/srl_nokia-interfaces:interface/statistics/out-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/out-octets\" : \"64721394\" , \"/srl_nokia-interfaces:interface/statistics/out-unicast-packets\" : \"105876\" } }","title":"Examples"},{"location":"user_guide/event_processors/event_drop/","text":"The event-drop processor, drops the whole message if it matches the configured condition or one of the regexes under tags , tag-names , values or value-names . processors : # processor name sample-processor : # processor type event-drop : # jq expression, if evaluated to true, the message is dropped condition : # list of regular expressions to be matched against the tags names, if matched, the message is dropped tag-names : # list of regular expressions to be matched against the tags values, if matched, the message is dropped tags : # list of regular expressions to be matched against the values names, if matched, the message is dropped value-names : # list of regular expressions to be matched against the values, if matched, the message is dropped values : Examples # processors : # processor name drop-processor : # processor type event-drop : tags : - \"172.23.23.2*\" Event format before { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"/srl_nokia-interfaces:interface/statistics/carrier-transitions\" : \"1\" , \"/srl_nokia-interfaces:interface/statistics/in-broadcast-packets\" : \"3797\" , \"/srl_nokia-interfaces:interface/statistics/in-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-fcs-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-multicast-packets\" : \"288033\" , \"/srl_nokia-interfaces:interface/statistics/in-octets\" : \"65382630\" , \"/srl_nokia-interfaces:interface/statistics/in-unicast-packets\" : \"107154\" , \"/srl_nokia-interfaces:interface/statistics/out-broadcast-packets\" : \"614\" , \"/srl_nokia-interfaces:interface/statistics/out-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/out-multicast-packets\" : \"11\" , \"/srl_nokia-interfaces:interface/statistics/out-octets\" : \"64721394\" , \"/srl_nokia-interfaces:interface/statistics/out-unicast-packets\" : \"105876\" } } Event format after { }","title":"Drop"},{"location":"user_guide/event_processors/event_drop/#examples","text":"processors : # processor name drop-processor : # processor type event-drop : tags : - \"172.23.23.2*\" Event format before { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"/srl_nokia-interfaces:interface/statistics/carrier-transitions\" : \"1\" , \"/srl_nokia-interfaces:interface/statistics/in-broadcast-packets\" : \"3797\" , \"/srl_nokia-interfaces:interface/statistics/in-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-fcs-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-multicast-packets\" : \"288033\" , \"/srl_nokia-interfaces:interface/statistics/in-octets\" : \"65382630\" , \"/srl_nokia-interfaces:interface/statistics/in-unicast-packets\" : \"107154\" , \"/srl_nokia-interfaces:interface/statistics/out-broadcast-packets\" : \"614\" , \"/srl_nokia-interfaces:interface/statistics/out-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/out-multicast-packets\" : \"11\" , \"/srl_nokia-interfaces:interface/statistics/out-octets\" : \"64721394\" , \"/srl_nokia-interfaces:interface/statistics/out-unicast-packets\" : \"105876\" } } Event format after { }","title":"Examples"},{"location":"user_guide/event_processors/event_extract_tags/","text":"The event-extract-tag processor, extracts tags from a value, a value name, a tag name or a tag value using regex named groups. It is possible to overwrite a tag if its name already exists. processors : # processor name sample-processor : # processor type event-extract-tags : # list of regular expressions to be used to extract strings to be added as a tag. tag-names : # list of regular expressions to be used to extract strings to be added as a tag. tags : # list of regular expressions to be used to extract strings to be added as a tag. value-names : # list of regular expressions to be used to extract strings to be added as a tag. values : # boolean, if true tags are over-written with the added ones if they already exist. overwrite : # boolean, enable extra logging debug : Examples # processors : # processor name sample-processor : # processor type event-extract-tag : value-names : - ` /(\\w+)/(?P<group>\\w+)/(\\w+)` Event format before { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"/srl_nokia-interfaces:interface/statistics/carrier-transitions\" : \"1\" , \"/srl_nokia-interfaces:interface/statistics/in-broadcast-packets\" : \"3797\" , \"/srl_nokia-interfaces:interface/statistics/in-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-fcs-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-multicast-packets\" : \"288033\" , \"/srl_nokia-interfaces:interface/statistics/in-octets\" : \"65382630\" , \"/srl_nokia-interfaces:interface/statistics/in-unicast-packets\" : \"107154\" , \"/srl_nokia-interfaces:interface/statistics/out-broadcast-packets\" : \"614\" , \"/srl_nokia-interfaces:interface/statistics/out-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/out-multicast-packets\" : \"11\" , \"/srl_nokia-interfaces:interface/statistics/out-octets\" : \"64721394\" , \"/srl_nokia-interfaces:interface/statistics/out-unicast-packets\" : \"105876\" } } Event format after { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.23.23.2:57400\" , \"group\" : \"statistics\" , \"subscription-name\" : \"default\" }, \"values\" : { \"/srl_nokia-interfaces:interface/statistics/carrier-transitions\" : \"1\" , \"/srl_nokia-interfaces:interface/statistics/in-broadcast-packets\" : \"3797\" , \"/srl_nokia-interfaces:interface/statistics/in-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-fcs-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-multicast-packets\" : \"288033\" , \"/srl_nokia-interfaces:interface/statistics/in-octets\" : \"65382630\" , \"/srl_nokia-interfaces:interface/statistics/in-unicast-packets\" : \"107154\" , \"/srl_nokia-interfaces:interface/statistics/out-broadcast-packets\" : \"614\" , \"/srl_nokia-interfaces:interface/statistics/out-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/out-multicast-packets\" : \"11\" , \"/srl_nokia-interfaces:interface/statistics/out-octets\" : \"64721394\" , \"/srl_nokia-interfaces:interface/statistics/out-unicast-packets\" : \"105876\" } }","title":"Extract Tags"},{"location":"user_guide/event_processors/event_extract_tags/#examples","text":"processors : # processor name sample-processor : # processor type event-extract-tag : value-names : - ` /(\\w+)/(?P<group>\\w+)/(\\w+)` Event format before { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"/srl_nokia-interfaces:interface/statistics/carrier-transitions\" : \"1\" , \"/srl_nokia-interfaces:interface/statistics/in-broadcast-packets\" : \"3797\" , \"/srl_nokia-interfaces:interface/statistics/in-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-fcs-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-multicast-packets\" : \"288033\" , \"/srl_nokia-interfaces:interface/statistics/in-octets\" : \"65382630\" , \"/srl_nokia-interfaces:interface/statistics/in-unicast-packets\" : \"107154\" , \"/srl_nokia-interfaces:interface/statistics/out-broadcast-packets\" : \"614\" , \"/srl_nokia-interfaces:interface/statistics/out-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/out-multicast-packets\" : \"11\" , \"/srl_nokia-interfaces:interface/statistics/out-octets\" : \"64721394\" , \"/srl_nokia-interfaces:interface/statistics/out-unicast-packets\" : \"105876\" } } Event format after { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.23.23.2:57400\" , \"group\" : \"statistics\" , \"subscription-name\" : \"default\" }, \"values\" : { \"/srl_nokia-interfaces:interface/statistics/carrier-transitions\" : \"1\" , \"/srl_nokia-interfaces:interface/statistics/in-broadcast-packets\" : \"3797\" , \"/srl_nokia-interfaces:interface/statistics/in-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-fcs-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-multicast-packets\" : \"288033\" , \"/srl_nokia-interfaces:interface/statistics/in-octets\" : \"65382630\" , \"/srl_nokia-interfaces:interface/statistics/in-unicast-packets\" : \"107154\" , \"/srl_nokia-interfaces:interface/statistics/out-broadcast-packets\" : \"614\" , \"/srl_nokia-interfaces:interface/statistics/out-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/out-multicast-packets\" : \"11\" , \"/srl_nokia-interfaces:interface/statistics/out-octets\" : \"64721394\" , \"/srl_nokia-interfaces:interface/statistics/out-unicast-packets\" : \"105876\" } }","title":"Examples"},{"location":"user_guide/event_processors/event_jq/","text":"The event-jq processor, applies a jq expression on the received event messages. jq expressions are a powerful tool that can be used to slice, filter, map, transform JSON object. The event-jq processor uses two configuration fields, condition and expression , both support jq expressions. condition (that needs to return a boolean value) determines if the processor is to be applied on the event message. if false the message is returned as is. expression is used to transform, filter and/or enrich the messages. It needs to return a JSON object that can be mapped to an array of event messages. The event messages resulting from a single gNMI Notification are passed to the jq expression as a JSON array. Some jq expression examples: Select messages with name \"sub1\" that include a value called \"counter1\" with value higher than 90 expression : .[] | select(.name==\"sub1\" and .values.counter1 > 90) Delete values with name \"counter1\" expression : .[] | del(.values.counter1) Delete values with names \"counter1\" or \"counter2\" expression : .[] | del(.values.[\"counter1\", \"counter2\"]) Delete tags with names \"tag1\" or \"tag2\" expression : .[] | del(.tags.[\"tag1\", \"tag2\"]) Add a tag called \"my_new_tag\" with value \"tag1\" expression : .[] |= (.tags.my_new_tag = \"tag1\") Move a value to tag under a custom key expression : .[] |= (.tags.my_new_tag_name = .values.value_name) Configuration # processors : # processor name sample-processor : # processor type event-jq : # condition of application of the processor condition : # jq expression to transform/filter/enrich the message expression : # boolean enabling extra logging debug :","title":"JQ"},{"location":"user_guide/event_processors/event_jq/#configuration","text":"processors : # processor name sample-processor : # processor type event-jq : # condition of application of the processor condition : # jq expression to transform/filter/enrich the message expression : # boolean enabling extra logging debug :","title":"Configuration"},{"location":"user_guide/event_processors/event_merge/","text":"The event-merge processor, merges multiple event messages together based on some criteria. Each gNMI subscribe Response Update in a gNMI subscribe Response Notification is transformed into an Event Message The event-merge processor is used to merge the updates into one event message if it's needed. The default merge strategy is based on the timestamp, the updates with the same timestamp will be merged into the same event message. processors : # processor name sample-processor : # processor type event-merge : # if always is set to true, # the updates are merged regardless of the timestamp values always : false debug : false Event format before [ { \"name\" : \"sub2\" , \"timestamp\" : 1615284691523204299 , \"tags\" : { \"neighbor_peer-address\" : \"2002::1:1:1:1\" , \"network-instance_name\" : \"default\" , \"source\" : \"leaf1:57400\" , \"subscription-name\" : \"sub2\" }, \"values\" : { \"bgp_neighbor_sent_messages_queue_depth\" : 0 , \"bgp_neighbor_sent_messages_total_messages\" : \"423\" , \"bgp_neighbor_sent_messages_total_non_updates\" : \"415\" , \"bgp_neighbor_sent_messages_total_updates\" : \"8\" } }, { \"name\" : \"sub2\" , \"timestamp\" : 1615284691523204299 , \"tags\" : { \"neighbor_peer-address\" : \"2002::1:1:1:1\" , \"network-instance_name\" : \"default\" , \"source\" : \"leaf1:57400\" , \"subscription-name\" : \"sub2\" }, \"values\" : { \"bgp_neighbor_received_messages_malformed_updates\" : \"0\" , \"bgp_neighbor_received_messages_queue_depth\" : 0 , \"bgp_neighbor_received_messages_total_messages\" : \"424\" , \"bgp_neighbor_received_messages_total_non_updates\" : \"418\" , \"bgp_neighbor_received_messages_total_updates\" : \"6\" } } ] Event format after [ { \"name\" : \"sub2\" , \"timestamp\" : 1615284691523204299 , \"tags\" : { \"neighbor_peer-address\" : \"2002::1:1:1:1\" , \"network-instance_name\" : \"default\" , \"source\" : \"leaf1:57400\" , \"subscription-name\" : \"sub2\" }, \"values\" : { \"bgp_neighbor_sent_messages_queue_depth\" : 0 , \"bgp_neighbor_sent_messages_total_messages\" : \"423\" , \"bgp_neighbor_sent_messages_total_non_updates\" : \"415\" , \"bgp_neighbor_sent_messages_total_updates\" : \"8\" , \"bgp_neighbor_received_messages_malformed_updates\" : \"0\" , \"bgp_neighbor_received_messages_queue_depth\" : 0 , \"bgp_neighbor_received_messages_total_messages\" : \"424\" , \"bgp_neighbor_received_messages_total_non_updates\" : \"418\" , \"bgp_neighbor_received_messages_total_updates\" : \"6\" } } ]","title":"Merge"},{"location":"user_guide/event_processors/event_override_ts/","text":"The event-override-ts processor, overrides the message timestamp with time.Now() . The precision s , ms , us or ns (default) can be configured. Examples # processors : # processor name set-timestamp-processor : # processor type event-override-ts : # timestamp precision, s, ms, us, ns (default) precision : ms","title":"Override TS"},{"location":"user_guide/event_processors/event_override_ts/#examples","text":"processors : # processor name set-timestamp-processor : # processor type event-override-ts : # timestamp precision, s, ms, us, ns (default) precision : ms","title":"Examples"},{"location":"user_guide/event_processors/event_strings/","text":"The event-strings processor, exposes a few of Golang strings transformation functions, there functions can be applied to tags, tag names, values or value names. Supported functions: strings.Replace strings.TrimPrefix strings.TrimSuffix strings.Title strings.ToLower strings.ToUpper strings.Split filepath.Base processors : # processor name sample-processor : # processor type event-strings : value-names : [] tag-names : [] values : [] tags : [] transforms : # strings function name - replace : apply-on : # apply the transformation on name or value keep : # keep the old value or not if the name changed old : # string to be replaced new : #replacement string of old - trim-prefix : apply-on : # apply the transformation on name or value prefix : # prefix to be trimmed - trim_suffix : apply-on : # apply the transformation on name or value suffix : # suffix to be trimmed - title : apply-on : # apply the transformation on name or value - to-upper : apply-on : # apply the transformation on name or value - to-lower : apply-on : # apply the transformation on name or value - split : apply-on : # apply the transformation on name or value split-on : # character to split on join-with : # character to join with ignore-first : # number of first items to ignore when joining ignore-last : # number of last items to ignore when joining - path-base : apply-on : # apply the transformation on name or value Examples # replace # processors : # processor name sample-processor : # processor type event-strings : value-names : - \".*\" transforms : # strings function name - replace : apply-on : \"name\" old : \"-\" new : \"_\" Event format before { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"carrier-transitions\" : \"1\" , \"in-error-packets\" : \"0\" , \"in-fcs-error-packets\" : \"0\" , \"in-octets\" : \"65382630\" , \"in-unicast-packets\" : \"107154\" , \"out-error-packets\" : \"0\" , \"out-octets\" : \"64721394\" , \"out-unicast-packets\" : \"105876\" } } Event format after { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"carrier_transitions\" : \"1\" , \"in_error_packets\" : \"0\" , \"in_fcs_error_packets\" : \"0\" , \"in_octets\" : \"65382630\" , \"in_unicast_packets\" : \"107154\" , \"out_error_packets\" : \"0\" , \"out_octets\" : \"64721394\" , \"out_unicast_packets\" : \"105876\" } } trim-prefix # processors : # processor name sample-processor : # processor type event-strings : value-names : - \".*\" transforms : # strings function name - trim-prefix : apply-on : \"name\" prefix : \"/srl_nokia-interfaces:interface/statistics/\" Event format before { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"/srl_nokia-interfaces:interface/statistics/carrier-transitions\" : \"1\" , \"/srl_nokia-interfaces:interface/statistics/in-broadcast-packets\" : \"3797\" , \"/srl_nokia-interfaces:interface/statistics/in-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-fcs-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-multicast-packets\" : \"288033\" , \"/srl_nokia-interfaces:interface/statistics/in-octets\" : \"65382630\" , \"/srl_nokia-interfaces:interface/statistics/in-unicast-packets\" : \"107154\" , \"/srl_nokia-interfaces:interface/statistics/out-broadcast-packets\" : \"614\" , \"/srl_nokia-interfaces:interface/statistics/out-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/out-multicast-packets\" : \"11\" , \"/srl_nokia-interfaces:interface/statistics/out-octets\" : \"64721394\" , \"/srl_nokia-interfaces:interface/statistics/out-unicast-packets\" : \"105876\" } } Event format after { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"carrier-transitions\" : \"1\" , \"in-broadcast-packets\" : \"3797\" , \"in-error-packets\" : \"0\" , \"in-fcs-error-packets\" : \"0\" , \"in-multicast-packets\" : \"288033\" , \"in-octets\" : \"65382630\" , \"in-unicast-packets\" : \"107154\" , \"out-broadcast-packets\" : \"614\" , \"out-error-packets\" : \"0\" , \"out-multicast-packets\" : \"11\" , \"out-octets\" : \"64721394\" , \"out-unicast-packets\" : \"105876\" } } to-upper # processors : # processor name sample-processor : # processor type event-strings : tag-names : - \"interface_name\" - \"subscription-name\" transforms : # strings function name - to-upper : apply-on : \"value\" Event format before { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"/srl_nokia-interfaces:interface/statistics/carrier-transitions\" : \"1\" , \"/srl_nokia-interfaces:interface/statistics/in-broadcast-packets\" : \"3797\" , \"/srl_nokia-interfaces:interface/statistics/in-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-fcs-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-multicast-packets\" : \"288033\" , \"/srl_nokia-interfaces:interface/statistics/in-octets\" : \"65382630\" , \"/srl_nokia-interfaces:interface/statistics/in-unicast-packets\" : \"107154\" , \"/srl_nokia-interfaces:interface/statistics/out-broadcast-packets\" : \"614\" , \"/srl_nokia-interfaces:interface/statistics/out-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/out-multicast-packets\" : \"11\" , \"/srl_nokia-interfaces:interface/statistics/out-octets\" : \"64721394\" , \"/srl_nokia-interfaces:interface/statistics/out-unicast-packets\" : \"105876\" } } Event format after { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"MGMT0\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"DEFAULT\" }, \"values\" : { \"/srl_nokia-interfaces:interface/statistics/carrier-transitions\" : \"1\" , \"/srl_nokia-interfaces:interface/statistics/in-broadcast-packets\" : \"3797\" , \"/srl_nokia-interfaces:interface/statistics/in-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-fcs-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-multicast-packets\" : \"288033\" , \"/srl_nokia-interfaces:interface/statistics/in-octets\" : \"65382630\" , \"/srl_nokia-interfaces:interface/statistics/in-unicast-packets\" : \"107154\" , \"/srl_nokia-interfaces:interface/statistics/out-broadcast-packets\" : \"614\" , \"/srl_nokia-interfaces:interface/statistics/out-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/out-multicast-packets\" : \"11\" , \"/srl_nokia-interfaces:interface/statistics/out-octets\" : \"64721394\" , \"/srl_nokia-interfaces:interface/statistics/out-unicast-packets\" : \"105876\" } } path-base # processors : # processor name sample-processor : # processor type event-strings : value-names : - \".*\" transforms : # strings function name - path-base : apply-on : \"name\" Event format before { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"/srl_nokia-interfaces:interface/statistics/carrier-transitions\" : \"1\" , \"/srl_nokia-interfaces:interface/statistics/in-broadcast-packets\" : \"3797\" , \"/srl_nokia-interfaces:interface/statistics/in-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-fcs-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-multicast-packets\" : \"288033\" , \"/srl_nokia-interfaces:interface/statistics/in-octets\" : \"65382630\" , \"/srl_nokia-interfaces:interface/statistics/in-unicast-packets\" : \"107154\" , \"/srl_nokia-interfaces:interface/statistics/out-broadcast-packets\" : \"614\" , \"/srl_nokia-interfaces:interface/statistics/out-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/out-multicast-packets\" : \"11\" , \"/srl_nokia-interfaces:interface/statistics/out-octets\" : \"64721394\" , \"/srl_nokia-interfaces:interface/statistics/out-unicast-packets\" : \"105876\" } } Event format after { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"carrier-transitions\" : \"1\" , \"in-broadcast-packets\" : \"3797\" , \"in-error-packets\" : \"0\" , \"in-fcs-error-packets\" : \"0\" , \"in-multicast-packets\" : \"288033\" , \"in-octets\" : \"65382630\" , \"in-unicast-packets\" : \"107154\" , \"out-broadcast-packets\" : \"614\" , \"out-error-packets\" : \"0\" , \"out-multicast-packets\" : \"11\" , \"out-octets\" : \"64721394\" , \"out-unicast-packets\" : \"105876\" } } split # processors : # processor name sample-processor : # processor type event-strings : value-names : - \".*\" transforms : # strings function name - split : on : \"name\" split-on : \"/\" join-with : \"_\" ignore-first : 1 Event format before { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"/srl_nokia-interfaces:interface/statistics/carrier-transitions\" : \"1\" , \"/srl_nokia-interfaces:interface/statistics/in-broadcast-packets\" : \"3797\" , \"/srl_nokia-interfaces:interface/statistics/in-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-fcs-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-multicast-packets\" : \"288033\" , \"/srl_nokia-interfaces:interface/statistics/in-octets\" : \"65382630\" , \"/srl_nokia-interfaces:interface/statistics/in-unicast-packets\" : \"107154\" , \"/srl_nokia-interfaces:interface/statistics/out-broadcast-packets\" : \"614\" , \"/srl_nokia-interfaces:interface/statistics/out-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/out-multicast-packets\" : \"11\" , \"/srl_nokia-interfaces:interface/statistics/out-octets\" : \"64721394\" , \"/srl_nokia-interfaces:interface/statistics/out-unicast-packets\" : \"105876\" } } Event format after { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"statistics_carrier-transitions\" : \"1\" , \"statistics_in-broadcast-packets\" : \"3797\" , \"statistics_in-error-packets\" : \"0\" , \"statistics_in-fcs-error-packets\" : \"0\" , \"statistics_in-multicast-packets\" : \"288033\" , \"statistics_in-octets\" : \"65382630\" , \"statistics_in-unicast-packets\" : \"107154\" , \"statistics_out-broadcast-packets\" : \"614\" , \"statistics_out-error-packets\" : \"0\" , \"statistics_out-multicast-packets\" : \"11\" , \"statistics_out-octets\" : \"64721394\" , \"statistics_out-unicast-packets\" : \"105876\" } } multiple transforms # processors : # processor name sample-processor : # processor type event-strings : value-names : - \".*\" transforms : # strings function name - path-base : apply-on : \"name\" - title : apply-on : \"name\" - replace : apply-on : \"name\" old : \"-\" new : \"_\" Event format before { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"/srl_nokia-interfaces:interface/statistics/carrier-transitions\" : \"1\" , \"/srl_nokia-interfaces:interface/statistics/in-broadcast-packets\" : \"3797\" , \"/srl_nokia-interfaces:interface/statistics/in-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-fcs-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-multicast-packets\" : \"288033\" , \"/srl_nokia-interfaces:interface/statistics/in-octets\" : \"65382630\" , \"/srl_nokia-interfaces:interface/statistics/in-unicast-packets\" : \"107154\" , \"/srl_nokia-interfaces:interface/statistics/out-broadcast-packets\" : \"614\" , \"/srl_nokia-interfaces:interface/statistics/out-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/out-multicast-packets\" : \"11\" , \"/srl_nokia-interfaces:interface/statistics/out-octets\" : \"64721394\" , \"/srl_nokia-interfaces:interface/statistics/out-unicast-packets\" : \"105876\" } } Event format after { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"Carrier_transitions\" : \"1\" , \"In_broadcast_packets\" : \"3797\" , \"In_error_packets\" : \"0\" , \"In_fcs_error_packets\" : \"0\" , \"In_multicast_packets\" : \"288033\" , \"In_octets\" : \"65382630\" , \"In_unicast_packets\" : \"107154\" , \"Out_broadcast_packets\" : \"614\" , \"Out_error_packets\" : \"0\" , \"Out_multicast_packets\" : \"11\" , \"Out_octets\" : \"64721394\" , \"Out_unicast_packets\" : \"105876\" } }","title":"Strings"},{"location":"user_guide/event_processors/event_strings/#examples","text":"","title":"Examples"},{"location":"user_guide/event_processors/event_strings/#replace","text":"processors : # processor name sample-processor : # processor type event-strings : value-names : - \".*\" transforms : # strings function name - replace : apply-on : \"name\" old : \"-\" new : \"_\" Event format before { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"carrier-transitions\" : \"1\" , \"in-error-packets\" : \"0\" , \"in-fcs-error-packets\" : \"0\" , \"in-octets\" : \"65382630\" , \"in-unicast-packets\" : \"107154\" , \"out-error-packets\" : \"0\" , \"out-octets\" : \"64721394\" , \"out-unicast-packets\" : \"105876\" } } Event format after { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"carrier_transitions\" : \"1\" , \"in_error_packets\" : \"0\" , \"in_fcs_error_packets\" : \"0\" , \"in_octets\" : \"65382630\" , \"in_unicast_packets\" : \"107154\" , \"out_error_packets\" : \"0\" , \"out_octets\" : \"64721394\" , \"out_unicast_packets\" : \"105876\" } }","title":"replace"},{"location":"user_guide/event_processors/event_strings/#trim-prefix","text":"processors : # processor name sample-processor : # processor type event-strings : value-names : - \".*\" transforms : # strings function name - trim-prefix : apply-on : \"name\" prefix : \"/srl_nokia-interfaces:interface/statistics/\" Event format before { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"/srl_nokia-interfaces:interface/statistics/carrier-transitions\" : \"1\" , \"/srl_nokia-interfaces:interface/statistics/in-broadcast-packets\" : \"3797\" , \"/srl_nokia-interfaces:interface/statistics/in-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-fcs-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-multicast-packets\" : \"288033\" , \"/srl_nokia-interfaces:interface/statistics/in-octets\" : \"65382630\" , \"/srl_nokia-interfaces:interface/statistics/in-unicast-packets\" : \"107154\" , \"/srl_nokia-interfaces:interface/statistics/out-broadcast-packets\" : \"614\" , \"/srl_nokia-interfaces:interface/statistics/out-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/out-multicast-packets\" : \"11\" , \"/srl_nokia-interfaces:interface/statistics/out-octets\" : \"64721394\" , \"/srl_nokia-interfaces:interface/statistics/out-unicast-packets\" : \"105876\" } } Event format after { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"carrier-transitions\" : \"1\" , \"in-broadcast-packets\" : \"3797\" , \"in-error-packets\" : \"0\" , \"in-fcs-error-packets\" : \"0\" , \"in-multicast-packets\" : \"288033\" , \"in-octets\" : \"65382630\" , \"in-unicast-packets\" : \"107154\" , \"out-broadcast-packets\" : \"614\" , \"out-error-packets\" : \"0\" , \"out-multicast-packets\" : \"11\" , \"out-octets\" : \"64721394\" , \"out-unicast-packets\" : \"105876\" } }","title":"trim-prefix"},{"location":"user_guide/event_processors/event_strings/#to-upper","text":"processors : # processor name sample-processor : # processor type event-strings : tag-names : - \"interface_name\" - \"subscription-name\" transforms : # strings function name - to-upper : apply-on : \"value\" Event format before { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"/srl_nokia-interfaces:interface/statistics/carrier-transitions\" : \"1\" , \"/srl_nokia-interfaces:interface/statistics/in-broadcast-packets\" : \"3797\" , \"/srl_nokia-interfaces:interface/statistics/in-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-fcs-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-multicast-packets\" : \"288033\" , \"/srl_nokia-interfaces:interface/statistics/in-octets\" : \"65382630\" , \"/srl_nokia-interfaces:interface/statistics/in-unicast-packets\" : \"107154\" , \"/srl_nokia-interfaces:interface/statistics/out-broadcast-packets\" : \"614\" , \"/srl_nokia-interfaces:interface/statistics/out-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/out-multicast-packets\" : \"11\" , \"/srl_nokia-interfaces:interface/statistics/out-octets\" : \"64721394\" , \"/srl_nokia-interfaces:interface/statistics/out-unicast-packets\" : \"105876\" } } Event format after { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"MGMT0\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"DEFAULT\" }, \"values\" : { \"/srl_nokia-interfaces:interface/statistics/carrier-transitions\" : \"1\" , \"/srl_nokia-interfaces:interface/statistics/in-broadcast-packets\" : \"3797\" , \"/srl_nokia-interfaces:interface/statistics/in-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-fcs-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-multicast-packets\" : \"288033\" , \"/srl_nokia-interfaces:interface/statistics/in-octets\" : \"65382630\" , \"/srl_nokia-interfaces:interface/statistics/in-unicast-packets\" : \"107154\" , \"/srl_nokia-interfaces:interface/statistics/out-broadcast-packets\" : \"614\" , \"/srl_nokia-interfaces:interface/statistics/out-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/out-multicast-packets\" : \"11\" , \"/srl_nokia-interfaces:interface/statistics/out-octets\" : \"64721394\" , \"/srl_nokia-interfaces:interface/statistics/out-unicast-packets\" : \"105876\" } }","title":"to-upper"},{"location":"user_guide/event_processors/event_strings/#path-base","text":"processors : # processor name sample-processor : # processor type event-strings : value-names : - \".*\" transforms : # strings function name - path-base : apply-on : \"name\" Event format before { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"/srl_nokia-interfaces:interface/statistics/carrier-transitions\" : \"1\" , \"/srl_nokia-interfaces:interface/statistics/in-broadcast-packets\" : \"3797\" , \"/srl_nokia-interfaces:interface/statistics/in-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-fcs-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-multicast-packets\" : \"288033\" , \"/srl_nokia-interfaces:interface/statistics/in-octets\" : \"65382630\" , \"/srl_nokia-interfaces:interface/statistics/in-unicast-packets\" : \"107154\" , \"/srl_nokia-interfaces:interface/statistics/out-broadcast-packets\" : \"614\" , \"/srl_nokia-interfaces:interface/statistics/out-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/out-multicast-packets\" : \"11\" , \"/srl_nokia-interfaces:interface/statistics/out-octets\" : \"64721394\" , \"/srl_nokia-interfaces:interface/statistics/out-unicast-packets\" : \"105876\" } } Event format after { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"carrier-transitions\" : \"1\" , \"in-broadcast-packets\" : \"3797\" , \"in-error-packets\" : \"0\" , \"in-fcs-error-packets\" : \"0\" , \"in-multicast-packets\" : \"288033\" , \"in-octets\" : \"65382630\" , \"in-unicast-packets\" : \"107154\" , \"out-broadcast-packets\" : \"614\" , \"out-error-packets\" : \"0\" , \"out-multicast-packets\" : \"11\" , \"out-octets\" : \"64721394\" , \"out-unicast-packets\" : \"105876\" } }","title":"path-base"},{"location":"user_guide/event_processors/event_strings/#split","text":"processors : # processor name sample-processor : # processor type event-strings : value-names : - \".*\" transforms : # strings function name - split : on : \"name\" split-on : \"/\" join-with : \"_\" ignore-first : 1 Event format before { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"/srl_nokia-interfaces:interface/statistics/carrier-transitions\" : \"1\" , \"/srl_nokia-interfaces:interface/statistics/in-broadcast-packets\" : \"3797\" , \"/srl_nokia-interfaces:interface/statistics/in-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-fcs-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-multicast-packets\" : \"288033\" , \"/srl_nokia-interfaces:interface/statistics/in-octets\" : \"65382630\" , \"/srl_nokia-interfaces:interface/statistics/in-unicast-packets\" : \"107154\" , \"/srl_nokia-interfaces:interface/statistics/out-broadcast-packets\" : \"614\" , \"/srl_nokia-interfaces:interface/statistics/out-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/out-multicast-packets\" : \"11\" , \"/srl_nokia-interfaces:interface/statistics/out-octets\" : \"64721394\" , \"/srl_nokia-interfaces:interface/statistics/out-unicast-packets\" : \"105876\" } } Event format after { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"statistics_carrier-transitions\" : \"1\" , \"statistics_in-broadcast-packets\" : \"3797\" , \"statistics_in-error-packets\" : \"0\" , \"statistics_in-fcs-error-packets\" : \"0\" , \"statistics_in-multicast-packets\" : \"288033\" , \"statistics_in-octets\" : \"65382630\" , \"statistics_in-unicast-packets\" : \"107154\" , \"statistics_out-broadcast-packets\" : \"614\" , \"statistics_out-error-packets\" : \"0\" , \"statistics_out-multicast-packets\" : \"11\" , \"statistics_out-octets\" : \"64721394\" , \"statistics_out-unicast-packets\" : \"105876\" } }","title":"split"},{"location":"user_guide/event_processors/event_strings/#multiple-transforms","text":"processors : # processor name sample-processor : # processor type event-strings : value-names : - \".*\" transforms : # strings function name - path-base : apply-on : \"name\" - title : apply-on : \"name\" - replace : apply-on : \"name\" old : \"-\" new : \"_\" Event format before { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"/srl_nokia-interfaces:interface/statistics/carrier-transitions\" : \"1\" , \"/srl_nokia-interfaces:interface/statistics/in-broadcast-packets\" : \"3797\" , \"/srl_nokia-interfaces:interface/statistics/in-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-fcs-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-multicast-packets\" : \"288033\" , \"/srl_nokia-interfaces:interface/statistics/in-octets\" : \"65382630\" , \"/srl_nokia-interfaces:interface/statistics/in-unicast-packets\" : \"107154\" , \"/srl_nokia-interfaces:interface/statistics/out-broadcast-packets\" : \"614\" , \"/srl_nokia-interfaces:interface/statistics/out-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/out-multicast-packets\" : \"11\" , \"/srl_nokia-interfaces:interface/statistics/out-octets\" : \"64721394\" , \"/srl_nokia-interfaces:interface/statistics/out-unicast-packets\" : \"105876\" } } Event format after { \"name\" : \"default\" , \"timestamp\" : 1607291271894072397 , \"tags\" : { \"interface_name\" : \"mgmt0\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"Carrier_transitions\" : \"1\" , \"In_broadcast_packets\" : \"3797\" , \"In_error_packets\" : \"0\" , \"In_fcs_error_packets\" : \"0\" , \"In_multicast_packets\" : \"288033\" , \"In_octets\" : \"65382630\" , \"In_unicast_packets\" : \"107154\" , \"Out_broadcast_packets\" : \"614\" , \"Out_error_packets\" : \"0\" , \"Out_multicast_packets\" : \"11\" , \"Out_octets\" : \"64721394\" , \"Out_unicast_packets\" : \"105876\" } }","title":"multiple transforms"},{"location":"user_guide/event_processors/event_to_tag/","text":"The event-to-tag processor, moves a value matching one of the regular expressions from the values section to the tags section. It's possible to keep the value under values section after moving it. Examples # processors : # processor name sample-processor : # processor type event-to-tag : value-names : - \".*-state$\" Event format before { \"name\" : \"default\" , \"timestamp\" : 1607305284170936330 , \"tags\" : { \"interface_name\" : \"ethernet-1/1\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"/srl_nokia-interfaces:interface/admin-state\" : \"disable\" , \"/srl_nokia-interfaces:interface/ifindex\" : 54 , \"/srl_nokia-interfaces:interface/last-change\" : \"2020-11-20T05:52:21.459Z\" , \"/srl_nokia-interfaces:interface/oper-down-reason\" : \"port-admin-disabled\" , \"/srl_nokia-interfaces:interface/oper-state\" : \"down\" } } Event format after { \"name\" : \"default\" , \"timestamp\" : 1607305284170936330 , \"tags\" : { \"interface_name\" : \"ethernet-1/1\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"default\" , \"/srl_nokia-interfaces:interface/admin-state\" : \"disable\" , \"/srl_nokia-interfaces:interface/oper-state\" : \"down\" }, \"values\" : { \"/srl_nokia-interfaces:interface/ifindex\" : 54 , \"/srl_nokia-interfaces:interface/last-change\" : \"2020-11-20T05:52:21.459Z\" , \"/srl_nokia-interfaces:interface/oper-down-reason\" : \"port-admin-disabled\" } }","title":"To Tag"},{"location":"user_guide/event_processors/event_to_tag/#examples","text":"processors : # processor name sample-processor : # processor type event-to-tag : value-names : - \".*-state$\" Event format before { \"name\" : \"default\" , \"timestamp\" : 1607305284170936330 , \"tags\" : { \"interface_name\" : \"ethernet-1/1\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"default\" }, \"values\" : { \"/srl_nokia-interfaces:interface/admin-state\" : \"disable\" , \"/srl_nokia-interfaces:interface/ifindex\" : 54 , \"/srl_nokia-interfaces:interface/last-change\" : \"2020-11-20T05:52:21.459Z\" , \"/srl_nokia-interfaces:interface/oper-down-reason\" : \"port-admin-disabled\" , \"/srl_nokia-interfaces:interface/oper-state\" : \"down\" } } Event format after { \"name\" : \"default\" , \"timestamp\" : 1607305284170936330 , \"tags\" : { \"interface_name\" : \"ethernet-1/1\" , \"source\" : \"172.23.23.2:57400\" , \"subscription-name\" : \"default\" , \"/srl_nokia-interfaces:interface/admin-state\" : \"disable\" , \"/srl_nokia-interfaces:interface/oper-state\" : \"down\" }, \"values\" : { \"/srl_nokia-interfaces:interface/ifindex\" : 54 , \"/srl_nokia-interfaces:interface/last-change\" : \"2020-11-20T05:52:21.459Z\" , \"/srl_nokia-interfaces:interface/oper-down-reason\" : \"port-admin-disabled\" } }","title":"Examples"},{"location":"user_guide/event_processors/event_trigger/","text":"The event-trigger processor, triggers an action if the configured condition evaluates to true . The condition is evaluated using the the Golang implementation of jq with the event message as a json input. jq tutorial jq manual jq playground Examples of conditions: The below expression checks if the value named counter1 has a value higher than 90 .values [ \"counter1\" ] > 90 This expression checks if the event name is sub1 , that the tag source is equal to r1:57400 .name == \"sub1\" and .tags [ \"source\" ] == \"r1:57400\" The trigger can be monitored over a configurable window of time (default 1 minute), during which only a certain number of occurrences (default 1) trigger the action. Actions can be of two types: HTTP action : trigger an HTTP request gNMI action : trigger a Get or Set gnmi RPC HTTP Action # Using the HTTP action you can send an HTTP request to a remote server, by default the whole event message is added to request body as a json payload. The request body can be customized using Go Templates that take the event message as input. The HTTP action templates come with some handy functions like: withTags : keep only certain tags in the event message. for e.g: {{ withTags . \"tag1\" \"tag2\" }} withoutTags : remove certain tags from the event message. for e.g: {{ withoutTags . \"tag1\" \"tag2\" }} withValues : keep only certain values in the event message. for e.g: {{ withValues . \"counter1\" \"counter2\" }} withoutTags : remove certain values from the event message. for e.g: {{ withoutTags . \"counter1\" \"counter2\" }} processors : # processor name my_trigger_proc : # # processor type event-trigger : # trigger condition condition : '.values[\"counter1\"] > 90' # minimum number of condition occurrences within the configured window # required to trigger the action min-occurrences : 1 # max number of times the action is triggered within the configured window max-occurrences : 1 # window of time during which max-occurrences need to # be reached in order to trigger the action window : 60s # the action to trigger action : # action type type : http # HTTP method method : POST # target url, can be a go template url : http://remote-server:8080/ # http headers to add to the request, this is a dictionary headers : content-type : application/text # other-header: value # http request timeout timeout : 5s # go template used to build the request body. # if left empty the whole event message is added as a json object to the request's body body : '\"counter1\" crossed threshold, value={{ index .Values \"counter1\" }}' # enable extra logging debug : false The below example triggers an HTTP GET to http://remote-server:p8080/${router_name} if the value of counter \"counter1\" crosses 90 twice within 2 minutes. processors : my_trigger_proc : event-trigger : condition : '.values[\"counter1\"] > 90' min-occurrences : 1 max-occurrences : 2 window : 120s action : type : http method : POST url : http://remote-server:8080/{{ index .Tags \"source\" }} headers : content-type : application/text timeout : 5s body : '\"counter1\" crossed threshold, value={{ index .Values \"counter1\" }}' gNMI Action # Using the gNMI action you can trigger a gNMI Get or Set RPC when the trigger condition is met. Just like the HTTP action the RPC fields can be customized using Go Templates processors : # processor name my_trigger_proc : # # processor type event-trigger : # trigger condition condition : '(.tags.interface_name == \"ethernet-1/1\" or .tags.interface_name == \"ethernet-1/2\") and .values[\"/srl_nokia-interfaces:interface/oper-state\"] == \"down\"' # minimum number of condition occurrences within the configured window # required to trigger the action min-occurrences : 1 # max number of times the action is triggered within the configured window max-occurrences : 1 # window of time during which max-occurrences need to # be reached in order to trigger the action window : 60s # the action to trigger action : # action type type : gnmi # gNMI rpc, defaults to `get`, if `set` is used it will default to a set update. # to trigger a set replace, use `set-replace` rpc : set # the target router, it defaults to the value in tag \"source\" target : '{{ index .Tags \"source\" }}' # paths templates to build xpaths paths : - | {{ if eq ( index .Tags \"interface_name\" ) \"ethernet-1/1\"}} {{$interfaceName := \"ethernet-1/2\"}} {{else}} {{$interfaceName := \"ethernet-1/1\"}} {{end}} /interfaces/interface[name={{$interfaceName}}]/admin-state # values templates to build the values in case of set-update or set-replace values : - \"enable\" # data-type in case of get RPC, one of: ALL, CONFIG, STATE, OPERATIONAL data-type : ALL # gNMI encoding, defaults to json encoding : json # debug, enable extra logging debug : false The below example shows a trigger that enables a router interface if another interface's operational status changes to \"down\". processors : interface_watch : # event-trigger : debug : true condition : '(.tags.interface_name == \"ethernet-1/1\" or .tags.interface_name == \"ethernet-1/2\") and .values[\"/srl_nokia-interfaces:interface/oper-state\"] == \"down\"' action : type : gnmi rpc : set target : '{{ index .Tags \"source\" }}' paths : - | {{ $interfaceName := \"\" }} {{ if eq ( index .Tags \"interface_name\" ) \"ethernet-1/1\"}} {{$interfaceName = \"ethernet-1/2\"}} {{ else if eq ( index .Tags \"interface_name\" ) \"ethernet-1/2\"}} {{$interfaceName = \"ethernet-1/1\"}} {{end}} /interface[name={{$interfaceName}}]/admin-state values : - \"enable\" encoding : json_ietf debug : true","title":"Trigger"},{"location":"user_guide/event_processors/event_trigger/#http-action","text":"Using the HTTP action you can send an HTTP request to a remote server, by default the whole event message is added to request body as a json payload. The request body can be customized using Go Templates that take the event message as input. The HTTP action templates come with some handy functions like: withTags : keep only certain tags in the event message. for e.g: {{ withTags . \"tag1\" \"tag2\" }} withoutTags : remove certain tags from the event message. for e.g: {{ withoutTags . \"tag1\" \"tag2\" }} withValues : keep only certain values in the event message. for e.g: {{ withValues . \"counter1\" \"counter2\" }} withoutTags : remove certain values from the event message. for e.g: {{ withoutTags . \"counter1\" \"counter2\" }} processors : # processor name my_trigger_proc : # # processor type event-trigger : # trigger condition condition : '.values[\"counter1\"] > 90' # minimum number of condition occurrences within the configured window # required to trigger the action min-occurrences : 1 # max number of times the action is triggered within the configured window max-occurrences : 1 # window of time during which max-occurrences need to # be reached in order to trigger the action window : 60s # the action to trigger action : # action type type : http # HTTP method method : POST # target url, can be a go template url : http://remote-server:8080/ # http headers to add to the request, this is a dictionary headers : content-type : application/text # other-header: value # http request timeout timeout : 5s # go template used to build the request body. # if left empty the whole event message is added as a json object to the request's body body : '\"counter1\" crossed threshold, value={{ index .Values \"counter1\" }}' # enable extra logging debug : false The below example triggers an HTTP GET to http://remote-server:p8080/${router_name} if the value of counter \"counter1\" crosses 90 twice within 2 minutes. processors : my_trigger_proc : event-trigger : condition : '.values[\"counter1\"] > 90' min-occurrences : 1 max-occurrences : 2 window : 120s action : type : http method : POST url : http://remote-server:8080/{{ index .Tags \"source\" }} headers : content-type : application/text timeout : 5s body : '\"counter1\" crossed threshold, value={{ index .Values \"counter1\" }}'","title":"HTTP Action"},{"location":"user_guide/event_processors/event_trigger/#gnmi-action","text":"Using the gNMI action you can trigger a gNMI Get or Set RPC when the trigger condition is met. Just like the HTTP action the RPC fields can be customized using Go Templates processors : # processor name my_trigger_proc : # # processor type event-trigger : # trigger condition condition : '(.tags.interface_name == \"ethernet-1/1\" or .tags.interface_name == \"ethernet-1/2\") and .values[\"/srl_nokia-interfaces:interface/oper-state\"] == \"down\"' # minimum number of condition occurrences within the configured window # required to trigger the action min-occurrences : 1 # max number of times the action is triggered within the configured window max-occurrences : 1 # window of time during which max-occurrences need to # be reached in order to trigger the action window : 60s # the action to trigger action : # action type type : gnmi # gNMI rpc, defaults to `get`, if `set` is used it will default to a set update. # to trigger a set replace, use `set-replace` rpc : set # the target router, it defaults to the value in tag \"source\" target : '{{ index .Tags \"source\" }}' # paths templates to build xpaths paths : - | {{ if eq ( index .Tags \"interface_name\" ) \"ethernet-1/1\"}} {{$interfaceName := \"ethernet-1/2\"}} {{else}} {{$interfaceName := \"ethernet-1/1\"}} {{end}} /interfaces/interface[name={{$interfaceName}}]/admin-state # values templates to build the values in case of set-update or set-replace values : - \"enable\" # data-type in case of get RPC, one of: ALL, CONFIG, STATE, OPERATIONAL data-type : ALL # gNMI encoding, defaults to json encoding : json # debug, enable extra logging debug : false The below example shows a trigger that enables a router interface if another interface's operational status changes to \"down\". processors : interface_watch : # event-trigger : debug : true condition : '(.tags.interface_name == \"ethernet-1/1\" or .tags.interface_name == \"ethernet-1/2\") and .values[\"/srl_nokia-interfaces:interface/oper-state\"] == \"down\"' action : type : gnmi rpc : set target : '{{ index .Tags \"source\" }}' paths : - | {{ $interfaceName := \"\" }} {{ if eq ( index .Tags \"interface_name\" ) \"ethernet-1/1\"}} {{$interfaceName = \"ethernet-1/2\"}} {{ else if eq ( index .Tags \"interface_name\" ) \"ethernet-1/2\"}} {{$interfaceName = \"ethernet-1/1\"}} {{end}} /interface[name={{$interfaceName}}]/admin-state values : - \"enable\" encoding : json_ietf debug : true","title":"gNMI Action"},{"location":"user_guide/event_processors/event_write/","text":"The event-write processor, writes a message that has a value or a tag matching one of the configured regular expressions to stdout , stderr or to a file. A custom separator (used between written messages) can be configured, it defaults to \\n processors : # processor name write-processor : # processor type event-write : # jq expression, if evaluated to true, the message is written to dst condition : # list of regular expressions to be matched against the tags names, if matched, the message is written to dst tag-names : # list of regular expressions to be matched against the tags values, if matched, the message is written to dst tags : # list of regular expressions to be matched against the values names, if matched, the message is written to dst value-names : # list of regular expressions to be matched against the values, if matched, the message is written to dst values : # path to the destination file dst : # separator to be written between messages separator : # indent to use when marshaling the event message to json indent : Examples # processors : # processor name write-processor : # processor type event-write : value-names : - \".\" dst : file.log separator : \"\\n####\\n\" indent : \" \" $ cat file.log { \"name\" : \"sub1\" , \"timestamp\" : 1607582483868459381 , \"tags\" : { \"interface_name\" : \"ethernet-1/1\" , \"source\" : \"172.20.20.5:57400\" , \"subscription-name\" : \"sub1\" } , \"values\" : { \"/srl_nokia-interfaces:interface/statistics/carrier-transitions\" : \"1\" , \"/srl_nokia-interfaces:interface/statistics/in-broadcast-packets\" : \"22\" , \"/srl_nokia-interfaces:interface/statistics/in-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-fcs-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-multicast-packets\" : \"8694\" , \"/srl_nokia-interfaces:interface/statistics/in-octets\" : \"1740350\" , \"/srl_nokia-interfaces:interface/statistics/in-unicast-packets\" : \"17\" , \"/srl_nokia-interfaces:interface/statistics/out-broadcast-packets\" : \"22\" , \"/srl_nokia-interfaces:interface/statistics/out-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/out-multicast-packets\" : \"8696\" , \"/srl_nokia-interfaces:interface/statistics/out-octets\" : \"1723262\" , \"/srl_nokia-interfaces:interface/statistics/out-unicast-packets\" : \"17\" } } #### { \"name\" : \"sub1\" , \"timestamp\" : 1607582483868459381 , \"tags\" : { \"interface_name\" : \"ethernet-1/1\" , \"source\" : \"172.20.20.5:57400\" , \"subscription-name\" : \"sub1\" } , \"values\" : { \"/srl_nokia-interfaces:interface/statistics/carrier-transitions\" : \"1\" , \"/srl_nokia-interfaces:interface/statistics/in-broadcast-packets\" : \"22\" , \"/srl_nokia-interfaces:interface/statistics/in-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-fcs-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-multicast-packets\" : \"8694\" , \"/srl_nokia-interfaces:interface/statistics/in-octets\" : \"1740350\" , \"/srl_nokia-interfaces:interface/statistics/in-unicast-packets\" : \"17\" , \"/srl_nokia-interfaces:interface/statistics/out-broadcast-packets\" : \"22\" , \"/srl_nokia-interfaces:interface/statistics/out-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/out-multicast-packets\" : \"8696\" , \"/srl_nokia-interfaces:interface/statistics/out-octets\" : \"1723262\" , \"/srl_nokia-interfaces:interface/statistics/out-unicast-packets\" : \"17\" } } ####","title":"Write"},{"location":"user_guide/event_processors/event_write/#examples","text":"processors : # processor name write-processor : # processor type event-write : value-names : - \".\" dst : file.log separator : \"\\n####\\n\" indent : \" \" $ cat file.log { \"name\" : \"sub1\" , \"timestamp\" : 1607582483868459381 , \"tags\" : { \"interface_name\" : \"ethernet-1/1\" , \"source\" : \"172.20.20.5:57400\" , \"subscription-name\" : \"sub1\" } , \"values\" : { \"/srl_nokia-interfaces:interface/statistics/carrier-transitions\" : \"1\" , \"/srl_nokia-interfaces:interface/statistics/in-broadcast-packets\" : \"22\" , \"/srl_nokia-interfaces:interface/statistics/in-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-fcs-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-multicast-packets\" : \"8694\" , \"/srl_nokia-interfaces:interface/statistics/in-octets\" : \"1740350\" , \"/srl_nokia-interfaces:interface/statistics/in-unicast-packets\" : \"17\" , \"/srl_nokia-interfaces:interface/statistics/out-broadcast-packets\" : \"22\" , \"/srl_nokia-interfaces:interface/statistics/out-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/out-multicast-packets\" : \"8696\" , \"/srl_nokia-interfaces:interface/statistics/out-octets\" : \"1723262\" , \"/srl_nokia-interfaces:interface/statistics/out-unicast-packets\" : \"17\" } } #### { \"name\" : \"sub1\" , \"timestamp\" : 1607582483868459381 , \"tags\" : { \"interface_name\" : \"ethernet-1/1\" , \"source\" : \"172.20.20.5:57400\" , \"subscription-name\" : \"sub1\" } , \"values\" : { \"/srl_nokia-interfaces:interface/statistics/carrier-transitions\" : \"1\" , \"/srl_nokia-interfaces:interface/statistics/in-broadcast-packets\" : \"22\" , \"/srl_nokia-interfaces:interface/statistics/in-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-fcs-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/in-multicast-packets\" : \"8694\" , \"/srl_nokia-interfaces:interface/statistics/in-octets\" : \"1740350\" , \"/srl_nokia-interfaces:interface/statistics/in-unicast-packets\" : \"17\" , \"/srl_nokia-interfaces:interface/statistics/out-broadcast-packets\" : \"22\" , \"/srl_nokia-interfaces:interface/statistics/out-error-packets\" : \"0\" , \"/srl_nokia-interfaces:interface/statistics/out-multicast-packets\" : \"8696\" , \"/srl_nokia-interfaces:interface/statistics/out-octets\" : \"1723262\" , \"/srl_nokia-interfaces:interface/statistics/out-unicast-packets\" : \"17\" } } ####","title":"Examples"},{"location":"user_guide/event_processors/intro/","text":"The event processors provide an easy way to configure a set of functions in order to transform an event message that will be be written to a specific output. While the event format is the de facto format used by gNMIc in case the output is influxdb or prometheus , it can be used with any other output type. Transforming the received gNMI message is sometimes needed to accomodate the output system ( converting types, complying with name constraints,...), or simply filtering out values that you are not interested on. The event format # The event format is produced by gNMIc from the gNMI Notification messages received within a gNMI subscribe response update, it contains 5 fields: name : A string field populated by the subscription name, it is used as the measurement name in case of influxdb output or as a part of the metric name in case of prometheus output. timestamp : An int64 field containing the timestamp received within the gnmi Update. tags : A map of string keys and string values. The keys and values are extracted from the keys in the gNMI PathElement keys. gNMIc adds the subscription name and the target name/address. values : A map of string keys and generic values. The keys are build from a xpath representation of the gNMI path without the keys, while the values are extracted from the gNMI Node values . deletes : A string list built from the delete field of the gNMI Notification message . Defining an event processor # Event processors are defined under the section processors in gNMIc configuration file. Each processors is identified by a name, under which we specify the processor type as well as field specific to each type. All processors support a debug field that enables extra debug log messages to help troubleshoot the processor transformation. Below is an example of an event-delete processor, which deletes all values with a name containing multicast or broadcast processors : # processor name my-processor : # processor type event-delete : value-names : - \".*multicast.*\" - \".*broadcast.*\" Linking an event processor to an output # Once the needed event processors are defined under section processors , they can be linked to the desired output(s) in the same file. Each output can be configured with different event processors allowing flexibility in the way the same data is written to different outputs. A list of event processors names can be added under an output configuration, the processors will apply in the order they are configured. In the below example, 3 event processors are configured and linked to output1 of type influxdb . The first processor converts all value to integer if possible. The second deletes tags with name starting with subscription-name . Finally the third deletes values with name ending with out-unicast-packets . outputs : output1 : type : influxdb url : http://localhost:8086 bucket : telemetry token : srl:srl batch-size : 1000 flush-timer : 10s event-processors : - proc-convert-integer - proc-delete-tag-name - proc-delete-value-name processors : proc-convert-integer : event-convert : value-names : - \".*\" type : int proc-delete-tag-name : event-delete : tag-names : - \"^subscription-name\" proc-delete-value-name : event-delete : value-names : - \".*out-unicast-packets\"","title":"Introduction"},{"location":"user_guide/event_processors/intro/#the-event-format","text":"The event format is produced by gNMIc from the gNMI Notification messages received within a gNMI subscribe response update, it contains 5 fields: name : A string field populated by the subscription name, it is used as the measurement name in case of influxdb output or as a part of the metric name in case of prometheus output. timestamp : An int64 field containing the timestamp received within the gnmi Update. tags : A map of string keys and string values. The keys and values are extracted from the keys in the gNMI PathElement keys. gNMIc adds the subscription name and the target name/address. values : A map of string keys and generic values. The keys are build from a xpath representation of the gNMI path without the keys, while the values are extracted from the gNMI Node values . deletes : A string list built from the delete field of the gNMI Notification message .","title":"The event format"},{"location":"user_guide/event_processors/intro/#defining-an-event-processor","text":"Event processors are defined under the section processors in gNMIc configuration file. Each processors is identified by a name, under which we specify the processor type as well as field specific to each type. All processors support a debug field that enables extra debug log messages to help troubleshoot the processor transformation. Below is an example of an event-delete processor, which deletes all values with a name containing multicast or broadcast processors : # processor name my-processor : # processor type event-delete : value-names : - \".*multicast.*\" - \".*broadcast.*\"","title":"Defining an event processor"},{"location":"user_guide/event_processors/intro/#linking-an-event-processor-to-an-output","text":"Once the needed event processors are defined under section processors , they can be linked to the desired output(s) in the same file. Each output can be configured with different event processors allowing flexibility in the way the same data is written to different outputs. A list of event processors names can be added under an output configuration, the processors will apply in the order they are configured. In the below example, 3 event processors are configured and linked to output1 of type influxdb . The first processor converts all value to integer if possible. The second deletes tags with name starting with subscription-name . Finally the third deletes values with name ending with out-unicast-packets . outputs : output1 : type : influxdb url : http://localhost:8086 bucket : telemetry token : srl:srl batch-size : 1000 flush-timer : 10s event-processors : - proc-convert-integer - proc-delete-tag-name - proc-delete-value-name processors : proc-convert-integer : event-convert : value-names : - \".*\" type : int proc-delete-tag-name : event-delete : tag-names : - \"^subscription-name\" proc-delete-value-name : event-delete : value-names : - \".*out-unicast-packets\"","title":"Linking an event processor to an output"},{"location":"user_guide/inputs/input_intro/","text":"gnmic supports various Inputs to consume gnmi data, transform it and ultimately export it to one or multiple Outputs. The purpose of gnmic 's Inputs is to build a gnmi data pipeline by enabling the ingestion and export of gnmi data that was exported by gnmic 's outputs upstream. Currently supported input types: NATS messaging system NATS Streaming messaging bus (STAN) Kafka messaging bus Defining Inputs and matching Outputs # To define an Input a user needs to fill in the inputs section in the configuration file. Each Input is defined by its name ( input1 in the example below), a type field which determines the type of input to be created ( nats , stan , kafka ) and various other configuration fields which depend on the Input type. All Input types have an outputs field, under which the user can defined the downstream destination(s) of the consumed data. This way, data consumed once, can be exported multiple times. Info The same gnmic instance can act as gNMI collector, input and output simultaneously. Example: # part of gnmic config file inputs : input1 : type : nats # input type # # other config fields depending on the input type # outputs : - output1 - output2 Inputs use cases # Clustering # Using gnmic Inputs, the user can aggregate all the collected data into one instance of gnmic that can make it available to a downstream off the shelf tool,typically Prometheus. Data reuse # Collect data once and use it multiple times. By chaining multiple instances of gnmic the user can process the same stream of data in different ways. A different set of event processors can be applied on the data stream before being exported to its intended outputs.","title":"Introduction"},{"location":"user_guide/inputs/input_intro/#defining-inputs-and-matching-outputs","text":"To define an Input a user needs to fill in the inputs section in the configuration file. Each Input is defined by its name ( input1 in the example below), a type field which determines the type of input to be created ( nats , stan , kafka ) and various other configuration fields which depend on the Input type. All Input types have an outputs field, under which the user can defined the downstream destination(s) of the consumed data. This way, data consumed once, can be exported multiple times. Info The same gnmic instance can act as gNMI collector, input and output simultaneously. Example: # part of gnmic config file inputs : input1 : type : nats # input type # # other config fields depending on the input type # outputs : - output1 - output2","title":"Defining Inputs and matching Outputs"},{"location":"user_guide/inputs/input_intro/#inputs-use-cases","text":"","title":"Inputs use cases"},{"location":"user_guide/inputs/input_intro/#clustering","text":"Using gnmic Inputs, the user can aggregate all the collected data into one instance of gnmic that can make it available to a downstream off the shelf tool,typically Prometheus.","title":"Clustering"},{"location":"user_guide/inputs/input_intro/#data-reuse","text":"Collect data once and use it multiple times. By chaining multiple instances of gnmic the user can process the same stream of data in different ways. A different set of event processors can be applied on the data stream before being exported to its intended outputs.","title":"Data reuse"},{"location":"user_guide/inputs/kafka_input/","text":"When using Kafka as input, gnmic consumes data from a specific Kafka topic in event or proto format. Multiple consumers can be created per gnmic instance ( num-workers ). All the workers join the same Kafka consumer group ( group-id ) in order to load share the messages between the workers. Multiple instances of gnmic with the same Kafka input can be used to effectively consume the exported messages in parallel The Kafka input will export the received messages to the list of outputs configured under its outputs section. inputs : input1 : # string, required, specifies the type of input type : kafka # Kafka subscriber name # If left empty, it will be populated with the string from flag --instance-name appended with `--kafka-cons`. # If --instance-name is also empty, a random name is generated in the format `gnmic-$uuid` # note that each kafka worker (consumer) will get name=$name-$index name : \"\" # Kafka SASL configuration sasl : # SASL user name user : # SASL password password : # SASL mechanism: PLAIN, SCRAM-SHA-256, SCRAM-SHA-512 and OAUTHBEARER are supported mechanism : # token url for OAUTHBEARER SASL mechanism token-url : # string, comma separated Kafka servers addresses address : localhost:9092 # string, comma separated topics the Kafka consumer group consumes messages from. topics : telemetry # consumer group all gnmic Kafka input workers join, # so that Kafka server can load share the messages between them. Defaults to `gnmic-consumers` group-id : gnmic-consumers # duration, the timeout used to detect consumer failures when using Kafka's group management facility. # If no heartbeats are received by the broker before the expiration of this session timeout, # then the broker will remove this consumer from the group and initiate a rebalance. session-timeout : 10s # duration, the expected time between heartbeats to the consumer coordinator when using Kafka's group # management facilities. heartbeat-interval : 3s # duration, wait time before reconnection attempts after any error recovery-wait-time : 2s # string, kafka version, defaults to 2.5.0 version : # string, consumed message expected format, one of: proto, event format : event # bool, enables extra logging debug : false # integer, number of kafka consumers to be created num-workers : 1 # list of processors to apply on the message when received, # only applies if format is 'event' event-processors : # []string, list of named outputs to export data to. # Must be configured under root level `outputs` section outputs :","title":"Kafka"},{"location":"user_guide/inputs/nats_input/","text":"When using NATS as input, gnmic consumes data from a specific NATS subject in event or proto format. Multiple consumers can be created per gnmic instance ( num-workers ). All the workers join the same NATS queue group ( queue ) in order to load share the messages between the workers. Multiple instances of gnmic with the same NATS input can be used to effectively consume the exported messages in parallel The NATS input will export the received messages to the list of outputs configured under its outputs section. inputs : input1 : # string, required, specifies the type of input type : nats # NATS subscriber name # If left empty, it will be populated with the string from flag --instance-name appended with `--nats-sub`. # If --instance-name is also empty, a random name is generated in the format `gnmic-$uuid` # note that each nats worker (subscriber) will get name=$name-$index name : \"\" # string, comma separated NATS servers addresses address : localhost:4222 # The subject name gnmic NATS consumers subscribe to. subject : telemetry # subscribe queue group all gnmic NATS input workers join, # so that NATS server can load share the messages between them. queue : # string, NATS username username : # string, NATS password password : # duration, wait time before reconnection attempts connect-time-wait : 2s # string, consumed message expected format, one of: proto, event format : event # bool, enables extra logging debug : false # integer, number of nats consumers to be created num-workers : 1 # integer, sets the size of the local buffer where received # NATS messages are stored before being sent to outputs. # This value is set per worker. Defaults to 100 messages buffer-size : 100 # list of processors to apply on the message when received, # only applies if format is 'event' event-processors : # []string, list of named outputs to export data to. # Must be configured under root level `outputs` section outputs :","title":"NATS"},{"location":"user_guide/inputs/stan_input/","text":"When using STAN as input, gnmic consumes data from a specific STAN subject in event or proto format. Multiple consumers can be created per gnmic instance ( num-workers ). All the workers join the same STAN queue group ( queue ) in order to load share the messages between the workers. Multiple instances of gnmic with the same STAN input can be used to effectively consume the exported messages in parallel The STAN input will export the received messages to the list of outputs configured under its outputs section. inputs : input1 : # string, required, specifies the type of input type : stan # STAN subscriber name # If left empty, it will be populated with the string from flag --instance-name appended with `--stan-sub`. # If --instance-name is also empty, a random name is generated in the format `gnmic-$uuid` # note that each stan worker (subscriber) will get name=$name-$index name : \"\" # string, comma separated STAN servers addresses address : localhost:4222 # The subject name gnmic STAN consumers subscribe to. subject : telemetry # subscribe queue group all gnmic STAN input workers join, # so that STAN server can load share the messages between them. queue : # string, STAN username username : # string, STAN password password : # duration, wait time before reconnection attempts connect-time-wait : 2s # string, the STAN cluster name. defaults to test-cluster cluster-name : # integer, interval (in seconds) at which # a connection sends a PING to the server. min=1 ping-interval : # integer, number of PINGs without a response # before the connection is considered lost. min=2 ping-retry : # string, consumed message expected format, one of: proto, event format : event # bool, enables extra logging debug : false # integer, number of stan consumers to be created num-workers : 1 # list of processors to apply on the message when received, # only applies if format is 'event' event-processors : # []string, list of named outputs to export data to. # Must be configured under root level `outputs` section outputs :","title":"STAN"},{"location":"user_guide/outputs/file_output/","text":"gnmic supports exporting subscription updates to multiple local files A file output can be defined using the below format in gnmic config file under outputs section: outputs : output1 : type : file # required filename : /path/to/filename file-type : stdout # or stderr format : # string, message formatting, json, protojson, prototext, event multiline : # string, format the output in indented form with every element on a new line. indent : # string, indent specifies the set of indentation characters to use in a multiline formatted output separator : # string, separator is the set of characters to write between messages, defaults to new line concurrency-limit : 1000 # integer, specifies the maximum number of allowed concurrent file writes enable-metrics : false # boolean, enables the collection and export (via prometheus) of output specific metrics event-processors : # list of processors to apply on the message before writing The file output can be used to write to file on the disk, to stdout or to stderr. For a disk file, a file name is required. For stdout or stderr, only file-type is required.","title":"File"},{"location":"user_guide/outputs/influxdb_output/","text":"gnmic supports exporting subscription updates to influxDB time series database An influxdb output can be defined using the below format in gnmic config file under outputs section: outputs : output1 : type : influxdb # required url : http://localhost:8086 # influxDB server address org : myOrg # empty if using influxdb1.8.x bucket : telemetry # string in the form database/retention-policy. Skip retention policy for the default on token : # influxdb 1.8.x use a string in the form: \"username:password\" batch-size : 1000 # number of points to buffer before writing to the server flush-timer : 10s # flush period after which the buffer is written to the server whether the batch_size is reached or not use-gzip : false enable-tls : false health-check-period : 30s # server health check period, used to recover from server connectivity failure debug : false # enable debug enable-metrics : false # NOT IMPLEMENTED boolean, enables the collection and export (via prometheus) of output specific metrics event-processors : # list of processors to apply on the message before writing gnmic uses the event format to generate the measurements written to influxdb","title":"InfluxDB"},{"location":"user_guide/outputs/kafka_output/","text":"gnmic supports exporting subscription updates to multiple Apache Kafka brokers/clusters simultaneously A Kafka output can be defined using the below format in gnmic config file under outputs section: outputs : output1 : # required type : kafka # kafka client name. # if left empty, this field is populated with the output name used as output ID (output1 in this example). # the full name will be '$(name)-kafka-prod'. # If the flag --instance-name is not empty, the full name will be '$(instance-name)-$(name)-kafka-prod. # note that each kafka worker (producer) will get client name=$name-$index name : \"\" # Comma separated brokers addresses address : localhost:9092 # Kafka topic name topic : telemetry # Kafka SASL configuration sasl : # SASL user name user : # SASL password password : # SASL mechanism: PLAIN, SCRAM-SHA-256, SCRAM-SHA-512 and OAUTHBEARER are supported mechanism : # token url for OAUTHBEARER SASL mechanism token-url : # The total number of times to retry sending a message max-retry : 2 # Kafka connection timeout timeout : 5s # Wait time to reestablish the kafka producer connection after a failure recovery-wait-time : 10s # Exported msg format, json, protojson, prototext, proto, event format : event # Number of kafka producers to be created num-workers : 1 # (bool) enable debug debug : false # (int) number of messages to buffer before being picked up by the workers buffer-size : 0 # (bool) enables the collection and export (via prometheus) of output specific metrics enable-metrics : false # list of processors to apply on the message before writing event-processors : Currently all subscriptions updates (all targets and all subscriptions) are published to the defined topic name When a Prometheus server is enabled, gnmic kafka output exposes 4 prometheus metrics, 3 Counters and 1 Gauge: number_of_kafka_msgs_sent_success_total : Number of msgs successfully sent by gnmic kafka output. This Counter is labeled with the kafka producerID number_of_written_kafka_bytes_total : Number of bytes written by gnmic kafka output. This Counter is labeled with the kafka producerID number_of_kafka_msgs_sent_fail_total : Number of failed msgs sent by gnmic kafka output. This Counter is labeled with the kafka producerID as well as the failure reason msg_send_duration_ns : gnmic kafka output send duration in nanoseconds. This Gauge is labeled with the kafka producerID","title":"Kafka"},{"location":"user_guide/outputs/nats_output/","text":"gnmic supports exporting subscription updates to multiple NATS servers/clusters simultaneously A NATS output can be defined using the below format in gnmic config file under outputs section: outputs : output1 : # required type : nats # NATS publisher name # if left empty, this field is populated with the output name used as output ID (output1 in this example). # the full name will be '$(name)-nats-pub'. # If the flag --instance-name is not empty, the full name will be '$(instance-name)-$(name)-nats-pub. # note that each nats worker (publisher) will get client name=$name-$index name : \"\" # Comma separated NATS servers address : localhost:4222 # This prefix is used to to build the subject name for each target/subscription subject-prefix : telemetry # If a subject-prefix is not specified, gnmic will publish all subscriptions updates to a single subject configured under this field. Defaults to 'telemetry' subject : telemetry # NATS username username : # NATS password password : # wait time before reconnection attempts connect-time-wait : 2s # Exported message format, one of: proto, prototext, protojson, json, event format : json # integer, number of nats publishers to be created num-workers : 1 # duration after which a message waiting to be handled by a worker gets discarded write-timeout : 5s # boolean, enables extra logging for the nats output debug : false # boolean, enables the collection and export (via prometheus) of output specific metrics enable-metrics : false # list of processors to apply on the message before writing event-processors : Using subject config value, a user can specify the NATS subject to which to send all subscriptions updates for all targets If a user wants to separate updates by targets and by subscriptions, subject-prefix can be used. if subject-prefix is specified subject is ignored. gnmic takes advantage of NATS subject hierarchy by publishing gNMI subscription updates to a separate subject per target per subscription. The NATS subject name is built out of the subject-prefix , name under the target definition and subscription-name resulting in the following format: subject-prefix.name.subscription-name e.g: for a target router1 , a subscription name port-stats and subject-prefix telemetry the subject name will be telemetry.router1.port-stats If the target name is an IP address, or a hostname (meaning potentially contains . ), the . characters are replaced with a - e.g: for a target 172.17.0.100:57400 , the previous subject name becomes telemetry.172-17-0-100:57400.port-stats This way a user can subscribe to different subsets of updates by tweaking the subject name: \"telemetry.>\" gets all updates sent to NATS by all targets, all subscriptions \"telemetry.router1.>\" gets all NATS updates for target router1 \"telemetry.*.port-stats\" gets all updates from subscription port-stats, for all targets","title":"NATS"},{"location":"user_guide/outputs/output_intro/","text":"In the context of gnmi subscriptions (on top of terminal output) gnmic supports multiple output options: Local file NATS messaging system NATS Streaming messaging bus (STAN) Kafka messaging bus InfluxDB Time Series Database Prometheus Server UDP Server TCP Server These outputs can be mixed and matched at will with the different gnmi subscribe targets. With multiple outputs defined in the configuration file you can collect once and export the subscriptions updates to multiple locations formatted differently. Defining outputs # To define an output a user needs to create the outputs section in the configuration file: # part of ~/gnmic.yml config file outputs : output1 : type : file # output type file-type : stdout # or stderr format : json output2 : type : file filename : /path/to/localFile.log format : protojson output3 : type : nats # output type address : 127.0.0.1:4222 # comma separated nats servers addresses subject-prefix : telemetry # format : event output4 : type : file filename : /path/to/localFile.log format : json output5 : type : stan # output type address : 127.0.0.1:4223 # comma separated nats streaming servers addresses subject : telemetry # cluster-name : test-cluster # format : proto output6 : type : kafka # output type address : localhost:9092 # comma separated kafka brokers addresses topic : telemetry # kafka topic format : proto output7 : type : stan # output type address : 127.0.0.1:4223 # comma separated nats streaming servers addresses subject : telemetry cluster-name : test-cluster Output formats # Different formats are supported for all outputs Format/output proto protojson prototext json event File NATS / STAN Kafka UDP / TCP InfluxDB NA NA NA NA NA Prometheus NA NA NA NA NA Formats examples # protojson { \"update\" : { \"timestamp\" : \"1595491618677407414\" , \"prefix\" : { \"elem\" : [ { \"name\" : \"configure\" }, { \"name\" : \"system\" } ] }, \"update\" : [ { \"path\" : { \"elem\" : [ { \"name\" : \"name\" } ] }, \"val\" : { \"stringVal\" : \"sr123\" } } ] } } prototext update : { timestamp : 1595491704850352047 prefix : { elem : { name : \"configure\" } elem : { name : \"system\" } } update : { path : { elem : { name : \"name\" } } val : { string_val : \"sr123\" } } } json { \"source\" : \"172.17.0.100:57400\" , \"subscription-name\" : \"sub1\" , \"timestamp\" : 1595491557144228652 , \"time\" : \"2020-07-23T16:05:57.144228652+08:00\" , \"prefix\" : \"configure/system\" , \"updates\" : [ { \"Path\" : \"name\" , \"values\" : { \"name\" : \"sr123\" } } ] } event [ { \"name\" : \"sub1\" , \"timestamp\" : 1595491586073072000 , \"tags\" : { \"source\" : \"172.17.0.100:57400\" , \"subscription-name\" : \"sub1\" }, \"values\" : { \"/configure/system/name\" : \"sr123\" } } ] Binding outputs # Once the outputs are defined, they can be flexibly associated with the targets. # part of ~/gnmic.yml config file targets : router1.lab.com : username : admin password : secret outputs : - output1 - output3 router2.lab.com : username : gnmi password : telemetry outputs : - output2 - output3 - output4","title":"Introduction"},{"location":"user_guide/outputs/output_intro/#defining-outputs","text":"To define an output a user needs to create the outputs section in the configuration file: # part of ~/gnmic.yml config file outputs : output1 : type : file # output type file-type : stdout # or stderr format : json output2 : type : file filename : /path/to/localFile.log format : protojson output3 : type : nats # output type address : 127.0.0.1:4222 # comma separated nats servers addresses subject-prefix : telemetry # format : event output4 : type : file filename : /path/to/localFile.log format : json output5 : type : stan # output type address : 127.0.0.1:4223 # comma separated nats streaming servers addresses subject : telemetry # cluster-name : test-cluster # format : proto output6 : type : kafka # output type address : localhost:9092 # comma separated kafka brokers addresses topic : telemetry # kafka topic format : proto output7 : type : stan # output type address : 127.0.0.1:4223 # comma separated nats streaming servers addresses subject : telemetry cluster-name : test-cluster","title":"Defining outputs"},{"location":"user_guide/outputs/output_intro/#output-formats","text":"Different formats are supported for all outputs Format/output proto protojson prototext json event File NATS / STAN Kafka UDP / TCP InfluxDB NA NA NA NA NA Prometheus NA NA NA NA NA","title":"Output formats"},{"location":"user_guide/outputs/output_intro/#formats-examples","text":"protojson { \"update\" : { \"timestamp\" : \"1595491618677407414\" , \"prefix\" : { \"elem\" : [ { \"name\" : \"configure\" }, { \"name\" : \"system\" } ] }, \"update\" : [ { \"path\" : { \"elem\" : [ { \"name\" : \"name\" } ] }, \"val\" : { \"stringVal\" : \"sr123\" } } ] } } prototext update : { timestamp : 1595491704850352047 prefix : { elem : { name : \"configure\" } elem : { name : \"system\" } } update : { path : { elem : { name : \"name\" } } val : { string_val : \"sr123\" } } } json { \"source\" : \"172.17.0.100:57400\" , \"subscription-name\" : \"sub1\" , \"timestamp\" : 1595491557144228652 , \"time\" : \"2020-07-23T16:05:57.144228652+08:00\" , \"prefix\" : \"configure/system\" , \"updates\" : [ { \"Path\" : \"name\" , \"values\" : { \"name\" : \"sr123\" } } ] } event [ { \"name\" : \"sub1\" , \"timestamp\" : 1595491586073072000 , \"tags\" : { \"source\" : \"172.17.0.100:57400\" , \"subscription-name\" : \"sub1\" }, \"values\" : { \"/configure/system/name\" : \"sr123\" } } ]","title":"Formats examples"},{"location":"user_guide/outputs/output_intro/#binding-outputs","text":"Once the outputs are defined, they can be flexibly associated with the targets. # part of ~/gnmic.yml config file targets : router1.lab.com : username : admin password : secret outputs : - output1 - output3 router2.lab.com : username : gnmi password : telemetry outputs : - output2 - output3 - output4","title":"Binding outputs"},{"location":"user_guide/outputs/prometheus_output/","text":"gnmic supports exposing gnmi updates on a prometheus server, for a prometheus client to scrape. A Prometheus output can be defined using the below format in gnmic config file under outputs section: outputs : output1 : type : prometheus # require # address to listen on for incoming scrape requests listen : :9804 # path to query to get the metrics path : /metrics # maximum lifetime of metrics in the local cache, # # a zero value defaults to 60s, a negative duration (e.g: -1s) disables the expiration expiration : 60s # a string to be used as the metric namespace metric-prefix : \"\" # a boolean, if true the subscription name will be appended to the metric name after the prefix append-subscription-name : false # a boolean, enables exporting timestamps received from the gNMI target as part of the metrics export-timestamps : false # a boolean, enables setting string type values as prometheus metric labels. strings-as-labels : false # enable debug for prometheus output debug : false # list of processors to apply on the message before writing event-processors : # Enables Consul service registration service-registration : # Consul server address, default to localhost:8500 address : # Consul Data center, defaults to dc1 datacenter : # Consul username, to be used as part of HTTP basicAuth username : # Consul password, to be used as part of HTTP basicAuth password : # Consul Token, is used to provide a per-request ACL token which overrides the agent's default token token : # Prometheus service check interval, for both http and TTL Consul checks, # defaults to 5s check-interval : # Maximum number of failed checks before the service is deleted by Consul # defaults to 3 max-fail : # Consul service name name : # List of tags to be added to the service registration, # if available, the instance-name and cluster-name will be added as tags, # in the format: gnmic-instance=$instance-name and gnmic-cluster=$cluster-name tags : # bool, enables http service check on top of the TTL check enable-http-check : # string, if enable-http-check is true, this field can be used to specify the http endpoint to be used to the check # if provided, this filed with be prepended with 'http://' (if not already present), # and appended with the value in 'path' field. # if not specified, it will be derived from the fields 'listen' and 'path' http-check-address : # if set to true, the gnmic instance will try to ac quire a lock before registering the prometheus output in consul. # this allows to register a single instance of the cluster in consul. # if the instance which acquired the lock fails, one of the remaining ones will take over. use-lock : false gnmic creates the prometheus metric name and its labels from the subscription name, the gnmic path and the value name. Metric Generation # The below diagram shows an example of a prometheus metric generation from a gnmi update Metric Naming # The metric name starts with the string configured under metric-prefix . Then if append-subscription-name is true , the subscription-name as specified in gnmic configuraiton file is appended. The resulting string is followed by the gNMI path stripped from its keys if there are any. All non-alphanumeric characters are replaced with an underscore \" _ \" The 3 strings are then joined with an underscore \" _ \" If further customization of the metric name is required, the processors can be used to transform the metric name. For example, a gNMI update from subscription port-stats with path: /interfaces/interface [ name = 1 /1/1 ] /subinterfaces/subinterface [ index = 0 ] /state/counters/in-octets is exposed as a metric named: gnmic_port_stats_interfaces_interface_subinterfaces_subinterface_state_counters_in_octets Metric Labels # The metrics labels are generated from the subscription metadata (e.g: subscription-name and source ) and the keys present in the gNMI path elements. For the previous example the labels would be: { interface_name = \"1/1/1\" ,subinterface_index = 0 ,source = \" $routerIP :Port\" ,subscription_name = \"port-stats\" } Service Registration # gnmic supports prometheus_output service registration via Consul . It allows prometheus to dynamically discover new instances of gnmic exposing a prometheus server ready for scraping via its service discovery feature . If the configuration section service-registration is present under the output definition, gnmic will register the prometheus_output service in Consul . Configuration Example # The below configuration, registers a service name gnmic-prom-srv with IP=10.1.1.1 and port=9804 # gnmic.yaml outputs : output1 : type : prometheus listen : 10.1.1.1:9804 path : /metrics service-registration : address : consul-agent.local:8500 name : gnmic-prom-srv This allows running multiple instances of gnmic with minimal configuration changes by using prometheus service discovery feature . Simplified scrape configuration in the prometheus client: # prometheus.yaml scrape_configs : - job_name : 'gnmic' scrape_interval : 10s consul_sd_configs : - server : $CONSUL_ADDRESS services : - $service_name Service Name # The $service_name to be discovered by prometheus is configured under outputs.$output_name.service-registration.name . If the service registration name field is not present, it will be populated with gnmic instance-name (if present) and the prometheus_output name, joined with a - . Service Checks # gnmic registers the service in Consul with a ttl check enabled by default: ttl : gnmic periodically updates the service definition in Consul . The goal is to allow Consul to detect a same instance restarting with a different service name. If service-registration.enable-http-check is true , an http check is added: * http : Consul periodically scrapes the prometheus server endpoint to check its availability. # gnmic.yaml outputs : output1 : type : prometheus listen : 10.1.1.1:9804 path : /metrics service-registration : address : consul-agent.local:8500 name : gnmic-prom-srv enable-http-check : true Note that for the http check to work properly, a routable address ( IP or name ) should be specified under listen . Otherwise, a routable address should be added under service-registration.http-check-address","title":"Prometheus"},{"location":"user_guide/outputs/prometheus_output/#metric-generation","text":"The below diagram shows an example of a prometheus metric generation from a gnmi update","title":"Metric Generation"},{"location":"user_guide/outputs/prometheus_output/#metric-naming","text":"The metric name starts with the string configured under metric-prefix . Then if append-subscription-name is true , the subscription-name as specified in gnmic configuraiton file is appended. The resulting string is followed by the gNMI path stripped from its keys if there are any. All non-alphanumeric characters are replaced with an underscore \" _ \" The 3 strings are then joined with an underscore \" _ \" If further customization of the metric name is required, the processors can be used to transform the metric name. For example, a gNMI update from subscription port-stats with path: /interfaces/interface [ name = 1 /1/1 ] /subinterfaces/subinterface [ index = 0 ] /state/counters/in-octets is exposed as a metric named: gnmic_port_stats_interfaces_interface_subinterfaces_subinterface_state_counters_in_octets","title":"Metric Naming"},{"location":"user_guide/outputs/prometheus_output/#metric-labels","text":"The metrics labels are generated from the subscription metadata (e.g: subscription-name and source ) and the keys present in the gNMI path elements. For the previous example the labels would be: { interface_name = \"1/1/1\" ,subinterface_index = 0 ,source = \" $routerIP :Port\" ,subscription_name = \"port-stats\" }","title":"Metric Labels"},{"location":"user_guide/outputs/prometheus_output/#service-registration","text":"gnmic supports prometheus_output service registration via Consul . It allows prometheus to dynamically discover new instances of gnmic exposing a prometheus server ready for scraping via its service discovery feature . If the configuration section service-registration is present under the output definition, gnmic will register the prometheus_output service in Consul .","title":"Service Registration"},{"location":"user_guide/outputs/prometheus_output/#configuration-example","text":"The below configuration, registers a service name gnmic-prom-srv with IP=10.1.1.1 and port=9804 # gnmic.yaml outputs : output1 : type : prometheus listen : 10.1.1.1:9804 path : /metrics service-registration : address : consul-agent.local:8500 name : gnmic-prom-srv This allows running multiple instances of gnmic with minimal configuration changes by using prometheus service discovery feature . Simplified scrape configuration in the prometheus client: # prometheus.yaml scrape_configs : - job_name : 'gnmic' scrape_interval : 10s consul_sd_configs : - server : $CONSUL_ADDRESS services : - $service_name","title":"Configuration Example"},{"location":"user_guide/outputs/prometheus_output/#service-name","text":"The $service_name to be discovered by prometheus is configured under outputs.$output_name.service-registration.name . If the service registration name field is not present, it will be populated with gnmic instance-name (if present) and the prometheus_output name, joined with a - .","title":"Service Name"},{"location":"user_guide/outputs/prometheus_output/#service-checks","text":"gnmic registers the service in Consul with a ttl check enabled by default: ttl : gnmic periodically updates the service definition in Consul . The goal is to allow Consul to detect a same instance restarting with a different service name. If service-registration.enable-http-check is true , an http check is added: * http : Consul periodically scrapes the prometheus server endpoint to check its availability. # gnmic.yaml outputs : output1 : type : prometheus listen : 10.1.1.1:9804 path : /metrics service-registration : address : consul-agent.local:8500 name : gnmic-prom-srv enable-http-check : true Note that for the http check to work properly, a routable address ( IP or name ) should be specified under listen . Otherwise, a routable address should be added under service-registration.http-check-address","title":"Service Checks"},{"location":"user_guide/outputs/stan_output/","text":"gnmic supports exporting subscription updates to multiple NATS Streaming (STAN) servers/clusters simultaneously A STAN output can be defined using the below format in gnmic config file under outputs section: outputs : output1 : type : stan # required # comma separated STAN servers address : localhost:4222 # stan subject subject : telemetry # stan subject prefix, the subject prefix is built the same way as for NATS output subject-prefix : telemetry # STAN username username : # STAN password password : # STAN publisher name # if left empty, this field is populated with the output name used as output ID (output1 in this example). # the full name will be '$(name)-stan-pub'. # If the flag --instance-name is not empty, the full name will be '$(instance-name)-$(name)-stan-pub. # note that each stan worker (publisher) will get client name=$name-$index name : \"\" # cluster name, mandatory cluster-name : test-cluster # STAN ping interval ping-interval : 5 # STAN ping retry ping-retry : 2 # string, message marshaling format, one of: proto, prototext, protojson, json, event format : event # duration to wait before re establishing a lost connection to a stan server recovery-wait-time : 2s # integer, number of stan publishers to be created num-workers : 1 # boolean, enables extra logging for the STAN output debug : false # duration after which a message waiting to be handled by a worker gets discarded write-timeout : 10s # boolean, enables the collection and export (via prometheus) of output specific metrics enable-metrics : false # list of processors to apply on the message before writing event-processors : Using subject config value a user can specify the STAN subject to which to send all subscriptions updates for all targets If a user wants to separate updates by targets and by subscriptions, subject-prefix can be used. if subject-prefix is specified subject is ignored.","title":"STAN"},{"location":"user_guide/outputs/tcp_output/","text":"gnmic supports exporting subscription updates to a TCP server A TCP output can be defined using the below format in gnmic config file under outputs section: outputs : output1 : type : tcp # required address : IPAddress:Port # a UDP server address rate : 10ms # maximum sending rate, e.g: 1ns, 10ms buffer-size : # number of messages to buffer in case of sending failure format : json # export format. json, protobuf, prototext, protojson, event keep-alive : # enable TCP keepalive and specify the timer, e.g: 1s, 30s retry-interval : # time duration to wait before re-dial in case there is a failure enable-metrics : false # NOT IMPLEMENTED boolean, enables the collection and export (via prometheus) of output specific metrics event-processors : # list of processors to apply on the message before writing A TCP output can be used to export data to an ELK stack, using Logstash TCP input","title":"TCP"},{"location":"user_guide/outputs/udp_output/","text":"gnmic supports exporting subscription updates to a UDP server A UDP output can be defined using the below format in gnmic config file under outputs section: outputs : output1 : type : udp # required address : IPAddress:Port # a UDP server address rate : 10ms # maximum sending rate, e.g: 1ns, 10ms buffer-size : # number of messages to buffer in case of sending failure format : json # export format. json, protobuf, prototext, protojson, event retry-interval : # time duration to wait before re-dial in case there is a failure enable-metrics : false # NOT IMPLEMENTED boolean, enables the collection and export (via prometheus) of output specific metrics event-processors : # list of processors to apply on the message before writing A UDP output can be used to export data to an ELK stack, using Logstash UDP input","title":"UDP"}]}